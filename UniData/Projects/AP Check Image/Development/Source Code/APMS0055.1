   SUBROUTINE APMS0055.1
* XML for BASIC API Programmatic Interfaces
* VERSION 8.2.3
*
* 05 MAY 15 8.2.3 juntan PRJ*JUNTAN.78-Use UniQuery command instead of OS command in the AP ch
* 13 NOV 12 8.2.3 juntan PRJ*APM106D-DEVELOP AN AUTOMATE MECHANISM TO UPLOAD CHEQUE IMAGES R
*
*
*
*
*
****************************************
*
*   IPEX Inc. - INFOFLO Release 8.2
*
*    Copyright (c) 1998, Ipex Inc.
*
*         All Rights Reserved
*
****************************************
   $INCLUDE IIPLUS.TOP
   PROGRAM='APMS0055.1'
   $INCLUDE IIPLUS.TEXTLOAD
   $INCLUDE IIPLUS.DEBUG
   $INCLUDE /usr/igi/ud/sys/INCLUDE XML.H

**************************************************************************
*
* DESCRIPTION:
* ============
*              This program is used to parse and extract data from a XML
*              document based on the XML schema rules defined in U2 XML
*              extraction files located in _XML_ directory.
*
* MODIFICATIONS:
* ============== 
*              2012/11/09 juntan APM106D - Initial creation.
*
**************************************************************************

A100_MAIN:

   GOSUB A200_INITIALIZATION
   IF RTN.FLAG THEN
      GO A100_EXIT
   END

   GOSUB A300_OPEN_FILES
   IF RTN.FLAG THEN
      GO A100_EXIT
   END

   GOSUB A400_MAIN_PROCESS
   IF RTN.FLAG THEN
      GO A100_EXIT
   END

A100_EXIT:
   GO A500_CONCLUSION

****************************************
* Definition of local variables & initialization of other variables.
****************************************
A200_INITIALIZATION:

   RTN.FLAG = 0

   XML_INDEX_FNAME = ""            ;* AP check image index file name (.xml)
   TIF_IMAGE_FNAME = ""            ;* AP check image file name list (.txt)
   XML_FILE_PATH_INBOUND = ""
   XML_FILE_PATH_OUTBOUND = ""
   XML_INDEX_FILE_HEADER_EXT = ""
   XML_INDEX_FILE_BODY_EXT = ""
   XML_INDEX_FILE_TRAILER_EXT = ""

   H_XML = ''
   H_XML_DATA = ''

   L_STATUS = ''
   L_TMP = ''
   L_KEY = ''
   L_REC = ''
   L_KEY_LIST = ''
   L_REC_CTR = ''
   L_REC_IDX_H = ''
   L_REC_IDX_B = ''
   L_REC_IDX_T = ''
   L_APCHKIMGLOG_KEY = ''
   L_APCHKIMGLOG_REC = ''
   L_SYSCON_KEY = ""
   L_SYSCON_REC = ""
   L_SCHEDCONTROL_KEY = ''
   L_SCHEDCONTROL_REC = ''
   L_CHK_REC = ''
   L_CHK_NUM = ''
   L_BNK_NUM = ''
   L_ACCT_NUM = ''
   L_ERR_CHK_NUM_LIST = ''
   L_ERR_ACCT_NUM_LIST = ''
   L_ERR_TIF_FNAME_LIST = ''
   L_ERR_SAVE_FNAME_LIST = ''
   L_ERR_POST_ACTION = ''
   L_SAVE_PARAM = ''
   L_QUERY = ''
   L_CMD = ''
   L_JUNK = ''
   L_TO_EMAIL = ''
   I = 0
   L_EOF = 0
   L_CNT = 0
   L_INC = 0
   L_TTL = 0
   L_POS = 0
   L_CHECK_TOT = 0
   L_BNK_F23 = ''
   L_F23 = ''
   L_ACCOUNT = @WHO
   L_SEMAPHORE_FNAME = ''
   L_IDX_FILE_NAME = ''
   L_IMG_FILE_NAME = ''
   L_TEXT_FILE = ''
   L_FNAME = ''
   L_FOUND = 0
   L_SUCCEED = 1

A200_EXIT:
   RETURN

****************************************
* Open the files needed in this subroutine.
****************************************
A300_OPEN_FILES:

   FILE.ERR = 0

   CALL SB.OPEN.FILE("APCHK",APCHK,FILE.ERR)
   IF FILE.ERR THEN
      CALL SB.PROCESS("SYS0061,IP2564\":"APCHK")
      RTN.FLAG = 1
      GO A300_EXIT
   END

   CALL SB.OPEN.FILE("SYSTBL",SYSTBL,FILE.ERR)
   IF FILE.ERR THEN
      CALL SB.PROCESS("SYS0061,IP2564\":"SYSTBL")
      RTN.FLAG = 1
      GO A300_EXIT
   END

   CALL SB.OPEN.FILE("SYSCON",SYSCON,FILE.ERR)
   IF FILE.ERR THEN
      CALL SB.PROCESS("SYS0061,IP2564\":"SYSCON")
      RTN.FLAG = 1
      GO A300_EXIT
   END

   CALL SB.OPEN.FILE("VOC",VOC,FILE.ERR)
   IF FILE.ERR THEN
      CALL SB.PROCESS("SYS0061,IP2564\":"VOC")
      RTN.FLAG = 1
      GO A300_EXIT
   END

   CALL SB.OPEN.FILE("SCHEDCONTROL",SCHEDCONTROL,FILE.ERR)
   IF FILE.ERR THEN
      CALL SB.PROCESS("SYS0061,IP2564\":"SCHEDCONTROL")
      RTN.FLAG = 1
      GO A300_EXIT
   END

   CALL SB.OPEN.FILE("IECINBOUND",IECINBOUND,FILE.ERR)
   IF FILE.ERR THEN
      CALL SB.PROCESS("SYS0061,IP2564\":"IECINBOUND")
      RTN.FLAG = 1
      GO A300_EXIT
   END

   CALL SB.OPEN.FILE("IECOUTBOUND",IECOUTBOUND,FILE.ERR)
   IF FILE.ERR THEN
      CALL SB.PROCESS("SYS0061,IP2564\":"IECOUTBOUND")
      RTN.FLAG = 1
      GO A300_EXIT
   END

A300_EXIT:
   RETURN

****************************************
* Main process workflow.
****************************************
A400_MAIN_PROCESS:

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #1 Retrieving XML files path..."
   GOSUB B100_GET_XML_FILES_PATH
   IF RTN.FLAG # 0 THEN
      GO A400_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #2 Selecting AP check image data files..."
   GOSUB B200_SELECT_DATA_FILES
   IF RTN.FLAG # 0 THEN
      GO A400_EXIT
   END

A400_EXIT:
   RETURN

****************************************
* Retrieve XML files path
****************************************
B100_GET_XML_FILES_PATH:

   READV XML_FILE_PATH_INBOUND FROM VOC, 'IECINBOUND', 2 ELSE XML_FILE_PATH_INBOUND = ""
   READV XML_FILE_PATH_OUTBOUND FROM VOC, 'IECOUTBOUND', 2 ELSE XML_FILE_PATH_OUTBOUND = ""

   L_SYSCON_KEY = "APCHKIMG.CONSTANT"
   READ L_SYSCON_REC FROM SYSCON,L_SYSCON_KEY ELSE L_SYSCON_REC = ""
   IF L_SYSCON_REC # "" THEN
      XML_INDEX_FILE_HEADER_EXT = TRIM(FIELD(L_SYSCON_REC<1>,';',1))
      XML_INDEX_FILE_BODY_EXT = TRIM(FIELD(L_SYSCON_REC<2>,';',1))
      XML_INDEX_FILE_TRAILER_EXT = TRIM(FIELD(L_SYSCON_REC<3>,';',1))
   END ELSE
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #1 ERROR -> Failed retrieving XML file paths."
      RTN.FLAG = 1
      GO B100_EXIT
   END

B100_EXIT:
   RETURN


****************************************
* Select AP image data files from IECINBOUND
****************************************
B200_SELECT_DATA_FILES:

   CLEARSELECT
   L_QUERY = 'SSELECT IECINBOUND WITH @ID = "FLAGSCOTIABANK.]"'
   EXECUTE L_QUERY CAPTURING L_JUNK
   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #2.1 ":L_QUERY:" -> ":L_JUNK
   BEGIN CASE
      CASE SYSTEM(11) > 0
         LOOP
         WHILE READNEXT L_KEY
            L_KEY_LIST<-1> = TRIM(L_KEY[5,LEN(L_KEY)])
         REPEAT
         FOR I = 1 TO DCOUNT(L_KEY_LIST,@FM)
            XML_INDEX_FNAME = XML_FILE_PATH_INBOUND:"/":L_KEY_LIST<I>:".XML"
            L_IDX_FILE_NAME = L_KEY_LIST<I>:".XML"
            L_SEMAPHORE_FNAME = "FLAG":L_KEY_LIST<I>
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #2.2 Selected index file ":XML_INDEX_FNAME

            TIF_IMAGE_FNAME = XML_FILE_PATH_INBOUND:"/":L_KEY_LIST<I>:".TXT"
            L_IMG_FILE_NAME = L_KEY_LIST<I>:".TXT"
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #2.3 Selected text file ":TIF_IMAGE_FNAME

            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3 Parsing XML Index File..."
            GOSUB B300_PARSE_XML_INDEX_FILE
            IF RTN.FLAG # 0 THEN
               GO B200_EXIT
            END

            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #4 Moving AP image data files..."
            GOSUB B400_MOVE_DATA_FILES
            IF RTN.FLAG # 0 THEN
               GO B200_EXIT
            END

            GOSUB B500_EMAIL_SUMMARY
            IF RTN.FLAG # 0 THEN
               GO B200_EXIT
            END

            L_ERR_CHK_NUM_LIST = ''
            L_ERR_ACCT_NUM_LIST = ''
            L_ERR_TIF_FNAME_LIST = ''
            L_ERR_SAVE_FNAME_LIST = ''
         NEXT I

      CASE SYSTEM(11) = 0
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #2.2 No AP check data file exists in IECINBOUND."
         RTN.FLAG = 1
      CASE SYSTEM(11) < 0
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #2.2 ERROR -> Failed selecting AP data files from IECINBOUND."
         RTN.FLAG = 1
   END CASE

B200_EXIT:
   RETURN

****************************************
* Parse XML Index File Header Contents.
****************************************
B300_PARSE_XML_INDEX_FILE:

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1 Reading header contents..."
   GOSUB B310_READ_HEADER_CONTENTS
   IF RTN.FLAG # 0 THEN
      GO B300_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2 Reading body contents..."
   GOSUB B320_READ_BODY_CONTENTS
   IF RTN.FLAG # 0 THEN
      GO B300_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3 Reading trailer contents..."
   GOSUB B330_READ_TRAILER_CONTENTS
   IF RTN.FLAG # 0 THEN
      GO B300_EXIT
   END

B300_EXIT:
   RETURN

****************************************
* Read XML Index File Header Contents.
****************************************
B310_READ_HEADER_CONTENTS:

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.1 Preparing the XML document..."
   L_STATUS = PREPAREXML(XML_INDEX_FNAME,H_XML)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.1 ERROR -> API PrepareXML() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B310_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.2 Opening XML Extraction File for data maping..."
   L_STATUS = OPENXMLDATA(H_XML,XML_INDEX_FILE_HEADER_EXT,H_XML_DATA)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.2 ERROR -> API OpenXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B310_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.3 Reading XML document header contents..."
   L_STATUS = READXMLDATA(H_XML_DATA,L_REC_IDX_H)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.3 API ReadXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B310_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.4 Validating XML document header contents..."
   GOSUB B311_VALIDATE_HEADER_CONTENTS

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.5 Closing the XML document..."
   L_STATUS = CLOSEXMLDATA(H_XML_DATA)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.5 ERROR -> API CloseXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B310_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.6 Releasing the XML document..."
   L_STATUS = RELEASEXML(H_XML)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.6 ERROR -> API ReleaseXML() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B310_EXIT
   END

B310_EXIT:
   RETURN

****************************************
* Validate XML Index File Header Contents.
****************************************
B311_VALIDATE_HEADER_CONTENTS:

   CLEARSELECT
   L_QUERY = 'SELECT SYSTBL WITH @ID = "I275*H]" BY @ID'
   EXECUTE L_QUERY CAPTURING L_JUNK
   IF @SYSTEM.RETURN.CODE > 0 THEN
      L_CNT = 0
      LOOP
      WHILE READNEXT L_KEY
         L_CNT += 1
         READ L_REC FROM SYSTBL,L_KEY THEN
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.4.2 ":L_REC<4>:" = ":TRIM(FIELD(L_REC_IDX_H,@FM,L_CNT))
         END ELSE
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.4.2 ERROR -> Record ":L_KEY:" does not exist in SYSTBL."
         END
      REPEAT
   END ELSE
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.1.4.1 ":L_QUERY:" -> ":L_JUNK
      RTN.FLAG = 1
   END

B311_EXIT:
   RETURN

****************************************
* Read XML Index File Body Contents.
****************************************
B320_READ_BODY_CONTENTS:

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.1 Preparing the XML document..."
   L_STATUS = PREPAREXML(XML_INDEX_FNAME,H_XML)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.1 ERROR -> API PrepareXML() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B320_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.2 Opening XML Extraction File for data maping..."
   L_STATUS = OPENXMLDATA(H_XML,XML_INDEX_FILE_BODY_EXT,H_XML_DATA)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.2 ERROR -> API OpenXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B320_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.3 Reading XML document header contents..."
   L_STATUS = READXMLDATA(H_XML_DATA,L_REC_IDX_B)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.3 ERROR -> API ReadXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B320_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4 Validating XML Index File Body Contents..."
   L_REC_ITEM_LIST = FIELD(L_REC_IDX_B,@FM,1)
   L_REC_OFFSET_LIST = FIELD(L_REC_IDX_B,@FM,2)
   L_REC_DATALENGTH_LIST = FIELD(L_REC_IDX_B,@FM,3)
   GOSUB B321_VALIDATE_BODY_CONTENTS

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.5 Closing the XML document..."
   L_STATUS = CLOSEXMLDATA(H_XML_DATA)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.5 ERROR -> API CloseXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B320_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.6 Releasing the XML document..."
   L_STATUS = RELEASEXML(H_XML)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.6 ERROR -> API ReleaseXML() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B320_EXIT
   END

B320_EXIT:
   RETURN

****************************************
* Validate XML Index File Body Contents.
****************************************
B321_VALIDATE_BODY_CONTENTS:

   *** Retrieving all bank codes available for AP CHECK ***
   CLEARSELECT
   L_QUERY = 'SSELECT SYSTBL WITH @ID = "BNK*]" AND WITH F23 # ""'
   EXECUTE L_QUERY CAPTURING L_JUNK
   BEGIN CASE
      CASE SYSTEM(11) > 0
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.1 Retrieving all bank codes with AP check account # in BNK table of SYSTBL file."
         LOOP
         WHILE READNEXT L_KEY
            READV L_F23 FROM SYSTBL, L_KEY, 23 ELSE L_F23 = ""
            L_BNK_F23<1,-1> = FIELD(L_KEY,"*",2)
            L_BNK_F23<1,-1> = L_F23
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.1 bank code retrieved -> ":FIELD(L_KEY,"*",2):" for AP check account # ":L_F23
         REPEAT
      CASE SYSTEM(11) = 0
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.1 ERROR -> No bank code with AP check account # retrieved in BNK table of SYSTBL file."
         RTN.FLAG = 1
         GO B321_EXIT
      CASE SYSTEM(11) < 0
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.1 ERROR -> Failed selecting bank code in SYSTBL file."
         RTN.FLAG = 1
         GO B321_EXIT
   END CASE

   L_CHECK_TOT = DCOUNT(L_REC_ITEM_LIST,@VM)
   FOR L_IDX = 1 TO L_CHECK_TOT
      L_CHK_REC = FIELD(L_REC_ITEM_LIST,@VM,L_IDX):@SVM:FIELD(L_REC_OFFSET_LIST,@VM,L_IDX):@SVM:FIELD(L_REC_DATALENGTH_LIST,@VM,L_IDX)
      L_CHK_NUM = TRIM(FIELD(L_CHK_REC,@SVM,2))
      L_ACCT_NUM = TRIM(FIELD(L_CHK_REC,@SVM,8)):"-":TRIM(FIELD(L_CHK_REC,@SVM,9))
      L_FNAME = TRIM(FIELD(L_CHK_REC,@SVM,12))

      *** Display per check data based on filed name setup in SYSTBL ***
      PRINT "<<< Check #":L_IDX:" >>>"
      CLEARSELECT
      L_QUERY = 'SELECT SYSTBL WITH @ID = "I275*B]" BY @ID'
      EXECUTE L_QUERY CAPTURING L_JUNK
      IF @SYSTEM.RETURN.CODE > 0 THEN
         L_CNT = 0
         LOOP
         WHILE READNEXT L_KEY
            L_CNT += 1
            READ L_REC FROM SYSTBL,L_KEY THEN
               PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.2 ":L_REC<4>:" = ":TRIM(FIELD(L_CHK_REC,@SVM,L_CNT))
            END ELSE
               PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.2 ERROR -> Record ":L_KEY:" does not exist in SYSTBL."
            END
         REPEAT
      END ELSE
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.2 ":L_QUERY:" -> ":L_JUNK
         RTN.FLAG = 1
         GO B321_EXIT
      END

      *** Validate bank code and account number ***
      LOCATE L_ACCT_NUM IN L_BNK_F23<1> SETTING L_POS THEN
         L_BNK_NUM = L_BNK_F23<1,L_POS-1>

         *** Validate check # ***
         READ L_REC FROM APCHK,L_CHK_NUM:"*":L_BNK_NUM ELSE L_REC = ""
         IF L_REC = "" THEN
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.3 ERROR -> Check record ":L_CHK_NUM:"*":L_BNK_NUM:" does not exist in APCHK file."
            L_ERR_CHK_NUM_LIST<1,-1> = L_IDX:". ":L_CHK_NUM:"*":L_BNK_NUM
         END
      END ELSE
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.3 ERROR -> Unable to find bank code for account # ":L_ACCT_NUM:" in BNK table of SYSTBL file."
         L_ERR_ACCT_NUM_LIST<1,-1> = L_IDX:". ":L_ACCT_NUM
      END

      *** Validate TIF file name ***
      L_EOF = 0
      L_FOUND = 0
      OPENSEQ TIF_IMAGE_FNAME TO L_TEXT_FILE ON ERROR
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.3 ERROR -> Unable to open ":TIF_IMAGE_FNAME:". Error code = ":STATUS()
      END LOCKED
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.3 ERROR -> File ":TIF_IMAGE_FNAME:" is currently locked by ":GETUSERNAME(STATUS())
      END THEN
         LOOP
            READSEQ L_TIF_IMG_FNAME FROM L_TEXT_FILE ELSE L_EOF = 1
         UNTIL L_EOF
            IF L_FNAME = L_TIF_IMG_FNAME THEN
               L_FOUND = 1
               EXIT
            END
         REPEAT
      END ELSE
         IF STATUS() = 0 THEN
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.3 ERROR -> File ":TIF_IMAGE_FNAME:" does not exist."
         END ELSE
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.3 ERROR -> Unable to open ":TIF_IMAGE_FNAME:". Error code = ":STATUS()
         END
      END
      IF NOT(L_FOUND) THEN
         PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.3 ERROR -> Missing TIF image filename ":L_TIF_IMG_FNAME:" in ":TIF_IMAGE_FNAME:"."
         L_ERR_TIF_FNAME_LIST<1,-1> = L_IDX:". ":L_TIF_IMG_FNAME
      END
   NEXT L_IDX

   *** Save TIF image file name in APCHK file if everything is ok ***
   IF L_ERR_ACCT_NUM_LIST = "" AND L_ERR_CHK_NUM_LIST = "" AND L_ERR_TIF_FNAME_LIST = "" THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.4 All checks are validated, saving per TIF image filename to APCHK file."
      FOR L_IDX = 1 TO L_CHECK_TOT
         L_CHK_REC = FIELD(L_REC_ITEM_LIST,@VM,L_IDX):@SVM:FIELD(L_REC_OFFSET_LIST,@VM,L_IDX):@SVM:FIELD(L_REC_DATALENGTH_LIST,@VM,L_IDX)
         L_CHK_NUM = TRIM(FIELD(L_CHK_REC,@SVM,2))
         L_ACCT_NUM = TRIM(FIELD(L_CHK_REC,@SVM,8)):TRIM(FIELD(L_CHK_REC,@SVM,9))
         L_FNAME = TRIM(FIELD(L_CHK_REC,@SVM,12))
         LOCATE L_ACCT_NUM IN L_BNK_F23<1> SETTING L_POS THEN
            L_BNK_NUM = L_BNK_F23<1,L_POS-1>
         END
         WRITEV L_FNAME TO APCHK, L_CHK_NUM:"*":L_BNK_NUM, 36 ON ERROR
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.2.4.4 ERROR -> Unable to save TIF image filename ":L_FNAME:" to APCHK file for check record ":L_CHK_NUM:"*":L_BNK_NUM:". Error code = ":STATUS()
            L_ERR_SAVE_FNAME_LIST<1,-1> = L_IDX:". ":L_FNAME
         END
      NEXT L_IDX
   END

B321_EXIT:
   RETURN

****************************************
* Read XML Index File Tralier Contents.
****************************************
B330_READ_TRAILER_CONTENTS:

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.1 Preparing the XML document..."
   L_STATUS = PREPAREXML(XML_INDEX_FNAME,H_XML)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.1 ERROR -> API PrepareXML() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B330_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.2 Opening XML Extraction File for data maping..."
   L_STATUS = OPENXMLDATA(H_XML,XML_INDEX_FILE_TRAILER_EXT,H_XML_DATA)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.2 ERROR -> API OpenXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B330_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.3 Reading XML document header contents..."
   L_STATUS = READXMLDATA(H_XML_DATA,L_REC_IDX_T)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.3 ERROR -> API ReadXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B330_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.4 Validating XML Index File Tralier Contents..."
   GOSUB B331_VALIDATE_TRALIER_CONTENTS

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.5 Closing the XML document..."
   L_STATUS = CLOSEXMLDATA(H_XML_DATA)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.5 API CloseXMLData() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B330_EXIT
   END

   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.6 Releasing the XML document..."
   L_STATUS = RELEASEXML(H_XML)
   IF L_STATUS # XML.SUCCESS THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.6 API ReleaseXML() call failed."
      GOSUB C100_DISP_XML_ERR_MSG
      RTN.FLAG = 1
      GO B330_EXIT
   END

B330_EXIT:
   RETURN

****************************************
* Validate XML Index File Tralier Contents.
****************************************
B331_VALIDATE_TRALIER_CONTENTS:

   CLEARSELECT
   L_QUERY = 'SELECT SYSTBL WITH @ID = "I275*T]" BY @ID'
   EXECUTE L_QUERY CAPTURING L_JUNK
   IF @SYSTEM.RETURN.CODE > 0 THEN
      L_CNT = 0
      LOOP
      WHILE READNEXT L_KEY
         L_CNT += 1
         READ L_REC FROM SYSTBL,L_KEY THEN
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.4.2 ":L_REC<4>:" = ":TRIM(FIELD(L_REC_IDX_T,@FM,L_CNT))
         END ELSE
            PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.4.2 ERROR -> Record ":L_KEY:" does not exist in SYSTBL."
         END
         RELEASE SYSTBL,L_KEY
      REPEAT
   END ELSE
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #3.3.4.1 ":L_QUERY:" -> ":L_JUNK
      RTN.FLAG = 1
   END

B331_EXIT:
   RETURN

****************************************
* Move AP image data files from IECINBOUND to IECOUTBOUND
****************************************
B400_MOVE_DATA_FILES:

    IF L_ERR_ACCT_NUM_LIST = "" AND L_ERR_CHK_NUM_LIST = "" AND L_ERR_TIF_FNAME_LIST = "" THEN
       *** Move semaphore FLAG XML index file from IECINBOUND to IECOUTBOUND ***
       READ L_REC FROM IECINBOUND, L_SEMAPHORE_FNAME THEN
          WRITE L_REC TO IECOUTBOUND, L_SEMAPHORE_FNAME[5,LEN(L_SEMAPHORE_FNAME)] ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.1 Failed writing record key ":L_SEMAPHORE_FNAME:" to file IECOUTBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
          DELETE IECINBOUND, L_SEMAPHORE_FNAME ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.1 Unable to delete record key ":L_SEMAPHORE_FNAME:" from file IECINBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
       END ELSE
          L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.1 Unable to read record key ":L_SEMAPHORE_FNAME:" from file IECINBOUND."
          PRINT L_ERR_POST_ACTION
          GO B400_EXIT
       END

       *** Delete XML index file from IECINBOUD *** 
       DELETE IECINBOUND, L_IDX_FILE_NAME ON ERROR
          L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.2 Unable to delete record key ":L_IDX_FILE_NAME:" from file IECINBOUND."
          PRINT L_ERR_POST_ACTION
          GO B400_EXIT
       END

       *** Delete text file of tif image filename list from IECINBOUD *** 
       DELETE IECINBOUND, L_IMG_FILE_NAME ON ERROR
          L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.3 Unable to delete record key ":L_IMG_FILE_NAME:" from file IECINBOUND."
          PRINT L_ERR_POST_ACTION
          GO B400_EXIT
       END
    END ELSE
       *** Rename semaphore FLAG file in IECINBOUND with prefix ERR- ***
       READ L_REC FROM IECINBOUND, L_SEMAPHORE_FNAME THEN
          WRITE L_REC TO IECINBOUND, "ERR-":L_SEMAPHORE_FNAME ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.1 Failed writing record key ":"ERR-":L_SEMAPHORE_FNAME:" to file IECINBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
          DELETE IECINBOUND, L_SEMAPHORE_FNAME ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.1 Unable to delete record key ":L_SEMAPHORE_FNAME:" from file IECINBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
       END ELSE
          L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.1 Unable to read record key ":L_SEMAPHORE_FNAME:" from file IECINBOUND."
          PRINT L_ERR_POST_ACTION
          GO B400_EXIT
       END

       *** Rename XML index file in IECINBOUD with prefix ERR- *** 
       READ L_REC FROM IECINBOUND, L_IDX_FILE_NAME THEN
          WRITE L_REC TO IECINBOUND, "ERR-":L_IDX_FILE_NAME ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.2 Failed writing record key ":"ERR-":L_IDX_FILE_NAME:" to file IECINBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
          DELETE IECINBOUND, L_IDX_FILE_NAME ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.2 Unable to delete record key ":L_IDX_FILE_NAME:" from file IECINBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
       END ELSE
          L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.2 Unable to read record key ":L_IDX_FILE_NAME:" from file IECINBOUND."
          PRINT L_ERR_POST_ACTION
          GO B400_EXIT
       END

       *** Rename text file of tif image filename list in IECINBOUD with prefix ERR- *** 
       READ L_REC FROM IECINBOUND, L_IMG_FILE_NAME THEN
          WRITE L_REC TO IECINBOUND, "ERR-":L_IMG_FILE_NAME ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.3 Failed writing record key ":"ERR-":L_IMG_FILE_NAME:" to file IECINBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
          DELETE IECINBOUND, L_IMG_FILE_NAME ON ERROR
             L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.3 Unable to delete record key ":L_IMG_FILE_NAME:" from file IECINBOUND."
             PRINT L_ERR_POST_ACTION
             GO B400_EXIT
          END
       END ELSE
          L_ERR_POST_ACTION = "[":OCONV(TIME(),"MTS"):"] ==> Step #4.3 Unable to read record key ":L_IMG_FILE_NAME:" from file IECINBOUND."
          PRINT L_ERR_POST_ACTION
          GO B400_EXIT
       END
    END

B400_EXIT:
   RETURN

****************************************
* Email the summary.
****************************************
B500_EMAIL_SUMMARY:

   L_SAVE_PARAM = PARAM
   PARAM = ""
   IF OTHER(17) # "" THEN ;* get batch job info
      L_SCHEDCONTROL_KEY = OTHER(17)                                                       
      READ L_SCHEDCONTROL_REC FROM SCHEDCONTROL, L_SCHEDCONTROL_KEY THEN
         PARAM<1> := "Batch job name: ":L_SCHEDCONTROL_KEY:CHAR(13)
         PARAM<1> := "Date & Time: ":OCONV(L_SCHEDCONTROL_REC<5,1>,"D4/"):" ":OCONV(L_SCHEDCONTROL_REC<6,1>,"MTS"):CHAR(13)
         PARAM<1> := "Como key: ":L_SCHEDCONTROL_REC<10,1>:CHAR(13)
         PARAM<1> := "XML Index File: ":L_IDX_FILE_NAME:CHAR(13)
         PARAM<1> := "Image Text File: ":L_IMG_FILE_NAME:CHAR(13)
         PARAM<1> := CHAR(13)
      END
   END ELSE
      PARAM<1> := "UniBasic Program Name: ":PROGRAM:CHAR(13)
      PARAM<1> := "Date & Time: ":OCONV(DATE(),"D4/"):" ":OCONV(TIME(),"MTS"):CHAR(13)
      PARAM<1> := "XML Index File: ":L_IDX_FILE_NAME:CHAR(13)
      PARAM<1> := "Image Text File: ":L_IMG_FILE_NAME:CHAR(13)
      PARAM<1> := CHAR(13)
   END
   IF L_ERR_ACCT_NUM_LIST # "" THEN
      PARAM<1> := "List of missing account number:":CHAR(13)
      PARAM<1> := L_ERR_ACCT_NUM_LIST:@VM
      PARAM<1> := CHAR(13)
      L_SUCCEED = 0
   END
   IF L_ERR_CHK_NUM_LIST # "" THEN
      PARAM<1> := "List of missing check number:":CHAR(13)
      PARAM<1> := L_ERR_CHK_NUM_LIST:@VM
      PARAM<1> := CHAR(13)
      L_SUCCEED = 0
   END
   IF L_ERR_TIF_FNAME_LIST # "" THEN
      PARAM<1> := "List of missing TIF image file name:":CHAR(13)
      PARAM<1> := L_ERR_TIF_FNAME_LIST:@VM
      PARAM<1> := CHAR(13)
      L_SUCCEED = 0
   END
   IF L_ERR_SAVE_FNAME_LIST # "" THEN
      PARAM<1> := "List of not saved TIF image file name:":CHAR(13)
      PARAM<1> := L_ERR_SAVE_FNAME_LIST:@VM
      PARAM<1> := CHAR(13)
      L_SUCCEED = 0
   END
   IF L_ERR_POST_ACTION # "" THEN
      PARAM<1> := "Post action error for EDI:":CHAR(13)
      PARAM<1> := L_ERR_POST_ACTION:@VM
      PARAM<1> := CHAR(13)
      L_SUCCEED = 0
   END
   IF L_SUCCEED THEN
      PARAM<1> := "All check image data has been validated, everything is ok."
      PARAM<2> = "Job: ":OTHER(17):" - Successfully completed in ":L_ACCOUNT:" @ ":OCONV(L_SCHEDCONTROL_REC<5,1>,"D4/"):" ":OCONV(L_SCHEDCONTROL_REC<6,1>,"MTS"):" - Desc: AP Check Image Data Transfer Validation Succeed"
   END ELSE
      PARAM<2> = "Job: ":OTHER(17):" - Unsuccessfully completed in ":L_ACCOUNT:" @ ":OCONV(L_SCHEDCONTROL_REC<5,1>,"D4/"):" ":OCONV(L_SCHEDCONTROL_REC<6,1>,"MTS"):" - Desc: AP Check Image Data Transfer Validation Error Report"
   END
   IF OTHER(17) = "" THEN  ;* Directly executed under TCL
      PARAM<2> = L_ACCOUNT:" - AP Check Image Data Transfer Validation Summary Report"
   END

   READV L_TO_EMAIL FROM SYSTBL, "I88*APMJ0055.1", 2 ELSE L_TO_EMAIL = ""
   IF L_TO_EMAIL = "" THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #5 ERROR -> Failed to retrieve the to email address for SYSTBL I88*APMJ0055.1."
      RTN.FLAG = 1
      GO B500_EXIT
   END

   PARAM<3> = L_TO_EMAIL
   CALL SB.PROCESS("SYSS9060.1")
   IF RTN.FLAG OR PARAM<6> > 0 THEN
      PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #5 ERROR -> Failed sending email via SYSS9060.1."
      RTN.FLAG = 1
      GO B500_EXIT
   END
   PARAM = L_SAVE_PARAM
   PRINT "[":OCONV(TIME(),"MTS"):"] ==> Step #5 AP Check Image Data Transfer Validation Summary Report has been emailed to ":L_TO_EMAIL:"."
   PRINT
   PRINT "[":OCONV(TIME(),"MTS"):"] =========================>>> Check record #":I:" has been processed successfully. <<<========================="
   PRINT

B500_EXIT:
   RETURN

****************************************
* Display Various XML Error Messages.
****************************************
C100_DISP_XML_ERR_MSG:

   * Using XMLGetError() we can find out the very last error code and
   * its corresponding message. This allows us to display a descriptive
   * reason for the problem.

   *** Getting Error Messages ***
   IF L_STATUS # XML.SUCCESS THEN
      L_TMP = XMLGetError(L_CODE,L_MSG)
      PRINT
      PRINT 'The error description and code for XMLGetError() API call:'
      PRINT '------------------------------------------'
      PRINT 'Error desc: ':L_MSG
      PRINT 'Error code: ':L_CODE
      PRINT '------------------------------------------'
   END

C100_EXIT:
   RETURN

****************************************
* Final processing.
****************************************
A500_CONCLUSION:

   RTN.FLAG = 0
   REFRESH = -2

A500_EXIT:
   GO 9999

****************************************
* Exit
****************************************

   $INCLUDE IIPLUS.BOTTOM

END
*
