   SUBROUTINE ARMS4000.7
* Auto-upload A/R Adjustments Excel File through DDE
* VERSION 8.2.3
*
* 05 NOV 13 8.2.3 juntan PRJ*ARM163D-AR ADJUSTMENT AND REAPPLY UPLOAD
*
*
*
*
*
*
****************************************
*
*   IPEX Inc. - INFOFLO Release 8.2
*
*    Copyright (c) 1998, Ipex Inc.
*
*         All Rights Reserved
*
****************************************
   $INCLUDE IIPLUS.TOP
   PROGRAM='ARMS4000.7'
   $INCLUDE IIPLUS.TEXTLOAD
   $INCLUDE IIPLUS.DEBUG

   $INCLUDE TUBP TU.API.H
   $INCLUDE TUBP ROC.H

**************************************************************************
*
* DESCRIPTION:
* ===========
*              This program is used to auto-upload A/R adjustments batch
*              from source excel file (ADJUSTMENT Worksheet).
*
* MODIFICATIONS:
* =============
*
*              2013/11/04 juntan ARM163D - Initial Creation.
*
**************************************************************************

A100_MAIN:

   GOSUB A200_INITIALIZATION
   IF RTN.FLAG THEN
      GO A100_EXIT
   END

   GOSUB A300_OPEN_FILES
   IF RTN.FLAG THEN
      GO A100_EXIT
   END

   GOSUB A400_MAIN_PROCESS
   IF RTN.FLAG THEN
      GO A100_EXIT
   END

A100_EXIT:
   GO A500_CONCLUSION


****************************************
* Definition of local variables & initialization of other variables.
****************************************
A200_INITIALIZATION:

   RTN.FLAG               = 0
   STATUS                 = 0
   WORK<71>               = ''  ;* Balance due answer
   HEXCEL                 = ''
   APPLICATION            = ''
   TOPIC                  = ''
   L_SYSTEM_TOPICS        = ''
   L_QUERY                = ''
   L_JUNK                 = ''
   L_DONE                 = ''
   L_OPEN_EXCEL_FLAG      = 0
   L_RF                   = ''  ;* excel row reference
   L_TOT                  = 4   ;* total number of data blocks to load from Excel
   L_WS_NAME              = "ADJUSTMENT"  ;* excel worksheet name
   L_TEST_WS_NAME         = ''
   L_MAX_ROWS             = 50  ;* due to the DATA queue size limit

   L_RAW_ACCT_LIST        = ''  ;* A/R customer account number list
   L_GOOD_ACCT_LIST       = ''
   L_ACCT_NBR             = ''
   L_RAW_REF_LIST         = ''  ;* A/R adjustment reference # list
   L_GOOD_REF_LIST        = ''
   L_REF_NBR              = ''
   L_RAW_ADJ_LIST         = ''  ;* A/R adjustment code list
   L_GOOD_ADJ_LIST        = ''
   L_ADJ_CD               = ''
   L_RAW_AMT_LIST         = ''  ;* A/R Amount list
   L_GOOD_AMT_LIST        = ''
   L_AMT                  = ''
   L_USER_ANS             = ''

   L_ERR_CD               = ''
   L_ERR_MSG              = ''
   L_KEY                  = ''
   L_REC                  = ''
   L_INC                  = 0
   L_CNT                  = 0
   L_POS                  = 0
   L_START_POS            = 0
   L_END_POS              = 0
   L_BAL_DUE_FLAG         = 0
   L_UPLOAD_SUCCEED       = 0

A200_EXIT:
   RETURN


****************************************
* Open the files needed in this subroutine.
****************************************
A300_OPEN_FILES:

   CALL SB.OPEN.FILE("CUSTMST",CUSTMST,FILE.ERR)
   IF FILE.ERR THEN
      RTN.FLAG = 1
      L_ERR_CD = "A300-ERROR-1"
      L_ERR_MSG = "Unable to open database file CUSTMST."
      GO A300_EXIT
   END

A300_EXIT:
   RETURN


****************************************
* Main process structural logic
****************************************
A400_MAIN_PROCESS:

   GOSUB B100_ESTABLISH_DDE_CONNECTION
   IF RTN.FLAG THEN
      GO A400_EXIT
   END

   GOSUB B200_READ_DATA_BLOCK_FROM_EXCEL
   IF RTN.FLAG THEN
      GO A400_EXIT
   END

   GOSUB B300_PERFORM_DATA_VALIDATION
   IF RTN.FLAG THEN
      GO A400_EXIT
   END

   GOSUB B400_LOAD_DATA_BLOCK_ONTO_SCREEN
   IF RTN.FLAG THEN
      GO A400_EXIT
   END

A400_EXIT:
   RETURN


****************************************
* Final processing.
****************************************
A500_CONCLUSION:

   *** Error Handler & Clean Up ***
   IF NOT(L_UPLOAD_SUCCEED) THEN
      IF L_ERR_CD # ""  THEN
         CALL SB.PROCESS("SYS0061,IP3000\":OCONV(TIME(),"MTS"):@VM:PROGRAM:@VM:L_ERR_CD:@VM:L_ERR_MSG)
         CALL SB.DISP(9, L_ERR_MSG)
      END

      VALUE = ""
      RECORD<5> = ""   ;* Account #
      RECORD<6> = ""   ;* Account Name
      RECORD<7> = ""   ;* Reference #
      RECORD<8> = ""   ;* Reference Type
      RECORD<9> = ""   ;* Adjustment Code
      RECORD<10> = ""  ;* Amount $
      CNT = 0
   END

A500_EXIT:
   RTN.FLAG = 0
   REFRESH = -2
   GO 9999


****************************************
* Establish DDE connection to Excel worksheet
****************************************
B100_ESTABLISH_DDE_CONNECTION:

   *** Check Currently Opened Excel Files ***
   CALL SB.DISP(9, "Verifying opened Excel file(s)":@AM:1:@AM:L_TOT)
   CALL TU.DDE.CONNECT('EXCEL', 'System', HEXCEL, RTN.FLAG)
   IF RTN.FLAG THEN
      L_ERR_CD = "B100-ERROR-1"
      L_ERR_MSG = "Unable to verify opened Excel file(s)."
      GO B100_EXIT
   END ELSE
      CALL TU.DDE.READ(HEXCEL, 'Topics', 10, L_SYSTEM_TOPICS, RTN.FLAG)
      IF RTN.FLAG THEN
         L_ERR_CD = "B100-ERROR-2"
         L_ERR_MSG = "Unable to retrieve Excel system topics."
         GO B100_EXIT
      END
      SWAP CHAR(9) WITH @AM IN L_SYSTEM_TOPICS
      FINDSTR L_WS_NAME IN L_SYSTEM_TOPICS SETTING L_POS ELSE L_POS = 0
      IF L_POS # 0 THEN
         TOPIC = L_SYSTEM_TOPICS<L_POS>
         L_START_POS = INDEX(TOPIC,"]",1) + 1
         L_END_POS = LEN(TOPIC)
         L_TEST_WS_NAME = TOPIC[L_START_POS,L_END_POS]
      END
      IF L_WS_NAME # TRIM(L_TEST_WS_NAME) THEN
         RTN.FLAG = 1
         L_ERR_CD = "B100-ERROR-3"
         L_ERR_MSG = "Unable to find source worksheet ":L_WS_NAME:"."
         GO B100_EXIT
      END
   END

   *** Establish DDE Connection between Excel and SBClient ***
   CALL SB.DISP(9, "Establishing DDE connection":@AM:2:@AM:L_TOT)
   CALL TU.DDE.CONNECT('EXCEL', TOPIC, HEXCEL, RTN.FLAG)
   IF RTN.FLAG THEN
      L_ERR_CD = "B100-ERROR-4"
      L_ERR_MSG = "Unable to establish DDE connection to source Excel worksheet."
      GO B100_EXIT
   END

   *** Verify System Language ***
   CALL SB.DISP(9, "Verifying System Language":@AM:3:@AM:L_TOT)
   CALL TU.DDE.READ(HEXCEL, 'R1C1..R1C1', 10, L_HEADER, RTN.FLAG)
   IF RTN.FLAG THEN
      CALL TU.DDE.READ(HEXCEL, 'L1C1..L1C1', 10, L_HEADER, RTN.FLAG)
      IF RTN.FLAG THEN
         CALL SB.PROCESS("SYS0061,IP2566\":"System Language")
         L_ERR_CD = "B100-ERROR-5"
         L_ERR_MSG = "Unable to detect the system language."
         GO B100_EXIT
      END
      L_RF = 'L' ;* French environment
   END ELSE
      L_RF = 'R' ;* English environment
   END

B100_EXIT:
   RETURN


****************************************
* Read data from Excel worksheet.
****************************************
B200_READ_DATA_BLOCK_FROM_EXCEL:

   *** Read A/R Adjustment Data from Excel Worksheet ***
   CALL SB.DISP(9, "Reading Account #":@AM:1:@AM:L_TOT)
   CALL TU.DDE.READ(HEXCEL, L_RF:"8C1..":L_RF:L_MAX_ROWS+1:"C1", 10, L_RAW_ACCT_LIST, RTN.FLAG)
   IF RTN.FLAG THEN
      L_ERR_CD = "B200-ERROR-4"
      L_ERR_MSG = "Unable to read Account # from Excel."
      GO B200_EXIT
   END
   L_RAW_ACCT_LIST = TRIM(L_RAW_ACCT_LIST," ","A")

   CALL SB.DISP(9, "Reading Reference #":@AM:2:@AM:L_TOT)
   CALL TU.DDE.READ(HEXCEL, L_RF:"8C2..":L_RF:L_MAX_ROWS+1:"C2", 10, L_RAW_REF_LIST, RTN.FLAG)
   IF RTN.FLAG THEN
      L_ERR_CD = "B200-ERROR-4"
      L_ERR_MSG = "Unable to read Reference # from Excel."
      GO B200_EXIT
   END
   L_RAW_REF_LIST = TRIM(L_RAW_REF_LIST," ","A")

   CALL SB.DISP(9, "Reading Adjustment Code":@AM:3:@AM:L_TOT)
   CALL TU.DDE.READ(HEXCEL, L_RF:"8C3..":L_RF:L_MAX_ROWS+1:"C3", 10, L_RAW_ADJ_LIST, RTN.FLAG)
   IF RTN.FLAG THEN
      L_ERR_CD = "B200-ERROR-5"
      L_ERR_MSG = "Unable to read Adjustment Code from Excel."
      GO B200_EXIT
   END
   L_RAW_ADJ_LIST = TRIM(L_RAW_ADJ_LIST," ","A")

   CALL SB.DISP(9, "Reading Amount $":@AM:4:@AM:L_TOT)
   CALL TU.DDE.READ(HEXCEL, L_RF:"8C4..":L_RF:L_MAX_ROWS+1:"C4", 10, L_RAW_AMT_LIST, RTN.FLAG)
   IF RTN.FLAG THEN
      L_ERR_CD = "B200-ERROR-6"
      L_ERR_MSG = "Unable to read Amount $ from Excel."
      GO B200_EXIT
   END
   L_RAW_AMT_LIST = TRIM(L_RAW_AMT_LIST,"$","A")
   L_RAW_AMT_LIST = TRIM(L_RAW_AMT_LIST,",","A")
   L_RAW_AMT_LIST = TRIM(L_RAW_AMT_LIST," ","A")

B200_EXIT:
   RETURN


****************************************
* Data validation process
****************************************
B300_PERFORM_DATA_VALIDATION:

   *** First Pass for Verifing A/R Adjustment Data ***
   L_TOTAL_LINES = DCOUNT(L_RAW_ACCT_LIST,@VM)
   FOR L_INC = 1 TO L_TOTAL_LINES
      ** Retrieve Per A/R Adjustment Record **
      L_ACCT_NBR = TRIM(L_RAW_ACCT_LIST<1,L_INC>)
      L_REF_NBR = TRIM(L_RAW_REF_LIST<1,L_INC>)
      L_ADJ_CD = TRIM(L_RAW_ADJ_LIST<1,L_INC>)
      L_AMT = TRIM(L_RAW_AMT_LIST<1,L_INC>)

      ** Treat as EOF if the 4 required info are all blank **
      IF L_ACCT_NBR = "" AND L_REF_NBR = "" AND L_ADJ_CD = "" AND L_AMT = "" THEN
         L_TOTAL_LINES = L_INC - 1
         EXIT ;* EOF
      END

      ** Display Progress Bar **
      CALL SB.DISP(9, "Validating A/R adjustment data: ":L_ACCT_NBR:" -> ":L_REF_NBR:" -> ":L_ADJ_CD:" -> ":L_AMT)

      ** Validate Account # **
      VALUE = L_ACCT_NBR
      RECORD<5,CNT> = L_ACCT_NBR
      CALL SB.PROCESS("ARMP4000.6")
      IF RTN.FLAG THEN
         GO B300_EXIT
      END

      ** Validate Reference # **
      VALUE = L_REF_NBR
      RECORD<7,CNT> = L_REF_NBR
      CALL SB.PROCESS("ARMS4000.3")
      IF RTN.FLAG THEN
         GO B300_EXIT
      END

      ** Validate Adjustment Code **
      VALUE = L_ADJ_CD
      CALL SB.PROCESS("ARMP4000.9")
      IF RTN.FLAG THEN
         GO B300_EXIT
      END

      ** Validate Amount **
      VALUE = L_AMT
      CALL SB.PROCESS("ARMS4000.PS1")
      IF RTN.FLAG THEN
         GO B300_EXIT
      END

      ** Prepare Good Data List for Uploading **
      L_CNT += 1
      L_USER_ANS<1,L_CNT> = WORK<71>
      L_GOOD_ACCT_LIST<1,L_CNT> = L_ACCT_NBR
      L_GOOD_REF_LIST<1,L_CNT> = L_REF_NBR
      L_GOOD_ADJ_LIST<1,L_CNT> = L_ADJ_CD
      L_GOOD_AMT_LIST<1,L_CNT> = L_AMT
   NEXT L_INC

   *** Ready to Upload ***
   CALL SB.DISP(9, "A/R Adjustment Data Validation Completed.")
   CALL SB.DISP(4,'ARMD4002.15')   ;* Dialog Box
   IF RTN.FLAG THEN                ;* Start upload
      RTN.FLAG = 0
      RECORD<5> = ""
      RECORD<7> = ""
   END ELSE                        ;* User cancelled the upload
      RTN.FLAG = 1
      CALL SB.DISP(9, "Upload process is cancelled.")
   END

B300_EXIT:
   RETURN


****************************************
* Auto-upload data block to entry screen
****************************************
B400_LOAD_DATA_BLOCK_ONTO_SCREEN:

   CLEARDATA
   L_TOTAL_LINES = DCOUNT(L_GOOD_ACCT_LIST,@VM)
   FOR L_INC = 1 TO L_TOTAL_LINES
      *** Retrieve Per A/R Adjustment Record ***
      L_ACCT_NBR = L_GOOD_ACCT_LIST<1,L_INC>
      L_REF_NBR = L_GOOD_REF_LIST<1,L_INC>
      L_ADJ_CD = L_GOOD_ADJ_LIST<1,L_INC>
      L_AMT = -L_GOOD_AMT_LIST<1,L_INC>  ;* opposite +/- sign for amount

      *** Quit When an Empty Row is Reached ***
      IF L_ACCT_NBR = "" AND L_REF_NBR = "" AND L_ADJ_CD = "" AND L_AMT = "" THEN
         EXIT
      END

      ** Display Progress Bar **
      CALL SB.DISP(9, "Validating A/R adjustment data: ":L_ACCT_NBR:" -> ":L_REF_NBR:" -> ":L_ADJ_CD:" -> ":L_AMT)

      *** Staff entry value on screen  ***
      IF L_USER_ANS<1,L_INC> = "" THEN
         DATA L_ACCT_NBR,L_REF_NBR,L_ADJ_CD,L_AMT
      END ELSE
         IF L_USER_ANS<1,L_INC> = "Y" THEN
            DATA L_ACCT_NBR,L_REF_NBR,L_ADJ_CD,L_AMT,"Y"
         END ELSE
            DATA L_ACCT_NBR,L_REF_NBR,L_ADJ_CD,L_AMT,"N"
         END
      END
   NEXT L_INC
   DATA "\"  ;* remove account # that auto-populated on a new line

   CALL SB.DISP(9, "Auto-uploading A/R adjustment data is completed successfully.":@AM:L_INC-1:@AM:L_TOTAL_LINES)
   L_UPLOAD_SUCCEED = 1

B400_EXIT:
   RETURN


****************************************
* Exit
****************************************

   $INCLUDE IIPLUS.BOTTOM

END
*
*
