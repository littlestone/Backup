   SUBROUTINE PIMS9000.3
* API program to generate product STEPXML document for PIM (Full Ad-hoc STEPXML Version)
* VERSION 8.2.3
*
* 15 NOV 16 8.2.3 juntan PRJ*SPC076D.14-PIM TO INFOFLO OUTBOUND INTEGRATION
*
*
*
*
*
*
****************************************
*
*   IPEX Inc. - INFOFLO Release 8.2
*
*    Copyright (c) 1998, Ipex Inc.
*
*         All Rights Reserved
*
****************************************

   PROGRAM = 'PIMS9000.3'

   $INCLUDE IIPLUS.TOP
   $INCLUDE IIPLUS.TEXTLOAD
   $INCLUDE IIPLUS.DEBUG

   $INCLUDE TUBP TU.API.H
   $INCLUDE TUBP ROC.H
   $INCLUDE TUBP TU.ERRORCODES.H
   $INCLUDE /usr/igi/ud/sys/INCLUDE XML.H
   $INCLUDE SYSS9170.1 ;* ASCII to LATIN-1

   *** Unibasic User-defined Function Interface Declaration ***
   DEFFUN Add_XMLElement(a,b,c,d,e,f) CALLING "XML_API"

**************************************************************************
*
* DESCRIPTION:
* ============
*              This program is used to generate STEPXML of IPEX master product
*              data for PIM inbound integration (full Ad-hoc STEPXML version).
*
*              Full Ad-hoc product data integration is required for 2 cases:
*                 1. Item type change         -> Input parameter PARAM<1> -> CPN (function call)
*                 2. Archived product revival -> Input parameter 1 or a list of CPN seperated by comma (TCL run)
*
*              This full ad-hoc product integration will be very similar to the
*              existing inbound integration procedure that was developed in the
*              first phase of the project (PIMS9000.1).
*
*              Differences to take into account :
*                - Should always treat the product as new
*                  a. No need for replacement rules in xml header
*	           b. No need for delta mechanism
*                - Some legacy fields will not be included
*              	   a. Catalog number and OEM number
*              	   b. Product description attributes, incl. brand
*              	   c. Duplicate reason code
*              	   d. UNSPSC and IGCC categories
*              	   e. Country of origin
*                - Product Line and Brand classifications are not required.
*                  Product line because another integration will take care of sending the whole hierarchy to PIM,
*                  brand because brands wonâ€™t be integrated (see above).
*                - Tariff Code, Dangerous Goods Code, Country entities can be removed.
*                  To be verified :  assumption is integration will complete with errors if product refers to an
*                  unknown tariff code and/or dg code but product will be created just with empty tariff code / dg code.
*                - Package Identifier value can be removed from LOV section.  If PI is not defined in PIM then it should be rejected.
*
*              <<<NOTE>>>
*
*              Product Hierarchy:
*                 - Market Segment (I18)      -> SYS3005
*                 - Product Type (I42)        -> SYS3005
*                 - Super Group (I30)         -> SYS3005
*                 - Product Group (I29)       -> SYS3005
*                 - Product Line (I03)        -> SYS3005
*
*              Product Attribute:
*                 - Attribute Grouping (I218) -> SYS3005
*                 - Tariff Code (I34)         -> SYS3005
*
*              Packaging:
*                 - Package Types (I07)       -> SYS3060
*                 - EDI Package Codes (I135)  -> SYS3005
*
* MODIFICATIONS:
* ==============
*              2015/11/20 juntan SPC076D - Initial creation.
*
**************************************************************************


A100_MAIN:

   GOSUB A200_INITIALIZATION
   IF L_RTN_CD # "" THEN
      GO A100_EXIT
   END

   GOSUB A300_OPEN_FILES
   IF L_RTN_CD # "" THEN
      GO A100_EXIT
   END

   GOSUB A400_MAIN_PROCESS
   IF L_RTN_CD # "" THEN
      GO A100_EXIT
   END

A100_EXIT:
   GO A500_CONCLUSION


****************************************
* Define & initialize variables.
****************************************

A200_INITIALIZATION:

   *** System Variable Definition Section ***

   RTN.FLAG                    = 0
   L_CNT                       = 0
   L_INC                       = 0
   L_INC2                      = 0
   L_TTL                       = 0
   L_CNT_TTL                   = 0
   L_INC_TTL                   = 0
   L_INC2_TTL                  = 0
   L_LEN                       = 0
   L_AM_POS                    = 0
   L_VM_POS                    = 0
   L_SM_POS                    = 0
   L_RETURN_CODE               = 0

   L_EOF                       = @FALSE
   L_BATCH_MODE                = @FALSE
   L_EMAIL_REPORT              = @FALSE

   L_REPORT_MESSAGE            = ""
   L_REPORT_FILE               = ""
   L_SAVE_PARAM                = ""
   L_FILE_NAME                 = ""
   L_FILE_DIR                  = ""
   L_TO_EMAIL                  = ""
   L_DATE_OCONV                = ""
   L_TIME_OCONV                = ""
   L_INPR_LOCK                 = ""
   L_RTN_CD                    = ""
   L_RTN_MSG                   = ""
   L_CMD                       = ""
   L_QUERY                     = ""
   L_JUNK                      = ""
   L_KEY                       = ""
   L_REC                       = ""
   L_TS                        = ""

   doc.XML                     = ""
   xmlStatus                   = ""
   domHandle                   = ""
   attrNode                    = ""
   node.root                   = ""
   node.new                    = ""
   node.this                   = ""
   node.listsofvalues          = ""
   node.entities               = ""
   node.entity                 = ""
   node.entity.values          = ""
   node.classifications        = ""
   node.classification         = ""
   node.products               = ""
   node.product                = ""
   node.product.values         = ""

   *** Business Logic Variable Definition Section ***

   L_ITMXRF_CPN                = ""
   L_ITMXRF_UPN                = ""
   L_ITMPLTMST_CPN             = ""
   L_ITMPLTMST_PLANT_CODE      = ""
   L_ITMPLTMST_PLANT_CODE_LIST = ""
   L_ITMCOST_CPN               = ""
   L_ITMCOST_FLAG              = ""
   L_DELTA_CASE_MSG            = ""
   L_DELTA_CASE_LIST           = ""  ;* High Level Product Delta Change
   L_ERROR_CASE1_LIST          = ""  ;* #1: Missing Product Price
   L_ERROR_CASE2_LIST          = ""  ;* #2: Missing Product Brand
   L_ERROR_CASE3_LIST          = ""  ;* #3: Missing Product Plant
   L_ERROR_CASE4_LIST          = ""  ;* #4: Missing Product Supplier Plant
   L_ERROR_CASE5_LIST          = ""  ;* #5: Missing Product Supplier
   L_ERROR_CASE6_LIST          = ""  ;* #6: Invalid Package PI Setup
   L_ERROR_CASE7_LIST          = ""  ;* #7: Missing PIM Package Type Code
   L_ERROR_CASE8_LIST          = ""  ;* #8: Missing EDI Package Code
   L_ERROR_CASE9_LIST          = ""  ;* #9: Missing PIM Package Name

   L_PRD_KEY_LIST              = ""
   L_PRD_KEY_TTL               = 0
   L_PRD_KEY_CNT               = 0

   GOSUB B1000_INITIALIZE_PIM_OBJECT_VARIABLE

A200_EXIT:
   RETURN


****************************************
* Open any data file(s) requried.
****************************************

A300_OPEN_FILES:

   OPEN "SYSTBL" TO SYSTBL
   ON ERROR
      L_RTN_CD  = "A300-ERROR-1-1"
      L_RTN_MSG = "Fatal error occurs while opening file SYSTBL {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-1-2"
      L_RTN_MSG = "Unable to open file SYSTBL."
      GO A300_EXIT
   END

   OPEN "SYSCON" TO SYSCON
   ON ERROR
      L_RTN_CD  = "A300-ERROR-2-1"
      L_RTN_MSG = "Fatal error occurs while opening file SYSCON {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-2-2"
      L_RTN_MSG = "Unable to open file SYSCON."
      GO A300_EXIT
   END

   OPEN "ITMMST" TO ITMMST
   ON ERROR
      L_RTN_CD  = "A300-ERROR-3-1"
      L_RTN_MSG = "Fatal error occurs while opening file ITMMST {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-3-2"
      L_RTN_MSG = "Unable to open file ITMMST."
      GO A300_EXIT
   END

   OPEN "ITMXRF" TO ITMXRF
   ON ERROR
      L_RTN_CD  = "A300-ERROR-4-1"
      L_RTN_MSG = "Fatal error occurs while opening file ITMXRF {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-4-2"
      L_RTN_MSG = "Unable to open file ITMXRF."
      GO A300_EXIT
   END

   OPEN "ITMWRK" TO ITMWRK
   ON ERROR
      L_RTN_CD  = "A300-ERROR-5-1"
      L_RTN_MSG = "Fatal error occurs while opening file ITMWRK {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-5-2"
      L_RTN_MSG = "Unable to open file ITMWRK."
      GO A300_EXIT
   END

   OPEN "ITMCOST" TO ITMCOST
   ON ERROR
      L_RTN_CD  = "A300-ERROR-6-1"
      L_RTN_MSG = "Fatal error occurs while opening file ITMCOST {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-6-2"
      L_RTN_MSG = "Unable to open file ITMCOST."
      GO A300_EXIT
   END

   OPEN "UPCXRF" TO UPCXRF
   ON ERROR
      L_RTN_CD  = "A300-ERROR-7-1"
      L_RTN_MSG = "Fatal error occurs while opening file UPCXRF {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-7-2"
      L_RTN_MSG = "Unable to open file UPCXRF."
      GO A300_EXIT
   END

   OPEN "STDCOMM" TO STDCOMM
   ON ERROR
      L_RTN_CD  = "A300-ERROR-8-1"
      L_RTN_MSG = "Fatal error occurs while opening file STDCOMM {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-8-2"
      L_RTN_MSG = "Unable to open file STDCOMM."
      GO A300_EXIT
   END

   OPEN "ITMATTRDET" TO ITMATTRDET
   ON ERROR
      L_RTN_CD  = "A300-ERROR-9-1"
      L_RTN_MSG = "Fatal error occurs while opening file ITMATTRDET {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-9-2"
      L_RTN_MSG = "Unable to open file ITMATTRDET."
      GO A300_EXIT
   END

   OPEN "ITMPLTMST" TO ITMPLTMST
   ON ERROR
      L_RTN_CD  = "A300-ERROR-10-1"
      L_RTN_MSG = "Fatal error occurs while opening file ITMPLTMST {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-10-2"
      L_RTN_MSG = "Unable to open file ITMPLTMST."
      GO A300_EXIT
   END

   OPEN "WHSMST" TO WHSMST
   ON ERROR
      L_RTN_CD  = "A300-ERROR-11-1"
      L_RTN_MSG = "Fatal error occurs while opening file WHSMST {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-11-2"
      L_RTN_MSG = "Unable to open file WHSMST."
      GO A300_EXIT
   END

   OPEN "ROUTMST" TO ROUTMST
   ON ERROR
      L_RTN_CD  = "A300-ERROR-12-1"
      L_RTN_MSG = "Fatal error occurs while opening file ROUTMST {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-12-2"
      L_RTN_MSG = "Unable to open file ROUTMST."
      GO A300_EXIT
   END

   OPEN "SUPPMST" TO SUPPMST
   ON ERROR
      L_RTN_CD  = "A300-ERROR-13-1"
      L_RTN_MSG = "Fatal error occurs while opening file SUPPMST {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-13-2"
      L_RTN_MSG = "Unable to open file SUPPMST."
      GO A300_EXIT
   END

   OPEN "PRICEHDR" TO PRICEHDR
   ON ERROR
      L_RTN_CD  = "A300-ERROR-14-1"
      L_RTN_MSG = "Fatal error occurs while opening file PRICEHDR {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-14-2"
      L_RTN_MSG = "Unable to open file PRICEHDR."
      GO A300_EXIT
   END

   OPEN "PRICEDET" TO PRICEDET
   ON ERROR
      L_RTN_CD  = "A300-ERROR-15-1"
      L_RTN_MSG = "Fatal error occurs while opening file PRICEDET {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-15-2"
      L_RTN_MSG = "Unable to open file PRICEDET."
      GO A300_EXIT
   END

   OPEN "PRICEHST" TO PRICEHST
   ON ERROR
      L_RTN_CD  = "A300-ERROR-16-1"
      L_RTN_MSG = "Fatal error occurs while opening file PRICEHST {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-16-2"
      L_RTN_MSG = "Unable to open file PRICEDET."
      GO A300_EXIT
   END

   OPEN "PIMFLO" TO PIMFLO
   ON ERROR
      L_RTN_CD  = "A300-ERROR-17-1"
      L_RTN_MSG = "Fatal error occurs while opening file PIMFLO {":STATUS():"}."
      GO A300_EXIT
   END ELSE
      L_RTN_CD  = "A300-ERROR-17-2"
      L_RTN_MSG = "Unable to open file PIMFLO."
      GO A300_EXIT
   END

A300_EXIT:
   RETURN


**************************************************************
* Main Process Procedure to Build/Upload PIM STEPXML file(s) *
**************************************************************

A400_MAIN_PROCESS:

   GOSUB A410_PRECHECK
   IF L_RTN_CD # "" THEN
      GO A400_EXIT
   END

   GOSUB A420_GET_PIM_PRODUCT_KEY_LIST
   IF L_RTN_CD # "" THEN
      GO A400_EXIT
   END

   GOSUB A430_PREPARE_DATA_FOR_DELTA
   IF L_RTN_CD # "" THEN
      GO A400_EXIT
   END

   GOSUB A440_GET_PIM_PRODUCT_INFO_AND_BUILD_STEPXML
   IF L_RTN_CD # "" THEN
      GO A400_EXIT
   END

   GOSUB A450_FTP_UPLOAD_PIM_STEPXML_FILE_TO_SERVER
   IF L_RTN_CD # "" THEN
      GO A400_EXIT
   END

   GOSUB A460_EMAIL_SUMMARY_REPORT
   IF L_RTN_CD # "" THEN
      GO A400_EXIT
   END

A400_EXIT:
   RETURN


*****************************************************************
* Internal Subroutine to Do Precheck Before Triggerring Process *
*****************************************************************

A410_PRECHECK:

   *** Check for Job In-Process Lock & Initial/Post Data Integration Mode ***
   L_INPR_LOCK = "INPR_LOCK"
   READU L_REC FROM PIMFLO, L_INPR_LOCK
   ON ERROR
      L_RTN_CD  = "A410-ERROR-1-1"
      L_RTN_MSG = "Unable to lock record ":L_INPR_LOCK:" in file PIMFLO { ":STATUS():" }."
      GO A410_EXIT
   END LOCKED
      L_RTN_CD  = "A410-ERROR-1-2"
      L_RTN_MSG = "!!! The PIM inbound integration process is already launched by { ":GETUSERNAME(STATUS()):" }, cannot initiate another instance until the mutex record ":L_INPR_LOCK:" will be released in file PIMFLO { Full Ad-hoc Run }. !!!"
      GO A410_EXIT
   END ELSE
      L_RTN_CD  = "A410-ERROR-1-3"
      L_RTN_MSG = "!!! The PIM inbound integration process had been aborted, missing mutex lock record ":L_INPR_LOCK:" in file PIMFLO { Full Ad-hoc Mode }. !!!"
      GO A410_EXIT
   END

A410_EXIT:
   RETURN


******************************************************
* Internal Subroutine to Update PIM Product Key List *
******************************************************

A420_GET_PIM_PRODUCT_KEY_LIST:

   *** Collecting Infoflo Product in Scope & Save Key in List ***
   IF OTHER(17) = "" THEN  ;* manual mode (TCL)
      L_BATCH_MODE = @FALSE
      CRT CHAR(10):"[[[ Manual Mode - Full Ad-hoc STEPXML ]]]"
      L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
      CRT CHAR(10):"[":L_TS:"]"
      READSELECT L_PRD_KEY_LIST ELSE L_PRD_KEY_LIST = ""
      L_PRD_KEY_LIST = TRIM(L_PRD_KEY_LIST,' ',"A")
      CRT "==> { Total ITMMST key selected: ":DCOUNT(L_PRD_KEY_LIST, @AM):" }"
      IF L_PRD_KEY_LIST = "" THEN
         INPUT L_PRD_KEY_LIST
         IF L_PRD_KEY_LIST = "" OR UPCASE(L_PRD_KEY_LIST) = "Q" THEN
            L_RTN_CD = "Q"
            GO A420_EXIT
         END
         SWAP "," WITH @AM IN L_PRD_KEY_LIST
      END
   END ELSE  ;* function call with only one CPN passed in PARAM<1>
      L_PRD_KEY = PARAM<1>
      READ L_REC FROM ITMMST, L_PRD_KEY
      ON ERROR
         L_RTN_CD  = "A420-ERROR-1-1"
         L_RTN_MSG = "Unable to read record ":L_PRD_KEY:" in file ITMMST { ":STATUS():" }."
         GO A440_EXIT
      END THEN
         L_PRD_KEY_LIST = L_PRD_KEY
      END ELSE
         L_RTN_CD  = "A420-ERROR-1-2"
         L_RTN_MSG = "Record ":L_PRD_KEY:" does not exist in file ITMMST."
         GO A440_EXIT
      END
   END

A420_EXIT:
   RETURN


*****************************************************************************
* Internal Subroutine to Prepare Data for DELTA to Boost Process Performace *
*****************************************************************************

A430_PREPARE_DATA_FOR_DELTA:

   IF PARAM<1> # "" THEN
      GO A430_EXIT  ;* skip it if product is given
   END

   CRT CHAR(10):"[[[ Prepare DELTA Data ]]]"

   *** Get PIM Product Universal Part Number & Save in PIMFLO<5> ***
   L_EOF = @FALSE
   CLEARSELECT
   L_QUERY = 'SSELECT ITMXRF WITH @ID = "IIS*]"'
   L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
   CRT CHAR(10):"[":L_TS:"]"
   CRT "==> { ":L_QUERY:" }"
   EXECUTE L_QUERY CAPTURING L_JUNK
   CRT "==> { Total ITMXRF key selected: ":@SYSTEM.RETURN.CODE:" }"
   IF @SYSTEM.RETURN.CODE > 0 THEN
      LOOP
         READNEXT L_KEY ELSE L_EOF = @TRUE
      UNTIL L_EOF
         READ L_REC FROM ITMXRF, L_KEY
         ON ERROR
            L_RTN_CD  = "A430-ERROR-1-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMXRF { ":STATUS():" }."
            GO A430_EXIT
         END THEN
            L_ITMXRF_CPN = L_REC<1>
            L_ITMXRF_UPN = L_KEY"G1*1"
            WRITEV L_ITMXRF_UPN TO PIMFLO, L_ITMXRF_CPN, 5 ;* update Universal Part Numebr for per product control record in PIMFLO<5>
            ON ERROR
               L_RTN_CD  = "A430-ERROR-1-2"
               L_RTN_MSG = "Unable to write record ":L_ITMXRF_CPN:" in file PIMFLO { ":STATUS():" }."
               GO A430_EXIT
            END
         END
      REPEAT
      CRT "==> Universal part numbers have been saved in PIMFLO<5> { ":@SYSTEM.RETURN.CODE:" }."
   END ELSE
      IF @SYSTEM.RETURN.CODE < 0 THEN
         L_RTN_CD  = "A430-ERROR-1-3"
         L_RTN_MSG = "Unable to execute query -> ":L_QUERY:" { ":STATUS():" }."
         GO A430_EXIT
      END
   END

   *** Get PIM Product Plant(s) & Save in PIMFLO<6> ***
   L_EOF = @FALSE
   CLEARSELECT
   L_QUERY = 'SSELECT ITMPLTMST WITH MFG.PURCH = "M""P"'  ;* Sort BOM Warehouse (M or P) -> lowest numerical warehouse number is the primary source
   L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
   CRT CHAR(10):"[":L_TS:"]"
   CRT "==> { ":L_QUERY:" }"
   EXECUTE L_QUERY CAPTURING L_JUNK
   CRT "==> { Total ITMPLTMST key selected: ":@SYSTEM.RETURN.CODE:" }"
   IF @SYSTEM.RETURN.CODE > 0 THEN
      LOOP
         READNEXT L_KEY ELSE L_EOF = @TRUE
      UNTIL L_EOF
         READ L_REC FROM ITMPLTMST, L_KEY
         ON ERROR
            L_RTN_CD  = "A430-ERROR-2-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMPLTMST { ":STATUS():" }."
            GO A430_EXIT
         END THEN
            L_ITMPLTMST_PLANT_CODE = L_KEY"G0*1"
            L_ITMPLTMST_CPN        = L_KEY"G1*1"
            READV L_ITMPLTMST_PLANT_CODE_LIST FROM PIMFLO, L_ITMPLTMST_CPN, 6
            ON ERROR
               L_RTN_CD  = "A430-ERROR-2-2"
               L_RTN_MSG = "Unable to write record ":L_ITMPLTMST_CPN:" in file PIMFLO { ":STATUS():" }."
               GO A430_EXIT
            END THEN
               FIND L_ITMPLTMST_PLANT_CODE IN L_ITMPLTMST_PLANT_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                  CONTINUE ;* skip duplicate plant code
               END ELSE
                  L_ITMPLTMST_PLANT_CODE_LIST<1,-1> = L_ITMPLTMST_PLANT_CODE
               END
            END ELSE
               L_ITMPLTMST_PLANT_CODE_LIST = L_ITMPLTMST_PLANT_CODE
            END
            L_RETURN_CODE = SORT(L_ITMPLTMST_PLANT_CODE_LIST)  ;* re-sort plant code list in case the primary plant has been changed
            IF L_RETURN_CODE # 0 THEN
               CRT ">>> Failed to sort plant code list for PIMFLO { ":L_RETURN_CODE:" }. <<<"
            END
            WRITEV L_ITMPLTMST_PLANT_CODE_LIST TO PIMFLO, L_ITMPLTMST_CPN, 6 ;* update product plant code(s) for per product control record in PIMFLO<6>
            ON ERROR
               L_RTN_CD  = "A430-ERROR-2-3"
               L_RTN_MSG = "Unable to write record ":L_ITMPLTMST_CPN:" in file PIMFLO { ":STATUS():" }."
               GO A430_EXIT
            END
         END ELSE
            L_RTN_CD  = "A430-ERROR-2-4"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file ITMPLTMST."
            GO A430_EXIT
         END
      REPEAT
      CRT "==> Product plant codes have been saved in PIMFLO<6> { ":@SYSTEM.RETURN.CODE:" }."
   END ELSE
      IF @SYSTEM.RETURN.CODE < 0 THEN
         L_RTN_CD  = "A430-ERROR-2-5"
         L_RTN_MSG = "Unable to execute query -> ":L_QUERY:" { ":STATUS():" }."
         GO A430_EXIT
      END
   END

   *** Get PIM Product with Costing & Save in PIMFLO<7> ***
   L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
   CRT CHAR(10):"[":L_TS:"]"
   CRT "==> { Populating product has costing setup flag... }"
   L_TTL = DCOUNT(L_PRD_KEY_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_KEY         = L_PRD_KEY_LIST<L_CNT>:"*1"  ;* costing type 1
      L_ITMCOST_CPN = L_KEY"G0*1"
      READ L_REC FROM ITMCOST, L_KEY
      ON ERROR
         L_RTN_CD  = "A430-ERROR-3-1"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMCOST { ":STATUS():" }."
         GO A430_EXIT
      END THEN
         L_ITMCOST_FLAG = "Y"
      END ELSE
         L_KEY         = L_PRD_KEY_LIST<L_CNT>:"*2"  ;* costing type 2
         L_ITMCOST_CPN = L_KEY"G0*1"
         READ L_REC FROM ITMCOST, L_KEY
         ON ERROR
            L_RTN_CD  = "A430-ERROR-3-2"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMCOST { ":STATUS():" }."
            GO A430_EXIT
         END THEN
            L_ITMCOST_FLAG = "Y"
         END ELSE
            L_KEY         = L_PRD_KEY_LIST<L_CNT>:"*US"  ;* costing type US
            L_ITMCOST_CPN = L_KEY"G0*1"
            READ L_REC FROM ITMCOST, L_KEY
            ON ERROR
               L_RTN_CD  = "A430-ERROR-3-3"
               L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMCOST { ":STATUS():" }."
               GO A430_EXIT
            END THEN
               L_ITMCOST_FLAG = "Y"
            END ELSE
               L_ITEMCOST_TYPE = "N"
            END
         END
      END
      WRITEV L_ITMCOST_FLAG TO PIMFLO, L_ITMCOST_CPN, 7 ;* update Product Costing Flag for per product control record in PIMFLO<7>
      ON ERROR
         L_RTN_CD  = "A430-ERROR-3-4"
         L_RTN_MSG = "Unable to write record ":L_ITMCOST_CPN:" in file PIMFLO { ":STATUS():" }."
         GO A430_EXIT
      END
   NEXT L_CNT
   CRT "==> Product with costing flag has been saved in PIMFLO<7>."

A430_EXIT:
   RETURN


*************************************************************************
* Internal Subroutine to Get PIM Product Info and Generate STEPXML File *
*************************************************************************

A440_GET_PIM_PRODUCT_INFO_AND_BUILD_STEPXML:

   L_PRD_KEY_TTL = DCOUNT(L_PRD_KEY_LIST, @AM)
   FOR L_PRD_KEY_CNT = 1 TO L_PRD_KEY_TTL
      *** Initialization ***
      GOSUB B1000_INITIALIZE_PIM_OBJECT_VARIABLE

      *** Retrieve PIM Info & Generate STEPXML ***
      L_PRD_KEY = L_PRD_KEY_LIST<L_PRD_KEY_CNT>
      READ L_PRD_REC FROM ITMMST, L_PRD_KEY
      ON ERROR
         L_RTN_CD  = "A440-ERROR-1-1"
         L_RTN_MSG = "Unable to read record ":L_PRD_KEY:" in file ITMMST { ":STATUS():" }."
         GO A440_EXIT
      END THEN
         L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
         CRT CHAR(10):"[":L_TS:"] ":L_PRD_KEY_CNT:": ":L_PRD_KEY:" -> ":L_PRD_REC<1>

         *** Prepare PIM Product Data ***
         GOSUB B1010_GET_PIM_PRODUCT_KEY_INFO
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END

         GOSUB B1020_GET_PIM_PRODUCT_COMMON_ATTRIBUTE_INFO
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END

         GOSUB B1030_GET_PIM_PRODUCT_SPECIFIC_ATTRIBUTE_INFO
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END

         GOSUB B1040_GET_PIM_PRODUCT_SOURCE_REFERENCE_INFO
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END

         GOSUB B1050_GET_PIM_PRODUCT_PACKAGING_INFO
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END

         GOSUB B1060_GET_PIM_PRODUCT_ENTITIES_INFO
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END

         *** Update PIM Product Delta Info in PIMFLO File ***
         READ L_REC FROM PIMFLO, L_PRD_KEY
         ON ERROR
            L_RTN_CD  = "A440-ERROR-2-1"
            L_RTN_MSG = "Unable to read record ":L_PRD_KEY:" in file PIMFLO { ":STATUS():" }."
            GO A440_EXIT
         END THEN  ;* existing product (case with UPN/Plants/HasCosting)
            L_TS = OCONV(DATE(),"D4/"):" ":OCONV(TIME(),"MTS")
            L_PREVIOUS_DELTA_REC = L_REC<1>
            L_DELTA_REC<1> = L_CURRENT_DELTA_REC   ;* <1> -> current product state
            L_DELTA_REC<2> = L_PREVIOUS_DELTA_REC  ;* <2> -> previous product state
            L_DELTA_REC<3> = L_TS                  ;* <3> -> current product state timestamp
            L_DELTA_REC<4> = L_REC<3>              ;* <4> -> previous product state timestamp
            L_DELTA_REC<5> = L_REC<5>              ;* <5> -> universal part number
            L_DELTA_REC<6> = L_REC<6>              ;* <6> -> product plant code(s)
            L_DELTA_REC<7> = L_REC<7>              ;* <7> -> has costing setup flag
            WRITE L_DELTA_REC TO PIMFLO, L_PRD_KEY
            ON ERROR
               L_RTN_CD  = "A440-ERROR-3"
               L_RTN_MSG = "Unable to write product delta record for product key ":L_PRD_KEY:" in file PIMFLO { ":STATUS():" }."
               GO A440_EXIT
            END
         END ELSE  ;* new product (case without UPN/Plants/HasCosting)
            L_TS = OCONV(DATE(),"D4/"):" ":OCONV(TIME(),"MTS")
            L_DELTA_REC    = ""                    ;* initialize just to be sure we won't save any garbage left in memory
            L_DELTA_REC<1> = L_CURRENT_DELTA_REC   ;* <1> -> current product state
            L_DELTA_REC<2> = ""                    ;* <2> -> previous product state
            L_DELTA_REC<3> = L_TS                  ;* <3> -> current product state timestamp
            L_DELTA_REC<4> = ""                    ;* <4> -> previous product state timestamp
            L_DELTA_REC<5> = ""                    ;* <5> -> universal part number
            L_DELTA_REC<6> = ""                    ;* <6> -> product plant code(s)
            L_DELTA_REC<7> = ""                    ;* <7> -> has costing setup flag
            WRITE L_DELTA_REC TO PIMFLO, L_PRD_KEY
            ON ERROR
               L_RTN_CD  = "A440-ERROR-2-2"
               L_RTN_MSG = "Unable to write new product delta record for product key ":L_PRD_KEY:" in file PIMFLO { ":STATUS():" }."
               GO A440_EXIT
            END
         END

         *** Summary Report ***
         L_EMAIL_REPORT = @TRUE
         IF PARAM<1> # "" THEN
            L_DELTA_CASE_MSG = "==> Infoflo item type changed { ":L_PIM_PRD_CMN_ATTR_INFOFLO_ITEM_TYPE:" }."
         END ELSE
            L_DELTA_CASE_MSG = "==> Archived product revival."
         END
         L_DELTA_CASE_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_DELTA_CASE_MSG
         CRT L_DELTA_CASE_MSG

         *** Buil PIM Product Data STEPXML DOM Tree ***
         GOSUB B2000_BUILD_PIM_STEPXML_DOM
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END

         *** Write PIM Product Data to STEPXML File(s) ***
         GOSUB B3000_WRITE_PIM_STEPXML_DOM_TO_FILE
         IF L_RTN_CD # "" THEN
            GO A440_EXIT
         END
      END ELSE
         L_RTN_CD  = "A440-ERROR-1-2"
         L_RTN_MSG = "Record ":L_PRD_KEY:" does not exist in file ITMMST."
         GO A440_EXIT
      END
   NEXT L_PRD_KEY_CNT

A440_EXIT:
   RETURN


**************************************************************************************
* Internal Subroutine to Upload PIM STEPXML File(s) to Stibo Server IIEP Through FTP *
**************************************************************************************

A450_FTP_UPLOAD_PIM_STEPXML_FILE_TO_SERVER:

   IF L_BATCH_MODE THEN
      CRT CHAR(10):"[[[ FTP Upload ]]]"
      L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
      CRT CHAR(10):"[":L_TS:"]"
      L_SAVE_PARAM = PARAM; PARAM = ""; PARAM<1> = "IPX.PIM"
      CALL SYSS9096.1
      PARAM = L_SAVE_PARAM
      IF @SYSTEM.RETURN.CODE < 0 THEN
         L_RTN_CD  = "A450-ERROR-1"
         L_RTN_MSG = ">>> Failed to upload PIM STEPXML files to Stibo Server IIEP through FTP { ":@SYSTEM.RETURN.CODE:" }. <<<"
      END ELSE
         L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
         CRT CHAR(10):"[":L_TS:"]"
         L_CMD = "CLEAR.FILE DATA DOM_XML"
         CRT "==> Purging DOM_XML { ":L_CMD:" }"
         EXECUTE L_CMD CAPTURING L_JUNK
         IF @SYSTEM.RETURN.CODE < 0 THEN
            L_RTN_CD  = "A450-ERROR-2"
            L_RTN_MSG = ">>> Failed to purge DOM_XML file { ":@SYSTEM.RETURN.CODE:"|":L_JUNK:" }. <<<"
         END ELSE
            CRT "^_^ ALL SUCCEED ^_^"
         END
      END
   END

A450_EXIT:
   RETURN


***********************************************
* Internal Subroutine to Email Summary Report *
***********************************************

A460_EMAIL_SUMMARY_REPORT:

   IF L_EMAIL_REPORT THEN
      *** Get To Email Address ***
      IF NOT(L_BATCH_MODE) THEN
         CALL SYSS9300.1(L_TO_EMAIL, USER.ID)
      END ELSE
         L_KEY = "I88*PIMJ9000.1"
         READV L_TO_EMAIL FROM SYSTBL, L_KEY, 2
         ON ERROR
            L_RTN_CD  = "A460-ERROR-1-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO A460_EXIT
         END ELSE
            L_RTN_CD  = "A460-ERROR-1-2"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
            GO A460_EXIT
         END
      END

      *** Set up Email Message ***
      IF L_DELTA_CASE_LIST # "" THEN
         L_REPORT_MESSAGE := "[ High Level Product Delta Change List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_DELTA_CASE_LIST
      END
      IF L_ERROR_CASE1_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #1: Missing Product Price Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE1_LIST
      END
      IF L_ERROR_CASE2_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #2: Missing Product Brand Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE2_LIST
      END
      IF L_ERROR_CASE3_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #3: Missing Product Plant Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE3_LIST
      END
      IF L_ERROR_CASE4_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #4: Missing Product Supplier Plant Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE4_LIST
      END
      IF L_ERROR_CASE5_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #5: Missing Product Supplier Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE5_LIST
      END
      IF L_ERROR_CASE6_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #6: Invalid Package PI Setup Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE6_LIST
      END
      IF L_ERROR_CASE7_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #7: Missing Package Type Code Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE7_LIST
      END
      IF L_ERROR_CASE8_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #8: Missing EDI Package Code Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE8_LIST
      END
      IF L_ERROR_CASE9_LIST # "" THEN
         L_REPORT_MESSAGE := CHAR(13):CHAR(13):"[ #9: Missing PIM Package Name Error List ]":CHAR(13):CHAR(13)
         L_REPORT_MESSAGE := L_ERROR_CASE9_LIST
      END
      SWAP @AM WITH CHAR(13) IN L_REPORT_MESSAGE
      SWAP @VM WITH CHAR(13) IN L_REPORT_MESSAGE

      *** Generate Summary Report Text File ***
      L_DATE_OCONV = OCONV(DATE(),"D4/")
      L_TIME_OCONV = OCONV(TIME(),'MTS')
      SWAP "/" WITH "" IN L_DATE_OCONV
      SWAP ":" WITH "" IN L_TIME_OCONV
      L_FILE_DIR   = "DAY_REPORTS"
      L_FILE_NAME  = "PIMS9000.1_":L_DATE_OCONV:"_":L_TIME_OCONV:".txt"
      OPENSEQ L_FILE_DIR, L_FILE_NAME TO L_REPORT_FILE
      ON ERROR
         L_RTN_CD  = "A460-ERROR-2-1"
         L_RTN_MSG = "Cannot open sequential file ":L_FILE_NAME:" in directory ":L_FILE_DIR:"."
         GO A460_EXIT
      END LOCKED
         L_RTN_CD  = "A460-ERROR-2-2"
         L_RTN_MSG = "The summary report file ":L_FILE_NAME:" in directory ":L_FILE_DIR:" is currently locked by { ":GETUSERNAME(STATUS()):" }."
         GO A460_EXIT
      END THEN
         WRITESEQ L_REPORT_MESSAGE TO L_REPORT_FILE  ;* overwrite if file exists
         ON ERROR
            L_RTN_CD  = "A460-ERROR-3-1"
            L_RTN_MSG = "Unable to write file ":L_FILE_NAME:" in directory ":L_FILE_DIR:" { ":STATUS():" }."
            GO A460_EXIT
         END THEN
            CLOSESEQ L_REPORT_FILE
         END ELSE
            L_RTN_CD  = "A460-ERROR-3-2"
            L_RTN_MSG = "Error writing to sequential file ":L_FILE_NAME:" in directory ":L_FILE_DIR:"."
            GO A460_EXIT
         END
      END ELSE
         BEGIN CASE
         CASE STATUS() = 0  ;* opened file ok but does not exist
            WRITESEQ L_REPORT_MESSAGE TO L_REPORT_FILE  ;* create the file
            ON ERROR
               L_RTN_CD  = "A460-ERROR-3-3"
               L_RTN_MSG = "Unable to write file ":L_FILE_NAME:" in directory ":L_FILE_DIR:" { ":STATUS():" }."
               GO A460_EXIT
            END THEN
               CLOSESEQ L_REPORT_FILE
            END ELSE
               L_RTN_CD  = "A460-ERROR-3-4"
               L_RTN_MSG = "Error writing to sequential file ":L_FILE_NAME:" in directory ":L_FILE_DIR:"."
               GO A460_EXIT
            END
         CASE STATUS() = 1
            L_RTN_CD  = "A460-ERROR-4-1"
            L_RTN_MSG = "The summary report file ":L_FILE_NAME:" is not a sequential-access file."
            GO A460_EXIT
         CASE STATUS() = 2
            L_RTN_CD  = "A460-ERROR-4-2"
            L_RTN_MSG = "The summary report file directory ":L_FILE_DIR:" does not exist."
            GO A460_EXIT
         CASE STATUS() = 3
            L_RTN_CD  = "A460-ERROR-4-3"
            L_RTN_MSG = "The READONLY clause was included in the command statement and the summary report file ":L_FILE_NAME:" does not exist."
            GO A460_EXIT
         CASE STATUS() = 4
            L_RTN_CD  = "A460-ERROR-4-4"
            L_RTN_MSG = "An unknown error occurred (such as having too many files open or permission problems) while opening sequential html email template file ":L_FILE_NAME:"."
            GO A460_EXIT
         END CASE
      END

      *** Set up Email parameters ***
      L_TS     = OCONV(DATE(),"D4/"):" ":OCONV(TIME(),'MTS')
      PARAM    = ""
      PARAM<1> = ""                                                                                ;* email body message
      PARAM<2> = "[ ":ACNT.NAME:" ] *** PIM Inbound Integration Process Summary Report *** ":L_TS  ;* subject
      PARAM<3> = L_TO_EMAIL
      PARAM<4> = L_FILE_DIR
      PARAM<5> = L_FILE_NAME

      *** Send Email ***
      CALL SYSS9060.2
      IF RTN.FLAG OR PARAM<6> > 0 THEN
         L_RTN_CD  = "A460-ERROR-2"
         L_RTN_MSG = "Unable to email PIM Inbound Integration Process Summary Report { ":RTN.FLAG:"|":PARAM<6>:" }."
      END ELSE
         L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
         CRT CHAR(10):"[":L_TS:"]"
         CRT "==> Emailed summary report to { ":L_TO_EMAIL:" }."
      END
   END

A460_EXIT:
   RETURN


*********************
* Exception Handler *
*********************

A500_CONCLUSION:

   *** Clean up ***
   xmlStatus = XDOMClose(node.root)
   xmlStatus = XDOMClose(node.new)
   xmlStatus = XDOMClose(node.this)
   xmlStatus = XDOMClose(node.listsofvalues)
   xmlStatus = XDOMClose(node.entities)
   xmlStatus = XDOMClose(node.entity)
   xmlStatus = XDOMClose(node.entity.values)
   xmlStatus = XDOMClose(node.classifications)
   xmlStatus = XDOMClose(node.classification)
   xmlStatus = XDOMClose(node.products)
   xmlStatus = XDOMClose(node.product)
   xmlStatus = XDOMClose(node.product.values)
   xmlStatus = XDOMClose(domHandle)

   *** Release Job In-Process lock ***
   RELEASE PIMFLO, L_INPR_LOCK
   ON ERROR
      L_RTN_CD  = "A500-ERROR-1"
      L_RTN_MSG = "Unable to release lock for record ":L_INPR_LOCK:" in PIMFLO file."
   END

   *** Display Error Message ***
   IF L_RTN_CD # "" AND L_RTN_CD # "Q" THEN
      L_TS = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":FIELD(SYSTEM(12)/1000,'.',2)
      PRINT
      PRINT "==> [":L_TS:"] Program ":PROGRAM:" aborted at ":L_RTN_CD:" -> ":L_RTN_MSG
      PRINT
   END

   RTN.FLAG = 0
   REFRESH = -2

A500_EXIT:
   GO 9999


********************************************************************
* Internal Subroutine to Define & Initialize PIM Object Variables. *
********************************************************************

B1000_INITIALIZE_PIM_OBJECT_VARIABLE:

   *** System Variable Initialization ***
   L_LEVEL                                                    = 0
   L_PI_CNT                                                   = 0
   L_AM_POS                                                   = 0
   L_VM_POS                                                   = 0
   L_SM_POS                                                   = 0

   L_RTN_CD                                                   = ""
   L_RTN_MSG                                                  = ""
   L_JUNK                                                     = ""
   L_KEY                                                      = ""
   L_KEY_ENG                                                  = ""
   L_KEY_FRN                                                  = ""
   L_REC                                                      = ""
   L_TS                                                       = ""
   L_TEST_LIST                                                = ""

   *** PIM Product Object Key Info Variable Initialization ***
   L_PRD_KEY                                                  = ""
   L_PRD_REC                                                  = ""
   L_PRD_CPN                                                  = ""
   L_PRD_NBR                                                  = ""
   L_PRODUCT_CPN                                              = ""
   L_PRODUCT_CODE                                             = ""
   L_PRODUCT_LINE_CODE                                        = ""
   L_PRODUCT_LINE_COMPANY_CODE                                = ""
   L_PRODUCT_LINE_NAME_ENG                                    = ""
   L_PRODUCT_LINE_NAME_FRN                                    = ""
   L_PRODUCT_LINE_REGRINDABLE_FLAG                            = ""
   L_PRODUCT_LINE_DEFAULT_ROYALTY_FLAG                        = ""
   L_PRODUCT_LINE_MATERIAL_CODE                               = ""
   L_PRODUCT_GROUP_CODE                                       = ""
   L_PRODUCT_GROUP_NAME_ENG                                   = ""
   L_PRODUCT_GROUP_NAME_FRN                                   = ""
   L_PRODUCT_SUPER_GROUP_CODE                                 = ""
   L_PRODUCT_SUPER_GROUP_NAME_ENG                             = ""
   L_PRODUCT_SUPER_GROUP_NAME_FRN                             = ""
   L_PRODUCT_TYPE_CODE                                        = ""
   L_PRODUCT_TYPE_CATEGORY_CODE                               = ""
   L_PRODUCT_TYPE_NAME_ENG                                    = ""
   L_PRODUCT_TYPE_NAME_FRN                                    = ""
   L_PRODUCT_MARKET_SEGMENT_CODE                              = ""
   L_PRODUCT_MARKET_SEGMENT_NAME_ENG                          = ""
   L_PRODUCT_MARKET_SEGMENT_NAME_FRN                          = ""
   L_PRODUCT_ATTRIBUTE_GROUP_CODE                             = ""
   L_PRODUCT_ATTRIBUTE_GROUP_NAME_ENG                         = ""
   L_PRODUCT_ATTRIBUTE_GROUP_NAME_FRN                         = ""
   L_PRODUCT_LINE_ATTRIBUTE_BASED_DESC_FLAG                   = ""
   L_PRODUCT_CATEGORY_NAME                                    = ""

   *** PIM Product Object Common Attribute Info Variable Initialization ***
   L_PIM_PRD_CMN_ATTR_PRODUCT_CODE                            = ""
   L_PIM_PRD_CMN_ATTR_UPC_CODE                                = ""
   L_PIM_PRD_CMN_ATTR_OEM_NUMBER                              = ""  ;* N/A
   L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE                       = ""
   L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE_LIST                  = ""
   L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE                         = ""
   L_PIM_PRD_CMN_ATTR_PRODUCT_STATUS                          = ""
   L_PIM_PRD_CMN_ATTR_CREATION_DATE                           = ""
   L_PIM_PRD_CMN_ATTR_OBSOLESCENCE_DATE                       = ""
   L_PIM_PRD_CMN_ATTR_INFOFLO_ITEM_TYPE                       = ""
   L_PIM_PRD_CMN_ATTR_ABC_CATEGORY                            = ""
   L_PIM_PRD_CMN_ATTR_ABC_CATEGORY_OVERRIDE                   = ""
   L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_ENG                      = ""
   L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_FRN                      = ""
   L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_ENG                      = ""
   L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_FRN                      = ""
   L_INFOFLO_PRODUCT_BASE_UOM_CODE                            = ""
   L_INFOFLO_PRODUCT_BASE_UOM_DESC                            = ""
   L_INFOFLO_PRODUCT_BASE_UOM_TYPE                            = ""
   L_INFOFLO_PRODUCT_BASE_QTY_I                               = ""
   L_INFOFLO_PRODUCT_BASE_QTY_M                               = ""
   L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE                           = ""
   L_PIM_PRD_CMN_ATTR_BASE_UOM_DESC                           = ""
   L_PIM_PRD_CMN_ATTR_BASE_UOM_TYPE                           = ""
   L_PIM_PRD_CMN_ATTR_BASE_QTY_I                              = ""
   L_PIM_PRD_CMN_ATTR_BASE_QTY_M                              = ""
   L_PIM_PRD_CMN_ATTR_UOM_STANDARD                            = ""
   L_PIM_PRD_CMN_ATTR_SHIPPING_UOM                            = ""
   L_PIM_PRD_CMN_ATTR_SHIPPING_WEIGHT                         = ""
   L_PIM_PRD_CMN_ATTR_PRIMARY_SOURCE_TYPE                     = ""
   L_PIM_PRD_CMN_ATTR_PURCHASED_FROM_ALIAXIS                  = ""
   L_PIM_PRD_CMN_ATTR_COUNTRY_OF_ORIGIN_CODE                  = ""
   L_PIM_PRD_LOV_COUNTRY_CODE_LIST                            = ""
   L_PIM_PRD_LOV_COUNTRY_DESC_ENG_L_LIST                      = ""
   L_PIM_PRD_LOV_COUNTRY_DESC_FRN_L_LIST                      = ""
   L_PIM_PRD_CMN_ATTR_DG_CODE                                 = ""
   L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_CELSIUS                   = ""
   L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_FARENHEIT                 = ""
   L_PIM_PRD_CMN_ATTR_NON_RET_NON_CANC                        = ""
   L_PIM_PRD_CMN_ATTR_REBATE_MATRIX_CODE                      = ""
   L_PIM_PRD_CMN_ATTR_WEIGHT_FACTOR                           = ""
   L_PIM_PRD_CMN_ATTR_SCRAP_PERCENT                           = ""
   L_PIM_PRD_CMN_ATTR_BELL_LENGTH                             = ""
   L_PIM_PRD_CMN_ATTR_HAS_BELL_END                            = ""
   L_PIM_PRD_CMN_ATTR_DESCRIPTION_TYPE                        = ""
   L_PIM_PRD_CMN_ATTR_ROYALTY_FLAG                            = ""
   L_INFOFLO_MES_COLOR_OPTION_CODE                            = ""
   L_INFOFLO_MES_COLOR_OPTION_NAME                            = ""
   L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_CODE                = ""
   L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_NAME                = ""
   L_PIM_PRD_CMN_ATTR_PACKING_COMMENTS                        = ""
   L_PRODUCT_SORT_KEY                                         = ""
   L_PRODUCT_ATTRIBUTE_DESCRIPTIVE_CODE                       = ""
   L_PRODUCT_CATALOG_NUMBER                                   = ""
   L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE                        = ""
   L_PIM_PRD_CMN_ATTR_FRIATEC_PART_NUMBER                     = ""
   L_PIM_PRD_CMN_ATTR_CANPLAS_PART_NUMBER                     = ""
   L_PIM_PRD_CMN_ATTR_NACO_PART_NUMBER                        = ""
   L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_CA                  = ""
   L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US                  = ""
   L_PIM_PRD_CMN_ATTR_UNIVERSAL_PART_NUMBER                   = ""
   L_PIM_PRD_CMN_ATTR_HAS_COSTING_SETUP_FLAG                  = ""
   L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_I                     = ""
   L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_M                     = ""
   L_INFOFLO_PRODUCT_LAST_MARKET_SEGMENT_CODE                 = ""
   L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE             = ""
   L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE_LIST        = ""
   L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST         = ""
   L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_NAME_LIST  = ""
   L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_DESC_LIST  = ""
   L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_ENG_LIST      = ""
   L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_FRN_LIST      = ""
   L_INFOFLO_PRODUCT_LAST_LIST_PRICE_EFFECTIVE_DATE_LIST      = ""

   *** PIM Product Object Specific Attribute Info Variable Initialization ***
   L_PIM_PRD_SPC_ATTR_MATRIX                                  = ""
   L_PIM_PRD_SPC_ATTR_LIST                                    = ""
   L_PIM_PRD_SPC_ATTR_ID                                      = ""
   L_PIM_PRD_SPC_ATTR_CONTEXT_ENG_CD                          = ""
   L_PIM_PRD_SPC_ATTR_CONTEXT_ENG_VALUE                       = ""
   L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_CD                          = ""
   L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_VALUE                       = ""

   *** PIM Product Object Cross Reference Info Variable Initialization ***
   L_PIM_PRD_CR_SUBSTITUTE_ITEM_NBR                           = ""
   L_PIM_PRD_CR_SUBSTITUTE_ITEM_CPN                           = ""
   L_PIM_PRD_CR_SUBSTITUTE_ITEM_CLASS_CODE                    = ""
   L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_NBR                        = ""
   L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CPN                        = ""
   L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CLASS_CODE                 = ""
   L_PIM_PRD_CR_ALT_UPC_CODE                                  = ""
   L_PIM_PRD_CR_ALT_UPC_ITEM_NBR                              = ""
   L_PIM_PRD_CR_ALT_UPC_ITEM_CPN                              = ""
   L_PIM_PRD_CR_ALT_UPC_ITEM_CLASS_CODE                       = ""

   *** PIM ProductCompany Object Info Variable Initialization ***
   L_PRICEDET_KEY_TEST_LIST                                   = ""
   L_PRICEDET_KEY                                             = ""
   L_PRICEHST_KEY                                             = ""
   L_PRICEHDR_KEY                                             = ""
   L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE                  = ""
   L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE                   = ""
   L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE_LIST              = ""
   L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_NAME                    = ""
   L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_DESC                    = ""
   L_INFOFLO_PRODUCT_LIST_PRICE_EFFECTIVE_DATE                = ""
   L_INFOFLO_PRODUCT_HISTORY_LIST_PRICE_EFFECTIVE_DATE        = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE                         = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST                    = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_KEY_LIST                     = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_NAME_LIST   = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_DESC_LIST   = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE                   = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG               = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG_LIST          = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN               = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN_LIST          = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_ID                     = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_ID_LIST                = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_PARENT_ID              = ""
   L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_PARENT_ID_LIST         = ""
   L_PIM_PRD_SRC_NEW_PRODUCT_COMPANY_CODE_FLAG_LIST           = ""
   L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST           = ""
   L_PIM_PRD_CURRENT_LIST_PRICE_LIST                          = ""
   L_PIM_PRD_FUTURE_LIST_PRICE_EFFECTIVE_DATE_LIST            = ""
   L_PIM_PRD_FUTURE_LIST_PRICE_LIST                           = ""
   L_INFOFLO_PRODUCT_PRICE_PER                                = ""
   L_PIM_PRD_PRICE_PER_LIST                                   = ""
   L_PIM_PRD_PRICE_CURRENCY_CODE                              = ""
   L_PIM_PRD_PRICE_CURRENCY_CODE_LIST                         = ""
   L_PIM_PRD_LOV_CURRENCY_CODE_LIST                           = ""
   L_PIM_PRD_LOV_CURRENCY_DESC_ENG_L_LIST                     = ""
   L_PIM_PRD_LOV_CURRENCY_DESC_FRN_L_LIST                     = ""

   *** PIM ProductPlant Object Info Variable Initialization ***
   L_INFOFLO_PRODUCT_MFG_PURCH_FLAG                           = ""
   L_INFOFLO_PRODUCT_MTO_MTS_CODE                             = ""
   L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_CODE                = ""
   L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_NAME                = ""
   L_INFOFLO_PRODUCT_PLANT_CODE                               = ""
   L_INFOFLO_PRODUCT_PLANT_CODE_LIST                          = ""
   L_INFOFLO_MANUFACTURING_PLANT_CODE_LIST                    = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST                      = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_NAME_LIST                      = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_COUNTRY_CODE_LIST              = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_KEY_LIST                       = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_IS_BOM_FLAG_LIST               = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_STOCK_TYPE_LIST         = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_PLANNER_BUYER_NAME_LIST = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_PRIMARY_SOURCE_FLAG_LIST       = ""
   L_PIM_PRD_SRC_PRODUCT_PLANT_INACTIVE_SOURCE_FLAG_LIST      = ""

   *** PIM ProductSupplier Object Info Variable Initialization ***
   L_INFOFLO_PRODUCT_PLANT_COMPANY_CODE                       = ""
   L_INFOFLO_PRODUCT_SUPPLIER_CODE                            = ""
   L_INFOFLO_PRODUCT_BUY_CARD_SUPPLIER_ID_LIST                = ""
   L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST                   = ""
   L_PIM_PRD_SRC_PRODUCT_SUPPLIER_NAME_LIST                   = ""
   L_PIM_PRD_SRC_PRODUCT_SUPPLIER_COUNTRY_CODE_LIST           = ""
   L_PIM_PRD_SRC_PRODUCT_SUPPLIER_KEY_LIST                    = ""
   L_PIM_PRD_SRC_PRODUCT_SUPPLIER_IS_BUY_CARD_FLAG_LIST       = ""
   L_PIM_PRD_SRC_PRODUCT_SUPPLIER_PRIMARY_SOURCE_FLAG_LIST    = ""
   L_PIM_PRD_SRC_PRODUCT_SUPPLIER_INACTIVE_SOURCE_FLAG_LIST   = ""

   *** PIM ProductPackage Object Info Variable Initialization ***
   L_INFOFLO_PACKAGE_NO_PI_ERROR_FOUND                        = @FALSE
   L_INFOFLO_PACKAGE_BRANCH_SETUP_ERROR_FOUND                 = @FALSE
   L_INFOFLO_PACKAGE_PI_TEST                                  = ""
   L_INFOFLO_PACKAGE_PI                                       = ""
   L_INFOFLO_PACKAGE_NLPI                                     = ""
   L_INFOFLO_PACKAGE_PI_LIST                                  = ""
   L_INFOFLO_PACKAGE_BRANCH_MATRIX                            = ""
   L_INFOFLO_PACKAGE_DEFAULT_PI                               = ""
   L_INFOFLO_PACKAGE_DEFAULT_BRANCH_MATRIX                    = ""
   L_INFOFLO_PACKAGE_TYPE_CODE                                = ""
   L_INFOFLO_PACKAGE_CODE                                     = ""
   L_INFOFLO_PACKAGE_NAME                                     = ""
   L_PIM_PACKAGE_IDENTIFIER                                   = ""
   L_PIM_PRD_PKG_DEFAULT_BRANCH_PI_LIST                       = ""
   L_PIM_PRD_PKG_BRANCH_MATRIX                                = ""
   L_PIM_PRD_PKG_ATTR_PI_LIST                                 = ""
   L_PIM_PRD_PKG_ATTR_NLPI_LIST                               = ""
   L_PIM_PRD_PKG_ATTR_DEFAULT_PI_FLAG_LIST                    = ""
   L_PIM_PRD_PKG_ATTR_DEFAULT_BRANCH_PI_FLAG_LIST             = ""
   L_PIM_PRD_PKG_ATTR_I2OF5                                   = ""
   L_PIM_PRD_PKG_ATTR_I2OF5_LIST                              = ""
   L_PIM_PRD_PKG_ATTR_CR_I2OF5_LIST                           = ""
   L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST                          = ""
   L_PIM_PRD_PKG_ATTR_CODE_LIST                               = ""
   L_PIM_PRD_PKG_ATTR_NAME_LIST                               = ""
   L_PIM_PRD_PKG_ATTR_DESC_ENG_L_LIST                         = ""
   L_PIM_PRD_PKG_ATTR_DESC_ENG_S_LIST                         = ""
   L_PIM_PRD_PKG_ATTR_DESC_FRN_L_LIST                         = ""
   L_PIM_PRD_PKG_ATTR_DESC_FRN_S_LIST                         = ""
   L_PIM_PRD_PKG_ATTR_OVERRIDE_DIMENSION_FLAG_LIST            = ""
   L_PIM_PRD_PKG_ATTR_CARTONS_PER_LAYER_LIST                  = ""
   L_PIM_PRD_PKG_ATTR_ACTIVE_PACKAGE_FLAG_LIST                = ""
   L_PIM_PRD_PKG_ATTR_ACTIVE_BRANCH_FLAG_LIST                 = ""
   L_PIM_PRD_PKG_ATTR_QUANTITY_LIST                           = ""
   L_PIM_PRD_PKG_ATTR_WIDTH_LIST                              = ""
   L_PIM_PRD_PKG_ATTR_LENGTH_LIST                             = ""
   L_PIM_PRD_PKG_ATTR_HEIGHT_LIST                             = ""
   L_PIM_PRD_PKG_ATTR_WEIGHT_LIST                             = ""
   L_PIM_PRD_PKG_ATTR_WIDTH_LIST2                             = ""
   L_PIM_PRD_PKG_ATTR_LENGTH_LIST2                            = ""
   L_PIM_PRD_PKG_ATTR_HEIGHT_LIST2                            = ""
   L_PIM_PRD_PKG_ATTR_WEIGHT_LIST2                            = ""
   L_PIM_PRD_PKG_ATTR_TRUCK_LOAD_LIST                         = ""
   L_LAST_PIM_PRD_PKG_ATTR_I2OF5                              = ""
   L_LAST_PIM_PRD_PKG_ATTR_I2OF5_LIST                         = ""
   L_PRODUCT_SHELL_PACKAGE_I2OF5_LIST                         = ""

   *** PIM Product Object Entity Info Variable Initialization ***
   L_INFOFLO_PLANT_COUNTRY_CODE                               = ""
   L_INFOFLO_SUPPLIER_COUNTRY_CODE                            = ""
   L_INFOFLO_TARIFF_CODE                                      = ""
   L_INFOFLO_TARIFF_CODE_DESC_ENG_L                           = ""
   L_INFOFLO_TARIFF_CODE_DESC_FRN_L                           = ""
   L_INFOFLO_TARIFF_CODE_DESC_ENG_S                           = ""
   L_INFOFLO_TARIFF_CODE_DESC_FRN_S                           = ""
   L_INFOFLO_TARIFF_CODE_CANADA                               = ""
   L_INFOFLO_TARIFF_CODE_USA                                  = ""
   L_INFOFLO_DANGEROUS_GOODS_CODE                             = ""
   L_INFOFLO_DANGEROUS_GOODS_DESC                             = ""
   L_INFOFLO_DANGEROUS_GOODS_COMMENTS                         = ""
   L_INFOFLO_DANGEROUS_GOODS_PRINT_BOL_FLAG                   = ""
   L_INFOFLO_DANGEROUS_GOODS_UN_CODES                         = ""
   L_INFOFLO_DANGEROUS_GOODS_WEIGHT_PCTS                      = ""
   L_PIM_PRD_ENTITY_TC_ID                                     = ""
   L_PIM_PRD_ENTITY_TC_NAME                                   = ""
   L_PIM_PRD_ENTITY_DG_ID                                     = ""
   L_PIM_PRD_ENTITY_DG_NAME                                   = ""

   *** PIM Product Delta Info Variable Initialization ***
   L_CURRENT_DELTA_REC                                        = ""
   L_PREVIOUS_DELTA_REC                                       = ""
   L_DELTA_REC                                                = ""
   L_PIM_PRD_OBJ_KEY_INFO_DELTA_FOUND                         = @FALSE ;* PIMFLO<1,1>
   L_PIM_PRD_OBJ_ENTITY_INFO_DELTA_FOUND                      = @FALSE ;* PIMFLO<1,2>
   L_PIM_PRD_CPY_OBJ_CR_INFO_DELTA_FOUND                      = @FALSE ;* PIMFLO<1,3>
   L_PIM_PRD_PLT_OBJ_CR_INFO_DELTA_FOUND                      = @FALSE ;* PIMFLO<1,4>
   L_PIM_PRD_SPL_OBJ_CR_INFO_DELTA_FOUND                      = @FALSE ;* PIMFLO<1,5>
   L_PIM_PRD_OBJ_CR_INFO_DELTA_FOUND                          = @FALSE ;* PIMFLO<1,6>
   L_PIM_PRD_OBJ_CMN_ATTR_INFO_DELTA_FOUND                    = @FALSE ;* PIMFLO<1,7>
   L_PIM_PRD_OBJ_SPC_ATTR_INFO_DELTA_FOUND                    = @FALSE ;* PIMFLO<1,8>
   L_PIM_PRD_PKG_OBJ_INFO_DELTA_FOUND                         = @FALSE ;* PIMFLO<1,9>

B1000_EXIT:
   RETURN


***************************************************
* Internal Subroutine to Get PIM Product Key Info *
***************************************************

B1010_GET_PIM_PRODUCT_KEY_INFO:

   *** Get Product Category based on Market Segment & Attribute Grouping ***
   L_PRODUCT_CPN                  = L_PRD_KEY
   L_PRODUCT_CODE                 = L_PRD_REC<1>
   L_PRODUCT_LINE_CODE            = L_PRD_REC<208>
   L_PRODUCT_ATTRIBUTE_GROUP_CODE = L_PRD_REC<301>

   L_KEY = "I03*":L_PRODUCT_LINE_CODE
   READ L_REC FROM SYSTBL, L_KEY
   ON ERROR
      L_RTN_CD  = "B1010-ERROR-1"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
      GO B1010_EXIT
   END THEN
      L_PRODUCT_GROUP_CODE                = L_REC<1>
      L_PRODUCT_LINE_COMPANY_CODE         = L_REC<2>
      L_PRODUCT_LINE_NAME_ENG             = L_REC<4>
      L_PRODUCT_LINE_NAME_FRN             = L_REC<20>
      L_PRODUCT_LINE_REGRINDABLE_FLAG     = L_REC<5>
      L_PRODUCT_LINE_DEFAULT_ROYALTY_FLAG = L_REC<6>
      IF L_PRODUCT_LINE_DEFAULT_ROYALTY_FLAG = "X" THEN
         L_PRODUCT_LINE_DEFAULT_ROYALTY_FLAG = "Y"
      END
      L_PRODUCT_LINE_MATERIAL_CODE = L_REC<7>

      L_KEY = "I29*":L_PRODUCT_GROUP_CODE
      READ L_REC FROM SYSTBL, L_KEY
      ON ERROR
         L_RTN_CD  = "B1010-ERROR-2"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
         GO B1010_EXIT
      END THEN
         L_PRODUCT_GROUP_NAME_ENG      = L_REC<4>
         L_PRODUCT_GROUP_NAME_FRN      = L_REC<20>
         L_PRODUCT_SUPER_GROUP_CODE    = L_REC<1>
         L_PRODUCT_MARKET_SEGMENT_CODE = L_PRODUCT_SUPER_GROUP_CODE[1,1]
         L_PRODUCT_TYPE_CODE           = L_PRODUCT_SUPER_GROUP_CODE[1,2]

         *** Get Product Type Name ***
         L_KEY = "I42*":L_PRODUCT_TYPE_CODE
         READ L_REC FROM SYSTBL, L_KEY
         ON ERROR
            L_RTN_CD  = "B1010-ERROR-3-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO B1010_EXIT
         END THEN
            L_PRODUCT_TYPE_CATEGORY_CODE = L_REC<1>
            L_PRODUCT_TYPE_NAME_ENG      = L_REC<4>
            L_PRODUCT_TYPE_NAME_FRN      = L_REC<20>
         END ELSE
            L_RTN_CD  = "B1010-ERROR-3-2"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
            GO B1010_EXIT
         END

         *** Get Product Super Group Name ***
         L_KEY = "I30*":L_PRODUCT_SUPER_GROUP_CODE
         READ L_REC FROM SYSTBL, L_KEY
         ON ERROR
            L_RTN_CD  = "B1010-ERROR-4-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO B1010_EXIT
         END THEN
            L_PRODUCT_SUPER_GROUP_NAME_ENG = L_REC<4>
            L_PRODUCT_SUPER_GROUP_NAME_FRN = L_REC<20>
         END ELSE
            L_RTN_CD  = "B1010-ERROR-4-2"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
            GO B1010_EXIT
         END

         *** Get Product Market Segment Name ***
         L_KEY = "I18*":L_PRODUCT_MARKET_SEGMENT_CODE
         READ L_REC FROM SYSTBL, L_KEY
         ON ERROR
            L_RTN_CD  = "B1010-ERROR-5-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO B1010_EXIT
         END THEN
            L_PRODUCT_MARKET_SEGMENT_NAME_ENG = L_REC<4>
            L_PRODUCT_MARKET_SEGMENT_NAME_FRN = L_REC<20>
         END ELSE
            L_RTN_CD  = "B1010-ERROR-5-2"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
            GO B1010_EXIT
         END

         *** Get Product Attribute Grouping Name (Reserve for future use, currentl not send to STEP) ***
         L_KEY = "I218*":L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE
         READ L_REC FROM SYSTBL, L_KEY
         ON ERROR
            L_RTN_CD  = "B1010-ERROR-6"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO B1010_EXIT
         END THEN
            L_PRODUCT_ATTRIBUTE_GROUP_NAME_ENG = L_REC<4>
            L_PRODUCT_ATTRIBUTE_GROUP_NAME_FRN = L_REC<20>
         END ELSE
            L_PRODUCT_ATTRIBUTE_GROUP_NAME_ENG = ""
            L_PRODUCT_ATTRIBUTE_GROUP_NAME_FRN = ""
         END

         *** Get Product Line Attribute-Based Description Flag (if not found check ProductGroup) ***
         L_KEY = "BOM_EXCEPTIONS"
         READ L_REC FROM SYSCON, L_KEY
         ON ERROR
            L_RTN_CD  = "B1010-ERROR-7-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSCON { ":STATUS():" }."
            GO B1010_EXIT
         END THEN
            IF INDEX(L_REC<1>, L_PRODUCT_LINE_CODE, 1) THEN  ;* search for ProductLine
               L_PRODUCT_LINE_ATTRIBUTE_BASED_DESC_FLAG = "N"
            END ELSE
               IF INDEX(L_REC<3>, L_PRODUCT_LINE_CODE, 1) THEN  ;* search for ProductLine
                  L_PRODUCT_LINE_ATTRIBUTE_BASED_DESC_FLAG = "N"
               END ELSE
                  IF INDEX(L_REC<2>, L_PRODUCT_GROUP_CODE, 1) THEN  ;* search for ProductGroup
                     L_PRODUCT_LINE_ATTRIBUTE_BASED_DESC_FLAG = "N"
                  END ELSE
                     L_PRODUCT_LINE_ATTRIBUTE_BASED_DESC_FLAG = "Y"
                  END
               END
            END
         END ELSE
            L_RTN_CD  = "B1010-ERROR-7-2"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSCON."
            GO B1010_EXIT
         END

         *** Get Product Category Name ***
         L_KEY = "I218*":L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE
         READ L_REC FROM SYSTBL, L_KEY
         ON ERROR
            L_RTN_CD  = "B1010-ERROR-8"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO B1010_EXIT
         END THEN
            L_PRODUCT_CATEGORY_NAME = L_REC<1>
         END ELSE
            L_PRODUCT_CATEGORY_NAME = L_PRODUCT_LINE_COMPANY_CODE:"_UNKNOWN"
         END
      END ELSE
         L_RTN_CD  = "B1010-ERROR-2-2"
         L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
         GO B1010_EXIT
      END
   END ELSE
      L_RTN_CD  = "B1010-ERROR-1-2"
      L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
      GO B1010_EXIT
   END

   *** Accumulate PIM Product Object Key Info - PIMFLO<1,1> ***
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_CODE                            ;* 1
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_LINE_CODE                       ;* 2
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_LINE_NAME_ENG                   ;* 3
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_LINE_NAME_FRN                   ;* 4
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_GROUP_CODE                      ;* 5
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_GROUP_NAME_ENG                  ;* 6
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_GROUP_NAME_FRN                  ;* 7
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_SUPER_GROUP_CODE                ;* 8
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_SUPER_GROUP_NAME_ENG            ;* 9
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_SUPER_GROUP_NAME_FRN            ;* 10
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_TYPE_CODE                       ;* 11
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_TYPE_NAME_ENG                   ;* 12
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_TYPE_NAME_FRN                   ;* 13
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_MARKET_SEGMENT_CODE             ;* 14
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_MARKET_SEGMENT_NAME_ENG         ;* 15
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_MARKET_SEGMENT_NAME_FRN         ;* 16
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_ATTRIBUTE_GROUP_CODE            ;* 17
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_LINE_ATTRIBUTE_BASED_DESC_FLAG  ;* 18
   L_CURRENT_DELTA_REC<1,1,-1> = L_PRODUCT_CATEGORY_NAME                   ;* 19

B1010_EXIT:
   RETURN


****************************************************************
* Internal Subroutine to Get PIM Product Common Attribute Info *
****************************************************************

B1020_GET_PIM_PRODUCT_COMMON_ATTRIBUTE_INFO:

   *** Get PIM Product Description Attribute Context Info (Imperial/Metric) ***
   L_TTL = DCOUNT(L_PRD_REC<161>,@VM)
   FOR L_CNT = 1 TO L_TTL
      BEGIN CASE
      CASE L_PRD_REC<161,L_CNT> = "I" AND L_PRD_REC<162,L_CNT> = "ENG"
         L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_ENG = TRIM(L_PRD_REC<163,L_CNT>)
      CASE L_PRD_REC<161,L_CNT> = "I" AND L_PRD_REC<162,L_CNT> = "FRN"
         L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_FRN = TRIM(L_PRD_REC<163,L_CNT>)
      CASE L_PRD_REC<161,L_CNT> = "M" AND L_PRD_REC<162,L_CNT> = "ENG"
         L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_ENG = TRIM(L_PRD_REC<163,L_CNT>)
      CASE L_PRD_REC<161,L_CNT> = "M" AND L_PRD_REC<162,L_CNT> = "FRN"
         L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_FRN = TRIM(L_PRD_REC<163,L_CNT>)
      END CASE
   NEXT L_CNT

   *** Get Infoflo Product Base UOM Quantity ***
   L_INFOFLO_PRODUCT_BASE_UOM_CODE = L_PRD_REC<6>
   L_KEY = "UOM*":L_INFOFLO_PRODUCT_BASE_UOM_CODE
   READ L_REC FROM SYSTBL, L_KEY
   ON ERROR
      L_RTN_CD  = "B1020-ERROR-1"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
      GO B1020_EXIT
   END THEN
      L_INFOFLO_PRODUCT_BASE_UOM_TYPE = L_REC<2>
      L_INFOFLO_PRODUCT_BASE_UOM_DESC = L_REC<4>
      L_TTL = DCOUNT(L_PRD_REC<175>, @VM)
      FOR L_CNT = 1 TO L_TTL
         BEGIN CASE
         CASE L_PRD_REC<175,L_CNT> = "I"
            L_INFOFLO_PRODUCT_BASE_QTY_I = OCONV(L_PRD_REC<176,L_CNT>, "MD3")
         CASE L_PRD_REC<175,L_CNT> = "M"
            L_INFOFLO_PRODUCT_BASE_QTY_M = OCONV(L_PRD_REC<176,L_CNT>, "MD3")
         CASE 1
            L_INFOFLO_PRODUCT_BASE_QTY_I = ""
            L_INFOFLO_PRODUCT_BASE_QTY_M = ""
         END CASE
      NEXT L_CNT
   END ELSE
      L_INFOFLO_PRODUCT_BASE_QTY_I = ""
      L_INFOFLO_PRODUCT_BASE_QTY_M = ""
   END

   *** Get Infoflo Manufacturing Plants ***
   L_KEY = L_PRODUCT_CPN
   READ L_REC FROM ITMWRK, L_KEY
   ON ERROR
      L_RTN_CD  = "B1020-ERROR-2"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMWRK { ":STATUS():" }."
      GO B1020_EXIT
   END THEN
      L_INFOFLO_MANUFACTURING_PLANT_CODE_LIST = L_REC<11>
      SWAP @VM WITH @AM IN L_INFOFLO_MANUFACTURING_PLANT_CODE_LIST
   END ELSE
      L_INFOFLO_MANUFACTURING_PLANT_CODE_LIST = ""
   END

   *** Get PIM Product Common Attribute Info ***
   L_PIM_PRD_CMN_ATTR_PRODUCT_CPN             = L_PRODUCT_CPN
   L_PIM_PRD_CMN_ATTR_PRODUCT_CODE            = L_PRD_REC<1>
   L_PIM_PRD_CMN_ATTR_UPC_CODE                = L_PRD_REC<141>
   L_PIM_PRD_CMN_ATTR_OEM_NUMBER              = L_PRD_REC<303>
   L_PIM_PRD_CMN_ATTR_CREATION_DATE           = OCONV(L_PRD_REC<31>, "D4-YMD[4,2,2]")
   L_PIM_PRD_CMN_ATTR_ABC_CATEGORY            = L_PRD_REC<332>
   L_PIM_PRD_CMN_ATTR_ABC_CATEGORY_OVERRIDE   = L_PRD_REC<333>
   L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE           = L_INFOFLO_PRODUCT_BASE_UOM_CODE
   L_PIM_PRD_CMN_ATTR_BASE_UOM_DESC           = L_INFOFLO_PRODUCT_BASE_UOM_DESC
   L_PIM_PRD_CMN_ATTR_BASE_UOM_TYPE           = L_INFOFLO_PRODUCT_BASE_UOM_TYPE
   L_PIM_PRD_CMN_ATTR_BASE_QTY_I              = L_INFOFLO_PRODUCT_BASE_QTY_I
   L_PIM_PRD_CMN_ATTR_BASE_QTY_M              = L_INFOFLO_PRODUCT_BASE_QTY_M
   L_PIM_PRD_CMN_ATTR_SHIPPING_UOM            = L_PRD_REC<98>
   L_PIM_PRD_CMN_ATTR_SHIPPING_WEIGHT         = OCONV(L_PRD_REC<99>, "MD3")
   L_PIM_PRD_CMN_ATTR_PRIMARY_SOURCE_TYPE     = L_PRD_REC<57>[7,1]
   L_PIM_PRD_CMN_ATTR_COUNTRY_OF_ORIGIN_CODE  = L_PRD_REC<180>
   L_PIM_PRD_CMN_ATTR_PURCHASED_FROM_ALIAXIS  = L_PRD_REC<194>
   L_PIM_PRD_CMN_ATTR_DG_CODE                 = L_PRD_REC<184>
   L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_CELSIUS   = L_PRD_REC<317>
   L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_FARENHEIT = L_PRD_REC<318>
   L_PIM_PRD_CMN_ATTR_NON_RET_NON_CANC        = L_PRD_REC<238>
   L_PIM_PRD_CMN_ATTR_REBATE_MATRIX_CODE      = L_PRD_REC<191>
   L_PIM_PRD_CMN_ATTR_WEIGHT_FACTOR           = OCONV(L_PRD_REC<192>, "MD3")
   L_PIM_PRD_CMN_ATTR_SCRAP_PERCENT           = OCONV(L_PRD_REC<195>, "MD3")
   L_PIM_PRD_CMN_ATTR_BELL_LENGTH             = OCONV(L_PRD_REC<343>, "MD3")
   L_PIM_PRD_CMN_ATTR_HAS_BELL_END            = L_PRD_REC<342>

   L_PIM_PRD_CMN_ATTR_DESCRIPTION_TYPE = L_PRD_REC<264>
   IF L_PIM_PRD_CMN_ATTR_DESCRIPTION_TYPE = 1 THEN
      L_PIM_PRD_CMN_ATTR_DESCRIPTION_TYPE = 0
   END

   L_PIM_PRD_CMN_ATTR_ROYALTY_FLAG = L_PRD_REC<189>
   IF L_PIM_PRD_CMN_ATTR_ROYALTY_FLAG = "X" THEN
      L_PIM_PRD_CMN_ATTR_ROYALTY_FLAG = "Y"
   END

   L_INFOFLO_MES_COLOR_OPTION_CODE = L_PRD_REC<337>
   L_KEY = "I296*":L_INFOFLO_MES_COLOR_OPTION_CODE
   READ L_REC FROM SYSTBL, L_KEY
   ON ERROR
      L_RTN_CD  = "B1020-ERROR-3"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
      GO B1020_EXIT
   END THEN
      L_INFOFLO_MES_COLOR_OPTION_NAME = L_REC<4>
   END ELSE
      L_INFOFLO_MES_COLOR_OPTION_NAME = ""
   END
   L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_CODE = L_INFOFLO_MES_COLOR_OPTION_CODE
   L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_NAME = L_INFOFLO_MES_COLOR_OPTION_NAME

   L_PIM_PRD_CMN_ATTR_PACKING_COMMENTS = L_PRD_REC<335>
   SWAP @VM WITH " " IN L_PIM_PRD_CMN_ATTR_PACKING_COMMENTS

   *** Get PIM Product Common Attribute ItemClass/InfofloItemType/ProductStatus ***
   L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE_LIST = L_PRD_REC<246>
   L_TTL = DCOUNT(L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE_LIST, @VM)
   FOR L_CNT = 1 TO L_TTL
      IF NOT(INDEX("N|R|E|O|I", L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE_LIST<1,L_CNT>, 1)) THEN
         L_INFOFLO_HISTORICAL_CLASS_CODE = L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE_LIST<1,L_CNT>
         EXIT
      END ELSE
         L_INFOFLO_HISTORICAL_CLASS_CODE = ""
      END
   NEXT L_CNT
   L_PIM_PRD_CMN_ATTR_INFOFLO_ITEM_TYPE = L_PRD_REC<57>[1,1]  ;* Inventory Codes
   L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE   = L_PRD_REC<73>
   IF L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE = "" THEN
      L_PIM_PRD_CMN_ATTR_PRODUCT_STATUS  = "R"
      L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE = "P"
   END ELSE
      IF INDEX("N|R|E|O|I", L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE, 1) THEN
         L_PIM_PRD_CMN_ATTR_PRODUCT_STATUS = L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE
         IF (L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE = "E" OR L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE = "O") AND L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE # "" THEN
            L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE = L_INFOFLO_HISTORICAL_ITEM_CLASS_CODE
         END ELSE
            L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE = "P"
         END
      END ELSE
         L_PIM_PRD_CMN_ATTR_PRODUCT_STATUS  = "R"
      END
   END

   *** Get PIM Product Common Attribute ObsolescenceDate ***
   IF L_PIM_PRD_CMN_ATTR_PRODUCT_STATUS = "O" THEN  ;* obsolete product
      L_TTL = DCOUNT(L_PRD_REC<246>, @VM)  ;* class code history
      FOR L_CNT = 1 TO L_TTL
         IF L_PRD_REC<246,L_CNT> # "O" THEN
            L_PIM_PRD_CMN_ATTR_OBSOLESCENCE_DATE = OCONV(L_PRD_REC<244,L_CNT>, "D4-YMD[4,2,2]")
            EXIT
         END
         IF L_CNT = L_TTL THEN
            L_PIM_PRD_CMN_ATTR_OBSOLESCENCE_DATE = OCONV(L_PRD_REC<247,L_CNT>, "D4-YMD[4,2,2]")
         END
      NEXT L_CNT
   END ELSE
      L_PIM_PRD_CMN_ATTR_OBSOLESCENCE_DATE = ""
   END

   *** Get PIM Product Common Attribute UOMStandard ***
   IF INDEX("MR|LT|KG|", L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE, 1) THEN
      L_PIM_PRD_CMN_ATTR_UOM_STANDARD = "M"
   END ELSE
      IF INDEX("FT|SF|LB|", L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE, 1) THEN
         L_PIM_PRD_CMN_ATTR_UOM_STANDARD = "I"
      END ELSE
         L_PIM_PRD_CMN_ATTR_UOM_STANDARD = L_PRD_REC<263>
      END
   END

   *** Get PIM Alternate Product Code ***
   L_PRODUCT_SORT_KEY                   = L_PRD_REC<13>  ;* internal company product cross reference key
   L_PRODUCT_ATTRIBUTE_DESCRIPTIVE_CODE = L_PRD_REC<281>
   L_PRODUCT_CATALOG_NUMBER             = L_PRD_REC<302>
   BEGIN CASE
   CASE L_PRODUCT_MARKET_SEGMENT_CODE = "8" AND L_PRODUCT_ATTRIBUTE_DESCRIPTIVE_CODE # ""
      L_INFOFLO_ATTR_ENG_KEY = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*PART*ENG*":L_PRODUCT_ATTRIBUTE_DESCRIPTIVE_CODE
      READ L_INFOFLO_ATTR_REC_ENG FROM ITMATTRDET, L_INFOFLO_ATTR_ENG_KEY
      ON ERROR
         L_RTN_CD  = "B1020-ERROR-4-1"
         L_RTN_MSG = "Unable to read record ":L_INFOFLO_ATTR_ENG_KEY:" in file ITMATTRDET { ":STATUS():" }."
         GO B1020_EXIT
      END THEN
         L_PIM_PRD_CMN_ATTR_FRIATEC_PART_NUMBER = L_INFOFLO_ATTR_REC_ENG<2>  ;* get english metric by default
         IF L_PIM_PRD_CMN_ATTR_FRIATEC_PART_NUMBER = L_PRODUCT_CODE THEN
            L_PIM_PRD_CMN_ATTR_FRIATEC_PART_NUMBER = ""
         END
      END ELSE
         L_PIM_PRD_CMN_ATTR_FRIATEC_PART_NUMBER = ""  ;* N/A
      END
   CASE L_PRODUCT_MARKET_SEGMENT_CODE = "R" AND L_PRODUCT_ATTRIBUTE_DESCRIPTIVE_CODE # L_PRODUCT_SORT_KEY AND L_PRODUCT_CATALOG_NUMBER = ""
      L_INFOFLO_ATTR_ENG_KEY = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*C-PART*ENG*":L_PRODUCT_ATTRIBUTE_DESCRIPTIVE_CODE
      READ L_INFOFLO_ATTR_REC_ENG FROM ITMATTRDET, L_INFOFLO_ATTR_ENG_KEY
      ON ERROR
         L_RTN_CD  = "B1020-ERROR-4-2"
         L_RTN_MSG = "Unable to read record ":L_INFOFLO_ATTR_ENG_KEY:" in file ITMATTRDET { ":STATUS():" }."
         GO B1020_EXIT
      END THEN
         L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE = L_INFOFLO_ATTR_REC_ENG<2>  ;* get english metric by default
         IF L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE = L_PRODUCT_CODE THEN
            L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE = ""
         END
      END ELSE
         L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE = ""  ;* N/A
      END
   CASE L_PRODUCT_SORT_KEY # L_PRODUCT_CODE AND L_PRODUCT_LINE_COMPANY_CODE = "CPL"
      L_PIM_PRD_CMN_ATTR_CANPLAS_PART_NUMBER = L_PRODUCT_SORT_KEY
      IF L_PIM_PRD_CMN_ATTR_CANPLAS_PART_NUMBER = L_PRODUCT_CODE THEN
         L_PIM_PRD_CMN_ATTR_CANPLAS_PART_NUMBER = ""
      END
   CASE L_PRODUCT_SORT_KEY # L_PRODUCT_CODE AND L_PRODUCT_LINE_COMPANY_CODE = "IPX"
      L_PIM_PRD_CMN_ATTR_NACO_PART_NUMBER = L_PRODUCT_SORT_KEY
      IF L_PIM_PRD_CMN_ATTR_NACO_PART_NUMBER = L_PRODUCT_CODE THEN
         L_PIM_PRD_CMN_ATTR_NACO_PART_NUMBER = ""
      END
   CASE L_PRODUCT_CATALOG_NUMBER # ""
      L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE = L_PRODUCT_CATALOG_NUMBER
      IF L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE = L_PRODUCT_CODE THEN
         L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE = ""
      END
   CASE L_PRODUCT_CATALOG_NUMBER = ""
         ** Get alternate product code for customer cross reference code (SCE & SCEP) in ITMXRF attribute 3 if applicable **
      READ L_REC FROM ITMXRF, L_PRODUCT_CODE
      ON ERROR
         L_RTN_CD  = "B1020-ERROR-4-3"
         L_RTN_MSG = "Unable to read record ":L_PRODUCT_CODE:" in file ITMXRF { ":STATUS():" }."
         GO B1020_EXIT
      END THEN
         L_TTL = DCOUNT(L_REC<3>, @VM)
         FOR L_CNT = 1 TO L_TTL
            IF L_REC<3,L_CNT>"G0*1" = "SCE" THEN  ;* customer cross reference code SCE
               L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US = L_REC<3,L_CNT>"G1*1"
               IF L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US = L_PRODUCT_CODE THEN
                  L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US = ""
               END
               EXIT
            END ELSE
               L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US = ""  ;* N/A
            END
         NEXT L_CNT
         IF L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US = ""  THEN
            FOR L_CNT = 1 TO L_TTL
               IF L_REC<3,L_CNT>"G0*1" = "SCEP" THEN  ;* customer cross reference code SCEP
                  L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_CA = L_REC<3,L_CNT>"G1*1"
                  IF L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_CA = L_PRODUCT_CODE THEN
                     L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_CA = ""
                  END
                  EXIT
               END
            NEXT L_CNT
         END
      END ELSE
         CRT ">>> Record ":L_PRODUCT_CODE:" does not exist in file ITMXRF. <<<"
      END
   END CASE

   *** Get PIM LOV Countires Info - Product Country of Origin ***
   L_KEY = "ECC*":L_PIM_PRD_CMN_ATTR_COUNTRY_OF_ORIGIN_CODE
   READ L_REC FROM SYSTBL, L_KEY
   ON ERROR
      L_RTN_CD  = "B1060-ERROR-5"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
      GO B1060_EXIT
   END THEN
      FIND L_PIM_PRD_CMN_ATTR_COUNTRY_OF_ORIGIN_CODE IN L_PIM_PRD_LOV_COUNTRY_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
         ;* skip duplicate product country code
      END ELSE
         ** First PIM Countries LOV Code Value **
         L_PIM_PRD_LOV_COUNTRY_CODE_LIST       = L_PIM_PRD_CMN_ATTR_COUNTRY_OF_ORIGIN_CODE
         L_PIM_PRD_LOV_COUNTRY_DESC_ENG_L_LIST = L_REC<4>
         L_PIM_PRD_LOV_COUNTRY_DESC_FRN_L_LIST = L_REC<20>
      END
   END ELSE
      CRT ">>> Record ":L_KEY:" does not exist in file SYSTBL. <<<"
   END

   *** Get PIM Product PIMFLO Delta Info ***
   READ L_REC FROM PIMFLO, L_PRD_KEY
   ON ERROR
      L_RTN_CD  = "B1020-ERROR-6"
      L_RTN_MSG = "Unable to read record ":L_PRD_KEY:" in file PIMFLO { ":STATUS():" }."
      GO B1020_EXIT
   END THEN
      ** New Delta State (Current Run) **
      L_PIM_PRD_CMN_ATTR_UNIVERSAL_PART_NUMBER                  = L_REC<5>
      L_INFOFLO_PRODUCT_PLANT_CODE_LIST                         = L_REC<6>
      L_PIM_PRD_CMN_ATTR_HAS_COSTING_SETUP_FLAG                 = L_REC<7>

      ** Previous Delta State (Last Run) **
      L_INFOFLO_PRODUCT_LAST_MARKET_SEGMENT_CODE                = RAISE(RAISE(L_REC<1,1,6>))
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE_LIST       = RAISE(RAISE(RAISE(L_REC<1,3,1>)))
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST        = RAISE(RAISE(RAISE(L_REC<1,3,2>)))
      L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_NAME_LIST = RAISE(RAISE(RAISE(L_REC<1,3,3>)))
      L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_DESC_LIST = RAISE(RAISE(RAISE(L_REC<1,3,4>)))
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_ENG_LIST     = RAISE(RAISE(RAISE(L_REC<1,3,5>)))
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_FRN_LIST     = RAISE(RAISE(RAISE(L_REC<1,3,6>)))
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_EFFECTIVE_DATE_LIST     = RAISE(RAISE(RAISE(L_REC<1,3,7>)))
      L_LAST_PIM_PRD_PKG_ATTR_I2OF5_LIST                        = RAISE(RAISE(RAISE(L_REC<1,9,5>)))
   END ELSE
      ** No Delta State Exists for the Product **
      L_PIM_PRD_CMN_ATTR_UNIVERSAL_PART_NUMBER                  = ""
      L_INFOFLO_PRODUCT_PLANT_CODE_LIST                         = ""
      L_PIM_PRD_CMN_ATTR_HAS_COSTING_SETUP_FLAG                 = ""
      L_INFOFLO_PRODUCT_LAST_MARKET_SEGMENT_CODE                = ""
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE_LIST       = ""
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST        = ""
      L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_NAME_LIST = ""
      L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_DESC_LIST = ""
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_ENG_LIST     = ""
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_FRN_LIST     = ""
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_EFFECTIVE_DATE_LIST     = ""
      L_LAST_PIM_PRD_PKG_ATTR_I2OF5_LIST                        = ""
   END

   *** Get Product Price Per (Imperial/Metric)
   L_TTL = DCOUNT(L_PRD_REC<175>, @VM)
   FOR L_CNT = 1 TO L_TTL
      BEGIN CASE
      CASE L_PRD_REC<175,L_CNT> = "I"
         L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_I = L_PRD_REC<177,L_CNT>  ;* Imperial
      CASE L_PRD_REC<175,L_CNT> = "M"
         L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_M = L_PRD_REC<177,L_CNT>  ;* Metric
      END CASE
   NEXT L_CNT

   *** Accumulate PIM Product Object Common Attribute Info - PIMFLO<1,7> ***
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PRODUCT_CPN              ;* 1
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PRODUCT_CODE             ;* 2
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE         ;* 3
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_FRIATEC_PART_NUMBER      ;* 4
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_CANPLAS_PART_NUMBER      ;* 5
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_NACO_PART_NUMBER         ;* 6
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_CA   ;* 7
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US   ;* 8
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_UPC_CODE                 ;* 9
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_OEM_NUMBER               ;* 10
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_UNIVERSAL_PART_NUMBER    ;* 11
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_ENG       ;* 12
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_FRN       ;* 13
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_ENG       ;* 14
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_FRN       ;* 15
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_CREATION_DATE            ;* 16
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_OBSOLESCENCE_DATE        ;* 17
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_HAS_COSTING_SETUP_FLAG   ;* 18
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_I      ;* 19
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_M      ;* 20
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE          ;* 21
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PRODUCT_STATUS           ;* 22
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_INFOFLO_ITEM_TYPE        ;* 23
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_ABC_CATEGORY             ;* 24
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_ABC_CATEGORY_OVERRIDE    ;* 25
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_UOM_STANDARD             ;* 26
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE            ;* 27
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_BASE_UOM_DESC            ;* 28
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_BASE_UOM_TYPE            ;* 29
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_BASE_QTY_I               ;* 30
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_BASE_QTY_M               ;* 31
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_SHIPPING_UOM             ;* 32
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_SHIPPING_WEIGHT          ;* 33
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_COUNTRY_OF_ORIGIN_CODE   ;* 34
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PURCHASED_FROM_ALIAXIS   ;* 35
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_DG_CODE                  ;* 36
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_CELSIUS    ;* 37
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_FARENHEIT  ;* 38
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_NON_RET_NON_CANC         ;* 39
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_REBATE_MATRIX_CODE       ;* 40
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_WEIGHT_FACTOR            ;* 41
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_SCRAP_PERCENT            ;* 42
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_BELL_LENGTH              ;* 43
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_HAS_BELL_END             ;* 44
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_DESCRIPTION_TYPE         ;* 45
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_ROYALTY_FLAG             ;* 46
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_CODE ;* 47
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_NAME ;* 48
   L_CURRENT_DELTA_REC<1,7,-1> = L_PIM_PRD_CMN_ATTR_PACKING_COMMENTS         ;* 49

B1020_EXIT:
   RETURN


******************************************************************
* Internal Subroutine to Get PIM Product Specific Attribute Info *
******************************************************************

B1030_GET_PIM_PRODUCT_SPECIFIC_ATTRIBUTE_INFO:

   *** Setup Key Info for Each PIM Product Specific Attribute for Companies ***
   IF L_PRODUCT_MARKET_SEGMENT_CODE = "H" THEN  ;* Hamilton Kent Product
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter1M":@VM:"H-DIA-METRIC":@VM:L_PRD_REC<253>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "CutLength":@VM:"H-LENGTH":@VM:L_PRD_REC<254>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Material":@VM:"H-MATERIAL":@VM:L_PRD_REC<255>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "MfgMethod":@VM:"H-MFG-METHOD":@VM:L_PRD_REC<256>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "ProductType":@VM:"H-TYPE":@VM:L_PRD_REC<257>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "RoundEquivalent":@VM:"H-ROUND":@VM:L_PRD_REC<258>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "HCustomer":@VM:"H-CUSTOMER":@VM:L_PRD_REC<259>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Die":@VM:"H-DIE":@VM:L_PRD_REC<260>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "NominalVolume":@VM:"H-NOM-VOLUME":@VM:L_PRD_REC<261>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "MaximalVolume":@VM:"H-MAX-VOLUME":@VM:L_PRD_REC<262>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter1I":@VM:"H-DIA-IMPERIAL":@VM:L_PRD_REC<266>:@VM:"I"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Duro":@VM:"H-DURO":@VM:L_PRD_REC<267>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Application":@VM:"H-APPLICATION":@VM:L_PRD_REC<268>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "HCustomerSpecificInfo":@VM:"H-CUSTOMER-SPEC":@VM:L_PRD_REC<271>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Clamp":@VM:"H-CLAMP":@VM:L_PRD_REC<273>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "NFSCompound":@VM:"H-NFS-COMPOUND":@VM:L_PRD_REC<274>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "AdditionalInfo":@VM:"H-ADD-INFO":@VM:L_PRD_REC<275>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Hoop":@VM:"H-HOOP":@VM:L_PRD_REC<276>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Mold":@VM:"H-MOLD":@VM:L_PRD_REC<277>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "PreformDie":@VM:"H-PREFORM-DIE":@VM:L_PRD_REC<278>:@VM:"M"
   END ELSE  ;* IPEX Product
      IF L_PRODUCT_MARKET_SEGMENT_CODE = "R" THEN  ;* Canplas Product
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Color":@VM:"C-COLOR":@VM:L_PRD_REC<260>:@VM:"M"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "FeatureA":@VM:"C-FEATURE":@VM:L_PRD_REC<293>:@VM:"M"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Material":@VM:"C-MATERIAL":@VM:L_PRD_REC<255>:@VM:"M"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "ProductType":@VM:"C-TYPE":@VM:L_PRD_REC<257>:@VM:"M"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "SizeI":@VM:"C-SIZE":@VM:L_PRD_REC<285>:@VM:"I"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "SizeM":@VM:"C-SIZE":@VM:L_PRD_REC<285>:@VM:"M"
      END ELSE  ;* IPEX Inc Product
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Color":@VM:"COLOR":@VM:L_PRD_REC<260>:@VM:"M"
         IF L_PRD_REC<293> # "" THEN
            L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "FeatureA":@VM:"FEATURES":@VM:L_PRD_REC<293>:@VM:"M"
         END ELSE
            L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "FeatureA":@VM:"FEATUREA":@VM:L_PRD_REC<262>:@VM:"M"
         END
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Material":@VM:"MATERIAL":@VM:L_PRD_REC<255>:@VM:"M"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "ProductType":@VM:"TYPE":@VM:L_PRD_REC<257>:@VM:"M"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "SizeI":@VM:"SIZE":@VM:L_PRD_REC<285>:@VM:"I"
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "SizeM":@VM:"SIZE":@VM:L_PRD_REC<285>:@VM:"M"
      END
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Class":@VM:"CLASS":@VM:L_PRD_REC<256>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Certification":@VM:"CERTIFICATION":@VM:L_PRD_REC<258>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Connection":@VM:"CONNECTION":@VM:L_PRD_REC<259>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Angle":@VM:"ANGLE":@VM:L_PRD_REC<267>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Component":@VM:"COMPONENT":@VM:L_PRD_REC<271>:@VM:"M"
      IF TRIM(L_PRD_REC<278>) # "" THEN
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter1I":@VM:"LENGTHT":@VM:L_PRD_REC<278>:@VM:"I"
      END ELSE
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter1I":@VM:"DIAMETERS1":@VM:L_PRD_REC<266>:@VM:"I"
      END
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter2I":@VM:"DIAMETERS2":@VM:L_PRD_REC<272>:@VM:"I"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter3I":@VM:"DIAMETERS3":@VM:L_PRD_REC<291>:@VM:"I"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter4I":@VM:"DIAMETERS4":@VM:L_PRD_REC<292>:@VM:"I"
      IF TRIM(L_PRD_REC<278>) # "" THEN
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter1M":@VM:"LENGTHT":@VM:L_PRD_REC<278>:@VM:"M"
      END ELSE
         L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter1M":@VM:"DIAMETERS1":@VM:L_PRD_REC<266>:@VM:"M"
      END
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter2M":@VM:"DIAMETERS2":@VM:L_PRD_REC<272>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter3M":@VM:"DIAMETERS3":@VM:L_PRD_REC<291>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Diameter4M":@VM:"DIAMETERS4":@VM:L_PRD_REC<192>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "DimensionalStandard":@VM:"DIMENSIONAL":@VM:L_PRD_REC<273>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "FeatureB":@VM:"FEATUREB":@VM:L_PRD_REC<274>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Function":@VM:"FUNCTION":@VM:L_PRD_REC<275>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "GlobeColor":@VM:"GLOBEC":@VM:L_PRD_REC<276>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "GlobeMaterial":@VM:"GLOBEM":@VM:L_PRD_REC<277>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "LengthI":@VM:"LENGTH":@VM:L_PRD_REC<254>:@VM:"I"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "LengthM":@VM:"LENGTH":@VM:L_PRD_REC<254>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "MountType":@VM:"MOUNT":@VM:L_PRD_REC<279>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Options":@VM:"OPTIONS":@VM:L_PRD_REC<280>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "RadiusI":@VM:"RADIUS":@VM:L_PRD_REC<282>:@VM:"I"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "RadiusM":@VM:"RADIUS":@VM:L_PRD_REC<282>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "SealMaterial":@VM:"SEAL":@VM:L_PRD_REC<283>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Series":@VM:"SERIES":@VM:L_PRD_REC<284>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Shape":@VM:"C-SHAPE":@VM:L_PRD_REC<295>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "ThicknessI":@VM:"THICKNESS":@VM:L_PRD_REC<286>:@VM:"I"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "ThicknessM":@VM:"THICKNESS":@VM:L_PRD_REC<286>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Torque":@VM:"TORQUE":@VM:L_PRD_REC<287>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Voltage":@VM:"VOLTAGE":@VM:L_PRD_REC<289>:@VM:"M"
      L_PIM_PRD_SPC_ATTR_MATRIX<-1> = "Watt":@VM:"WATT":@VM:L_PRD_REC<290>:@VM:"M"
   END

   *** Retrieve Per PIM Product Specific Attribute Key/Value ***
   L_TTL = DCOUNT(L_PIM_PRD_SPC_ATTR_MATRIX, @AM)
   FOR L_CNT = 1 TO L_TTL
      *** Get Key Info ***
      L_PRD_SPC_ATTR_PIM_ID         = L_PIM_PRD_SPC_ATTR_MATRIX<L_CNT,1>
      L_PRD_SPC_ATTR_NAME           = L_PIM_PRD_SPC_ATTR_MATRIX<L_CNT,2>
      L_PRD_SPC_ATTR_VALUE          = L_PIM_PRD_SPC_ATTR_MATRIX<L_CNT,3>
      L_PRD_SPC_ATTR_MEASUREMENT_CD = L_PIM_PRD_SPC_ATTR_MATRIX<L_CNT,4>
      IF L_PRD_SPC_ATTR_VALUE # "" THEN
         *** Context Info: English ***
         L_INFOFLO_ATTR_ENG_KEY = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*":L_PRD_SPC_ATTR_NAME:"*ENG*":L_PRD_SPC_ATTR_VALUE
         READ L_INFOFLO_ATTR_REC_ENG FROM ITMATTRDET, L_INFOFLO_ATTR_ENG_KEY
         ON ERROR
            L_RTN_CD  = "B1030-ERROR-1"
            L_RTN_MSG = "Unable to read record ":L_INFOFLO_ATTR_ENG_KEY:" in file ITMATTRDET { ":STATUS():" }."
            GO B1030_EXIT
         END THEN
            *** Context Info: French ***
            L_INFOFLO_ATTR_FRN_KEY = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*":L_PRD_SPC_ATTR_NAME:"*FRN*":L_PRD_SPC_ATTR_VALUE
            READ L_INFOFLO_ATTR_REC_FRN FROM ITMATTRDET, L_INFOFLO_ATTR_FRN_KEY
            ON ERROR
               L_RTN_CD  = "B1030-ERROR-2"
               L_RTN_MSG = "Unable to read record ":L_INFOFLO_ATTR_FRN_KEY:" in file ITMATTRDET { ":STATUS():" }."
               GO B1030_EXIT
            END THEN
               IF L_PRD_SPC_ATTR_MEASUREMENT_CD = "I" THEN
                  L_PIM_PRD_SPC_ATTR_LIST<-1> = L_PRD_SPC_ATTR_PIM_ID:@VM:"en-US":@VM:L_INFOFLO_ATTR_REC_ENG<1>:@VM:"fr-CA":@VM:L_INFOFLO_ATTR_REC_FRN<1>  ;* Imperial
               END ELSE
                  L_PIM_PRD_SPC_ATTR_LIST<-1> = L_PRD_SPC_ATTR_PIM_ID:@VM:"en-US":@VM:L_INFOFLO_ATTR_REC_ENG<2>:@VM:"fr-CA":@VM:L_INFOFLO_ATTR_REC_FRN<2>  ;* Metric
               END
            END ELSE
               L_PIM_PRD_SPC_ATTR_LIST<-1> = L_PRD_SPC_ATTR_PIM_ID:@VM:"en-US":@VM:"":@VM:"fr-CA":@VM:""  ;* N/A
            END
         END ELSE
            L_PIM_PRD_SPC_ATTR_LIST<-1> = L_PRD_SPC_ATTR_PIM_ID:@VM:"en-US":@VM:"":@VM:"fr-CA":@VM:""  ;* N/A
         END
      END ELSE
         L_PIM_PRD_SPC_ATTR_LIST<-1> = L_PRD_SPC_ATTR_PIM_ID:@VM:"en-US":@VM:"":@VM:"fr-CA":@VM:""  ;* N/A
      END
   NEXT L_CNT

   *** Accumulate PIM Product Object Specific Attribute Info - PIMFLO<1,8> ***
   L_CURRENT_DELTA_REC<1,8,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SPC_ATTR_LIST)))  ;* 1

B1030_EXIT:
   RETURN


****************************************************************
* Internal Subroutine to Get PIM Product Source Reference Info *
****************************************************************

B1040_GET_PIM_PRODUCT_SOURCE_REFERENCE_INFO:

   *** The list price for a product could be hard deleted (i.e. the price record for the product is completed removed in PRICEDET and/or PRICEHST,     ***
   *** so we need to sync with STEP to wipe out price info for the ProductCompany object by reference back to the last delta price state in this case. ***
   L_INC = 0
   L_TTL = DCOUNT(L_INFOFLO_PRODUCT_LAST_LIST_PRICE_EFFECTIVE_DATE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      *** For REGION-06 & REGION-11 -> has to reverse back to companyt 01 in case of the price delete) ***
      L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE = L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE_LIST<L_CNT>
      IF L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST<L_CNT> = "REGION-06" OR L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST<L_CNT> = "REGION-11" THEN
         IF L_INFOFLO_PRODUCT_LAST_MARKET_SEGMENT_CODE = "3" THEN  ;* electrical product
            L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE = "01"  ;* reverse back to company 01
         END
      END
      L_PRICEDET_KEY = L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE:"*":L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST<L_CNT>:"*":L_PRD_KEY
      READ L_REC FROM PRICEDET, L_PRICEDET_KEY
      ON ERROR
         L_RTN_CD  = "B1040-ERROR-1"
         L_RTN_MSG = "Unable to read record ":L_PRICEDET_KEY:" in file PRICEDET { ":STATUS():" }."
         GO B1040_EXIT
      END THEN
         CONTINUE  ;* skip if the list price for the product exists
      END ELSE
         IF L_INFOFLO_PRODUCT_LAST_LIST_PRICE_EFFECTIVE_DATE_LIST<L_CNT> # "" THEN  ;* list price for the product has been hard deleted
            IF L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE = "" THEN
               CRT "==> Unable to retrieve list price company code from previous delta state."
               CONTINUE  ;* skipped
            END
            IF L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST<L_CNT> = "" THEN
               CRT "==> Unable to retrieve list price region name from previous delta state."
               CONTINUE  ;* skipped
            END
            L_INC += 1
            L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST<L_INC>                  = L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE                    ;* 1
            L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE_LIST<L_INC>            = L_INFOFLO_PRODUCT_LAST_LIST_PRICE_REGION_CODE_LIST<L_CNT>         ;* 2
            L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_NAME_LIST<L_INC> = L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_NAME_LIST<L_CNT>  ;* 3
            L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_DESC_LIST<L_INC> = L_INFOFLO_PRODUCT_LAST_COMPANY_TRADE_PRICE_LIST_DESC_LIST<L_CNT>  ;* 4
            L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG_LIST<L_INC>        = L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_ENG_LIST<L_CNT>      ;* 5
            L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN_LIST<L_INC>        = L_INFOFLO_PRODUCT_LAST_LIST_PRICE_BRAND_NAME_FRN_LIST<L_CNT>      ;* 6
            L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC>         = ""                                                                ;* 7
            L_PIM_PRD_CURRENT_LIST_PRICE_LIST<L_INC>                        = ""                                                                ;* 8
            L_PIM_PRD_FUTURE_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC>          = ""                                                                ;* 9
            L_PIM_PRD_FUTURE_LIST_PRICE_LIST<L_INC>                         = ""                                                                ;* 10
            L_PIM_PRD_PRICE_PER_LIST<L_INC>                                 = ""                                                                ;* 11
            L_PIM_PRD_PRICE_CURRENCY_CODE_LIST<L_INC>                       = ""                                                                ;* 12
            L_PIM_PRD_LOV_CURRENCY_CODE_LIST<L_INC>                         = ""                                                                ;* 13
            L_PIM_PRD_LOV_CURRENCY_DESC_ENG_L_LIST<L_INC>                   = ""                                                                ;* 14
            L_PIM_PRD_LOV_CURRENCY_DESC_FRN_L_LIST<L_INC>                   = ""                                                                ;* 15
            L_PIM_PRD_SRC_PRODUCT_COMPANY_KEY_LIST<L_INC>                   = L_PRODUCT_CODE:"-":L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE
         END
      END
   NEXT L_CNT

   *** Get PIM ProductCompany Object Info ***
   L_PRICEDET_KEY_TEST_LIST<-1> = "01*REGION-06*":L_PRD_KEY   ;* IPX
   L_PRICEDET_KEY_TEST_LIST<-1> = "01*REGION-11*":L_PRD_KEY   ;* IPX
   L_PRICEDET_KEY_TEST_LIST<-1> = "02*REGION-33*":L_PRD_KEY   ;* IPX
   L_PRICEDET_KEY_TEST_LIST<-1> = "03*REGION-51*":L_PRD_KEY   ;* IPX
   L_PRICEDET_KEY_TEST_LIST<-1> = "05*REGION-84*":L_PRD_KEY   ;* HMK
   L_PRICEDET_KEY_TEST_LIST<-1> = "15*REGION-81*":L_PRD_KEY   ;* HMK
   L_PRICEDET_KEY_TEST_LIST<-1> = "02*C-US-LIST*":L_PRD_KEY   ;* CPL
   L_PRICEDET_KEY_TEST_LIST<-1> = "41*C-CDN-LIST*":L_PRD_KEY  ;* CPL
   L_TEST_LIST = ""
   L_INC = DCOUNT(L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST, @AM)
   L_TTL = DCOUNT(L_PRICEDET_KEY_TEST_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_PRICEDET_KEY = L_PRICEDET_KEY_TEST_LIST<L_CNT>
      READ L_REC FROM PRICEDET, L_PRICEDET_KEY
      ON ERROR
         L_RTN_CD  = "B1040-ERROR-2"
         L_RTN_MSG = "Unable to read record ":L_PRICEDET_KEY:" in file PRICEDET { ":STATUS():" }."
         GO B1040_EXIT
      END THEN
         *** Get PIM ProductCompany Key Info ***
         L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = L_PRICEDET_KEY"G0*1"
         L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE  = L_PRICEDET_KEY"G1*1"
         L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_NAME   = L_REC<10>
         L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_DESC   = TRIM(L_REC<7,3>"G1:1")
         BEGIN CASE
         CASE L_PRODUCT_LINE_COMPANY_CODE = "IPX"
            BEGIN CASE
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "REGION-06"
               IF L_PRODUCT_MARKET_SEGMENT_CODE # "3" THEN  ;* ELECTRICAL
                  L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "01"
               END ELSE
                  L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "16"
               END
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<261>
               L_TEST_LIST<-1> = L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "REGION-11" AND L_PRODUCT_MARKET_SEGMENT_CODE = "3"
               FIND "REGION-06" IN L_TEST_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                  CONTINUE ;* skip if REGION-06 exists
               END ELSE
                  L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = "16"
                  L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<261>
               END
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "REGION-33" AND L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = "02"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = "02"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<269>
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "REGION-51" AND L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = "03"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = "03"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<270>
            CASE 1
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = ""
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = ""
               L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_NAME = ""
               L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_DESC = ""
            END CASE
         CASE L_PRODUCT_LINE_COMPANY_CODE = "HMK"
            BEGIN CASE
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "REGION-84" AND L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = "05"  ;* HAMILTON KENT LLC
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = "05"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<272>
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "REGION-81" AND L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = "15"  ;* HAMILTON KENT INC.
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = "15"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<272>
            CASE 1
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = ""
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = ""
               L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_NAME = ""
               L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_DESC = ""
            END CASE
         CASE L_PRODUCT_LINE_COMPANY_CODE = "CPL"
            BEGIN CASE
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "C-US-LIST" AND L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = "02"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = "02"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<294>
            CASE L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE = "C-CDN-LIST" AND L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = "41"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = "41"
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = L_PRD_REC<294>
            CASE 1
               L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = ""
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = ""
               L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_NAME  = ""
               L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_DESC  = ""
            END CASE
         CASE 1
            L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE       = ""
            L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE = ""
            L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_NAME  = ""
            L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_DESC  = ""
         END CASE

         IF L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "" THEN
            CONTINUE  ;* no product company found, skip it
         END ELSE
            L_INC += 1
         END

         FIND L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE IN L_INFOFLO_PRODUCT_LAST_LIST_PRICE_COMPANY_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
            L_PIM_PRD_SRC_NEW_PRODUCT_COMPANY_CODE_FLAG_LIST<L_INC> = "N"
         END ELSE
            L_PIM_PRD_SRC_NEW_PRODUCT_COMPANY_CODE_FLAG_LIST<L_INC> = "Y"
         END
         L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST<L_INC>                  = L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE
         L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE_LIST<L_INC>            = L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE
         L_PIM_PRD_SRC_PRODUCT_COMPANY_KEY_LIST<L_INC>                   = L_PRODUCT_CODE:"-":L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE
         L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_NAME_LIST<L_INC> = L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_NAME
         L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_DESC_LIST<L_INC> = L_INFOFLO_PRODUCT_TRADE_PRICE_LIST_DESC

         *** Get PIM ProductCompany List Price Effective Date / List Price / Price Per, ***
         *** if PRICEDET record has date in past (based on today's date) then price is  ***
         *** current and there is no future price. If record date is in future, then    ***
         *** get current from PRICEHIST.                                                ***
         L_INFOFLO_PRODUCT_LIST_PRICE_EFFECTIVE_DATE         = L_REC<1>
         L_INFOFLO_PRODUCT_CURRENT_LIST_PRICE                = OCONV(L_REC<3,1>, "MD3")
         L_INFOFLO_PRODUCT_HISTORY_LIST_PRICE_EFFECTIVE_DATE = L_REC<9,1> ;* last list price effective date
         L_INFOFLO_PRODUCT_PRICE_PER                         = L_REC<34>
         IF L_INFOFLO_PRODUCT_LIST_PRICE_EFFECTIVE_DATE <= DATE() THEN  ;* current list price effective date is not yet expired and no proposed future price
            L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC> = OCONV(L_INFOFLO_PRODUCT_LIST_PRICE_EFFECTIVE_DATE, "D4-YMD[4,2,2]")
            L_PIM_PRD_CURRENT_LIST_PRICE_LIST<L_INC>                = L_INFOFLO_PRODUCT_CURRENT_LIST_PRICE
            L_PIM_PRD_FUTURE_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC>  = ""  ;* no future list price
            L_PIM_PRD_FUTURE_LIST_PRICE_LIST<L_INC>                 = ""  ;* no future list price
            IF L_INFOFLO_PRODUCT_PRICE_PER # "" THEN
               L_PIM_PRD_PRICE_PER_LIST<L_INC> = L_INFOFLO_PRODUCT_PRICE_PER
            END ELSE
               IF L_PIM_PRD_CMN_ATTR_BASE_UOM_TYPE = "I" THEN
                  L_PIM_PRD_PRICE_PER_LIST<L_INC> = L_PRD_REC<177,1>  ;* Imperial
               END ELSE
                  L_PIM_PRD_PRICE_PER_LIST<L_INC> = L_PRD_REC<177,2>  ;* Metric
               END
            END
         END ELSE  ;* current list price effective date is either already expired or there is proposed future price found, so look for current list price in PRICEHST if applicable and get future list price in PRICEDET (i.e. future list price has been rolled over as the current list price on the future price effective date)
            L_PIM_PRD_FUTURE_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC> = OCONV(L_INFOFLO_PRODUCT_LIST_PRICE_EFFECTIVE_DATE, "D4-YMD[4,2,2]")
            L_PIM_PRD_FUTURE_LIST_PRICE_LIST<L_INC>                = L_INFOFLO_PRODUCT_CURRENT_LIST_PRICE
            IF L_INFOFLO_PRODUCT_HISTORY_LIST_PRICE_EFFECTIVE_DATE # "" THEN
               L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE = L_PRICEDET_KEY"G0*1"
               L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE  = L_PRICEDET_KEY"G1*1"
               L_PRICEHST_KEY = L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE:"*":L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE:"*":L_PRD_KEY:"*":L_INFOFLO_PRODUCT_HISTORY_LIST_PRICE_EFFECTIVE_DATE
               READ L_REC FROM PRICEHST, L_PRICEHST_KEY
               ON ERROR
                  L_RTN_CD  = "B1040-ERROR-3"
                  L_RTN_MSG = "Unable to read record ":L_KEY:" in file PRICEHST { ":STATUS():" }."
                  GO B1040_EXIT
               END THEN
                  L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC> = OCONV(L_INFOFLO_PRODUCT_HISTORY_LIST_PRICE_EFFECTIVE_DATE, "D4-YMD[4,2,2]")
                  L_PIM_PRD_CURRENT_LIST_PRICE_LIST<L_INC>                = OCONV(L_REC<3,1>, "MD3")
                  L_PIM_PRD_PRICE_PER_LIST<L_INC>                         = L_REC<12>
               END ELSE
                  L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC> = ""  ;*  N/A
                  L_PIM_PRD_CURRENT_LIST_PRICE_LIST<L_INC>                = ""  ;*  N/A
                  L_PIM_PRD_PRICE_PER_LIST<L_INC>                         = ""  ;*  N/A
                  FIND L_PRICEHST_KEY IN L_ERROR_CASE1_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                     ;* skip duplicate occurrence(s)
                  END ELSE
                     L_ERROR_CASE1_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_PRICEHST_KEY
                  END
                  CRT ">>> Record ":L_PRICEHST_KEY:" does not exist in file PRICEHST (#1: Missing Product Price). <<<"
                  CONTINUE  ;* skipped
               END
            END ELSE
               L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST<L_INC> = ""  ;*  N/A
               L_PIM_PRD_CURRENT_LIST_PRICE_LIST<L_INC>                = ""  ;*  N/A
               L_PIM_PRD_PRICE_PER_LIST<L_INC>                         = ""  ;*  N/A
            END
         END
      END ELSE
         CONTINUE  ;* skip if no list price info found for the product, or it could has list price in history but already been hard deleted
      END

      *** Get PIM ProductCompany Currency Info / LOV Currencies ***
      L_PRICEHDR_KEY = L_INFOFLO_PRODUCT_LIST_PRICE_COMPANY_CODE:"*":L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE
      READ L_REC FROM PRICEHDR, L_PRICEHDR_KEY
      ON ERROR
         L_RTN_CD  = "B1040-ERROR-4-1"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file PRICEHDR { ":STATUS():" }."
         GO B1040_EXIT
      END THEN
         L_PIM_PRD_PRICE_CURRENCY_CODE = TRIM(L_REC<2>)
         IF L_PIM_PRD_PRICE_CURRENCY_CODE # "" THEN
            L_PIM_PRD_PRICE_CURRENCY_CODE_LIST<L_INC> = L_PIM_PRD_PRICE_CURRENCY_CODE
            L_KEY = "CUR*":L_PIM_PRD_PRICE_CURRENCY_CODE
            READ L_REC FROM SYSTBL, L_KEY
            ON ERROR
               L_RTN_CD  = "B1040-ERROR-5-1"
               L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
               GO B1040_EXIT
            END THEN
               FIND L_PIM_PRD_PRICE_CURRENCY_CODE IN L_PIM_PRD_LOV_CURRENCY_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                  ;* skip duplicate currency
               END ELSE
                  L_INC = DCOUNT(L_PIM_PRD_LOV_CURRENCY_CODE_LIST, @AM) + 1
                  L_PIM_PRD_LOV_CURRENCY_CODE_LIST<L_INC>       = L_PIM_PRD_PRICE_CURRENCY_CODE
                  L_PIM_PRD_LOV_CURRENCY_DESC_ENG_L_LIST<L_INC> = L_REC<4>
                  L_PIM_PRD_LOV_CURRENCY_DESC_FRN_L_LIST<L_INC> = L_REC<20>
               END
            END ELSE
               L_RTN_CD  = "B1040-ERROR-5-2"
               L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
               GO B1040_EXIT
            END
         END
      END ELSE
         L_RTN_CD  = "B1040-ERROR-4-2"
         L_RTN_MSG = "Record ":L_PRICEHDR_KEY:" does not exist in file PRICEHDR."
         GO B1040_EXIT
      END

      *** Get PIM Product Attribute Brand Info ***
      IF NOT(INDEX(L_PRODUCT_CATEGORY_NAME, "_UNKNOWN", 1)) AND L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE # "" AND L_PRODUCT_ATTRIBUTE_GROUP_CODE # "" AND L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE # "" THEN
         BEGIN CASE
         CASE L_PRODUCT_LINE_COMPANY_CODE = "IPX"
            BEGIN CASE
            CASE L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "01" OR L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "16"
               L_KEY_ENG = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*BRAND01*ENG*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
               L_KEY_FRN = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*BRAND01*FRN*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
            CASE L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "02"
               L_KEY_ENG = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*BRAND02*ENG*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
               L_KEY_FRN = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*BRAND02*FRN*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
            CASE L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "03"
               L_KEY_ENG = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*BRAND03*ENG*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
               L_KEY_FRN = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*BRAND03*FRN*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
            END CASE
         CASE L_PRODUCT_LINE_COMPANY_CODE = "HMK"
            BEGIN CASE
            CASE L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "05"
               L_KEY_ENG = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*H-TRADE-NAME*ENG*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
               L_KEY_FRN = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*H-TRADE-NAME*FRN*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
            CASE L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "15"
               L_KEY_ENG = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*H-TRADE-NAME*ENG*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
               L_KEY_FRN = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*H-TRADE-NAME*FRN*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
            END CASE
         CASE L_PRODUCT_LINE_COMPANY_CODE = "CPL"
            BEGIN CASE
            CASE L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "02" OR L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE = "41"
               L_KEY_ENG = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*C-BRAND*ENG*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
               L_KEY_FRN = L_PRODUCT_MARKET_SEGMENT_CODE:"*":L_PRODUCT_ATTRIBUTE_GROUP_CODE:"*C-BRAND*FRN*":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_CODE
            END CASE
         END CASE

         *** Get PIM Product Company Brand Classification Parent ID ***
         L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_PARENT_ID_LIST<L_INC> = L_PRODUCT_LINE_COMPANY_CODE:"_BRANDS"

         *** Get Product Brand (English) ***
         READ L_REC FROM ITMATTRDET, L_KEY_ENG
         ON ERROR
            L_RTN_CD  = "B1040-ERROR-5"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMATTRDET { ":STATUS():" }."
            GO B1040_EXIT
         END THEN
            L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG = L_REC<2> ;* default to ENG Metric
            IF L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG # "" THEN
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG_LIST<-1> = L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_ID                = L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG
               SWAP " " WITH "_" IN L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_ID
               L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_ID_LIST<L_INC> = "BRD_":L_PRODUCT_LINE_COMPANY_CODE:"_":L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_ID
               *** Get Product Brand (French) ***
               READ L_REC FROM ITMATTRDET, L_KEY_FRN
               ON ERROR
                  L_RTN_CD  = "B1040-ERROR-6"
                  L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMATTRDET { ":STATUS():" }."
                  GO B1040_EXIT
               END THEN
                  L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN = L_REC<2> ;* default to FRN Metric
                  IF L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN # "" THEN
                     L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN_LIST<-1> = L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN
                  END ELSE
                     L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN_LIST<-1> = "NIL"
                  END
               END ELSE
                  FIND L_PRD_KEY:" -> ":L_KEY_FRN IN L_ERROR_CASE2_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                     ;* skip duplicate occurrence(s)
                  END ELSE
                     L_ERROR_CASE2_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY_FRN
                  END
                  CRT ">>> Record ":L_KEY_FRN:" does not exist in file ITMATTRDET (#2: Missing Product Brand - French). <<<"
                  CONTINUE  ;* skipped
               END
            END ELSE
               FIND L_PRD_KEY:" -> ":L_KEY_ENG IN L_ERROR_CASE2_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                  ;* skip duplicate occurrence(s)
               END ELSE
                  L_ERROR_CASE2_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY_ENG
               END
               CRT ">>> Record ":L_KEY_ENG:" exists in file ITMATTRDET, but the product brand english name is not defined. (#2: Missing Product Brand - English). <<<"
               CONTINUE  ;* skipped
            END
         END ELSE
            FIND L_PRD_KEY:" -> ":L_KEY_ENG IN L_ERROR_CASE2_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
               ;* skip duplicate occurrence(s)
            END ELSE
               L_ERROR_CASE2_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY_ENG
            END
            CRT ">>> Record ":L_KEY_ENG:" does not exist in file ITMATTRDET (#2: Missing Product Brand - English). <<<"
            CONTINUE  ;* skipped
         END
      END ELSE
         ;* no brand info for the product
      END
   NEXT L_CNT

   *** Accumulate PIM ProductCompany Object Info - PIMFLO<1,3> ***
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST)))                   ;* 1
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_INFOFLO_PRODUCT_LIST_PRICE_REGION_CODE_LIST)))             ;* 2
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_NAME_LIST)))  ;* 3
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_DESC_LIST)))  ;* 4
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_ENG_LIST)))         ;* 5
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN_LIST)))         ;* 6
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST)))          ;* 7
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_CURRENT_LIST_PRICE_LIST)))                         ;* 8
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_FUTURE_LIST_PRICE_EFFECTIVE_DATE_LIST)))           ;* 9
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_FUTURE_LIST_PRICE_LIST)))                          ;* 10
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PRICE_PER_LIST)))                                  ;* 11
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PRICE_CURRENCY_CODE_LIST)))                        ;* 12
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_LOV_CURRENCY_CODE_LIST)))                          ;* 13
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_LOV_CURRENCY_DESC_ENG_L_LIST)))                    ;* 14
   L_CURRENT_DELTA_REC<1,3,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_LOV_CURRENCY_DESC_FRN_L_LIST)))                    ;* 15

   *** Get PIM ProductPlant/ProductSupplier Object Source Reference Info (Manufactured/Purchased Product -> Curretnly in Supply-Chain) ***
   L_TTL = DCOUNT(L_INFOFLO_PRODUCT_PLANT_CODE_LIST, @VM)  ;* BOM Warehouse List (M or P)
   FOR L_CNT = 1 TO L_TTL
      L_INFOFLO_PRODUCT_PLANT_CODE = L_INFOFLO_PRODUCT_PLANT_CODE_LIST<1,L_CNT>
      L_KEY = L_INFOFLO_PRODUCT_PLANT_CODE:"*":L_PRD_KEY
      READ L_REC FROM ITMPLTMST, L_KEY
      ON ERROR
         L_RTN_CD  = "B1040-ERROR-7"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMPLTMST { ":STATUS():" }."
         GO B1040_EXIT
      END THEN
         L_INFOFLO_PRODUCT_MFG_PURCH_FLAG            = L_REC<8>
         L_INFOFLO_PRODUCT_MTO_MTS_CODE              = L_REC<100>
         L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_CODE = L_REC<17>
         BEGIN CASE
            ** Get PIM ProductPlant Object Source Reference Info (Manufactured Product) **
         CASE L_INFOFLO_PRODUCT_MFG_PURCH_FLAG = "M" ;* Manufactured Product
            L_INC = DCOUNT(L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST, @AM) + 1
            L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST<L_INC>                 = L_INFOFLO_PRODUCT_PLANT_CODE
            L_PIM_PRD_SRC_PRODUCT_PLANT_KEY_LIST<L_INC>                  = L_PRODUCT_CODE:"-":L_INFOFLO_PRODUCT_PLANT_CODE
            L_PIM_PRD_SRC_PRODUCT_PLANT_INACTIVE_SOURCE_FLAG_LIST<L_INC> = "N"  ;* in supply-chain, active source
            IF L_INFOFLO_PRODUCT_MTO_MTS_CODE = "O" THEN L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_STOCK_TYPE_LIST<L_INC> = "MTO"
            IF L_INFOFLO_PRODUCT_MTO_MTS_CODE = "S" THEN L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_STOCK_TYPE_LIST<L_INC> = "MTS"
            IF L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_CODE # "" THEN
               L_KEY = "MPS*":L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_CODE
               READV L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_NAME FROM SYSTBL, L_KEY, 4
               ON ERROR
                  L_RTN_CD  = "B1040-ERROR-8-1"
                  L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
                  GO B1040_EXIT
               END ELSE
                  L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_NAME = ""
               END
            END ELSE
               L_KEY = "MPS*":L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_CODE
               READV L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_NAME FROM SYSTBL, L_KEY, 4
               ON ERROR
                  L_RTN_CD  = "B1040-ERROR-8-2"
                  L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
                  GO B1040_EXIT
               END ELSE
                  L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_NAME = ""
               END
            END
            L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_PLANNER_BUYER_NAME_LIST<L_INC> = L_INFOFLO_PRODUCT_SOURCE_PLANNER_BUYER_NAME

               * Get Plant Name *
            L_KEY = "WHS*":L_INFOFLO_PRODUCT_PLANT_CODE  ;* plant is always a warehouse but not vice versa
            READ L_REC FROM SYSTBL, L_KEY
            ON ERROR
               L_RTN_CD  = "B1040-ERROR-9-1"
               L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
               GO B1040_EXIT
            END THEN
               L_PIM_PRD_SRC_PRODUCT_PLANT_NAME_LIST<L_INC> = L_REC<4>
            END ELSE
               L_RTN_CD  = "B1040-ERROR-9-2"
               L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
               GO B1040_EXIT
            END

               * Get Plant Country Code *
            L_KEY = L_INFOFLO_PRODUCT_PLANT_CODE
            READ L_REC FROM WHSMST, L_KEY
            ON ERROR
               L_RTN_CD  = "B1040-ERROR-10-1"
               L_RTN_MSG = "Unable to read record ":L_KEY:" in file WHSMST { ":STATUS():" }."
               GO B1040_EXIT
            END THEN
               L_PIM_PRD_SRC_PRODUCT_PLANT_COUNTRY_CODE_LIST<L_INC> = L_REC<42>
            END ELSE
               L_RTN_CD  = "B1040-ERROR-10-2"
               L_RTN_MSG = "Record ":L_KEY:" does not exist in file WHSMST."
               GO B1040_EXIT
            END

               * If Infoflo M/P flag = M (manufactured product),             *
               * then send all plants in supply chain as primary source;     *
               * and send all suppliers in supply chain as alternate sources *
            IF L_PIM_PRD_CMN_ATTR_PRIMARY_SOURCE_TYPE = "M" THEN
               L_PIM_PRD_SRC_PRODUCT_PLANT_PRIMARY_SOURCE_FLAG_LIST<L_INC> = "Y"
            END ELSE
               L_PIM_PRD_SRC_PRODUCT_PLANT_PRIMARY_SOURCE_FLAG_LIST<L_INC> = "N"
            END

               * Determine if the product has BOM *
            READ L_REC FROM ROUTMST, L_PRD_KEY
            ON ERROR
               L_RTN_CD  = "B1040-ERROR-11"
               L_RTN_MSG = "Unable to read record ":L_KEY:" in file ROUTMST { ":STATUS():" }."
               GO B1040_EXIT
            END THEN
               L_PIM_PRD_SRC_PRODUCT_PLANT_IS_BOM_FLAG_LIST<L_INC> = "Y"
            END ELSE
               L_PIM_PRD_SRC_PRODUCT_PLANT_IS_BOM_FLAG_LIST<L_INC> = "N"
            END
            ** Get PIM ProductSupplier Object Source Reference Info (Purchased Product) **
         CASE L_INFOFLO_PRODUCT_MFG_PURCH_FLAG = "P" ;* Purchased Product
            L_INFOFLO_PRODUCT_SUPPLIER_CODE = L_REC<102>
            L_KEY = "PLANNING.GROUP"
            READ L_REC FROM SYSCON, L_KEY
            ON ERROR
               L_RTN_CD  = "B1040-ERROR-12-1"
               L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSCON { ":STATUS():" }."
               GO B1040_EXIT
            END THEN
               FIND L_INFOFLO_PRODUCT_PLANT_CODE IN L_REC<2> SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                  L_INFOFLO_PRODUCT_PLANT_COMPANY_CODE = L_REC<3,L_VM_POS>
                  L_KEY = L_INFOFLO_PRODUCT_PLANT_COMPANY_CODE:"*":L_INFOFLO_PRODUCT_SUPPLIER_CODE
                  READ L_REC FROM SUPPMST, L_KEY
                  ON ERROR
                     L_RTN_CD  = "B1040-ERROR-13"
                     L_RTN_MSG = "Unable to read record ":L_KEY:" in file SUPPMST { ":STATUS():" }."
                     GO B1040_EXIT
                  END THEN
                     FIND L_INFOFLO_PRODUCT_SUPPLIER_CODE IN L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                        CONTINUE  ;* skip duplicate supplier code
                     END ELSE
                        L_INC = DCOUNT(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST, @AM) + 1
                        L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST<L_INC>                 = L_INFOFLO_PRODUCT_SUPPLIER_CODE
                        L_PIM_PRD_SRC_PRODUCT_SUPPLIER_NAME_LIST<L_INC>                 = TRIM(L_REC<3>):" ":TRIM(L_REC<4>)
                        L_PIM_PRD_SRC_PRODUCT_SUPPLIER_KEY_LIST<L_INC>                  = L_PRODUCT_CODE:"-":L_INFOFLO_PRODUCT_SUPPLIER_CODE
                        L_PIM_PRD_SRC_PRODUCT_SUPPLIER_COUNTRY_CODE_LIST<L_INC>         = L_REC<37>
                        L_PIM_PRD_SRC_PRODUCT_SUPPLIER_IS_BUY_CARD_FLAG_LIST<L_INC>     = "Y"  ;* all product-suppliers should have a "Buy Card?" flag
                        L_PIM_PRD_SRC_PRODUCT_SUPPLIER_INACTIVE_SOURCE_FLAG_LIST<L_INC> = "N"  ;* active source

                           * If Infoflo M/P flag = P (purchased product),              *
                           * then send all suppliers in supply chain as primary source *
                           * and send all plants in supply chain as alternate sources. *
                        IF L_PIM_PRD_CMN_ATTR_PRIMARY_SOURCE_TYPE = "P" THEN
                           L_PIM_PRD_SRC_PRODUCT_SUPPLIER_PRIMARY_SOURCE_FLAG_LIST<L_INC> = "Y"
                        END ELSE
                           L_PIM_PRD_SRC_PRODUCT_SUPPLIER_PRIMARY_SOURCE_FLAG_LIST<L_INC> = "N"
                        END
                     END
                  END ELSE
                     FIND L_PRODUCT_CODE:CHAR(9):L_KEY IN L_ERROR_CASE5_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                        CONTINUE  ;* skip duplicate errors
                     END ELSE
                        L_ERROR_CASE5_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY
                     END
                     CRT ">>> Record ":L_KEY:" does not exist in file SUPPMST (#5: Missing Product Supplier). <<<"
                  END
               END ELSE
                  L_KEY = L_INFOFLO_PRODUCT_PLANT_CODE:" -> ":L_INFOFLO_PRODUCT_SUPPLIER_CODE
                  L_ERROR_CASE4_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY
                  CRT ">>> Record ":L_KEY:" does not exist in file SYSCON (#4: Missing Product Supplier Plant). <<<"
                  CONTINUE  ;* skipped
               END
            END ELSE
               L_RTN_CD  = "B1040-ERROR-12-2"
               L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSCON."
               GO B1040_EXIT
            END
         END CASE
      END ELSE
         L_ERROR_CASE3_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY
         CRT ">>> Record ":L_KEY:" does not exist in file ITMPLTMST (#3: Missing Product Plant). <<<"
         CONTINUE  ;* skipped
      END
   NEXT L_CNT

   *** Get PIM ProductPlant Object Source Reference Info (Manufactured Product - Not Currently in Supply-Chain) ***
   L_TTL = DCOUNT(L_INFOFLO_MANUFACTURING_PLANT_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_INFOFLO_PRODUCT_PLANT_CODE = L_INFOFLO_MANUFACTURING_PLANT_CODE_LIST<L_CNT>
      FIND L_INFOFLO_PRODUCT_PLANT_CODE IN L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
         CONTINUE  ;* skip duplicate plant code
      END ELSE
         L_INC = DCOUNT(L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST, @AM) + 1
         L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST<L_INC>                 = L_INFOFLO_PRODUCT_PLANT_CODE
         L_PIM_PRD_SRC_PRODUCT_PLANT_KEY_LIST<L_INC>                  = L_PRODUCT_CODE:"-":L_INFOFLO_PRODUCT_PLANT_CODE
         L_PIM_PRD_SRC_PRODUCT_PLANT_PRIMARY_SOURCE_FLAG_LIST<L_INC>  = "NIL" ;* not in supply-chain, non-primary source
         L_PIM_PRD_SRC_PRODUCT_PLANT_INACTIVE_SOURCE_FLAG_LIST<L_INC> = "Y"   ;* not in supply-chain, iactive source

         ** Determine if the product has BOM **
         READ L_REC FROM ROUTMST, L_PRD_KEY
         ON ERROR
            L_RTN_CD  = "B1040-ERROR-14"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file ROUTMST { ":STATUS():" }."
            GO B1040_EXIT
         END THEN
            L_PIM_PRD_SRC_PRODUCT_PLANT_IS_BOM_FLAG_LIST<L_INC> = "Y"
         END ELSE
            L_PIM_PRD_SRC_PRODUCT_PLANT_IS_BOM_FLAG_LIST<L_INC> = "N"
         END

         ** Get Plant Name **
         L_KEY = "WHS*":L_INFOFLO_PRODUCT_PLANT_CODE  ;* plant is always a warehouse but not vice versa
         READ L_REC FROM SYSTBL, L_KEY
         ON ERROR
            L_RTN_CD  = "B1040-ERROR-15-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO B1040_EXIT
         END THEN
            L_PIM_PRD_SRC_PRODUCT_PLANT_NAME_LIST<L_INC> = L_REC<4>
         END ELSE
            L_RTN_CD  = "B1040-ERROR-15-2"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file SYSTBL."
            GO B1040_EXIT
         END

         ** Get Plant Country Code **
         L_KEY = L_INFOFLO_PRODUCT_PLANT_CODE
         READ L_REC FROM WHSMST, L_KEY
         ON ERROR
            L_RTN_CD  = "B1040-ERROR-16-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file WHSMST { ":STATUS():" }."
            GO B1040_EXIT
         END THEN
            L_PIM_PRD_SRC_PRODUCT_PLANT_COUNTRY_CODE_LIST<L_INC> = L_REC<42>
         END ELSE
            L_RTN_CD  = "B1040-ERROR-16-2"
            L_RTN_MSG = "Record ":L_KEY:" does not exist in file WHSMST."
            GO B1040_EXIT
         END
      END
   NEXT L_CNT

   *** Get PIM LOV Countires Info - Plant Country ***
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_PLANT_COUNTRY_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_INFOFLO_PLANT_COUNTRY_CODE = L_PIM_PRD_SRC_PRODUCT_PLANT_COUNTRY_CODE_LIST<L_CNT>
      L_KEY = "ECC*":L_INFOFLO_PLANT_COUNTRY_CODE
      READ L_REC FROM SYSTBL, L_KEY
      ON ERROR
         L_RTN_CD  = "B1060-ERROR-17"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
         GO B1060_EXIT
      END THEN
         FIND L_INFOFLO_PLANT_COUNTRY_CODE IN L_PIM_PRD_LOV_COUNTRY_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
            ;* skip duplicate plant country code
         END ELSE
            L_INC = DCOUNT(L_PIM_PRD_LOV_COUNTRY_CODE_LIST, @AM) + 1
            L_PIM_PRD_LOV_COUNTRY_CODE_LIST<L_INC>       = L_INFOFLO_PLANT_COUNTRY_CODE
            L_PIM_PRD_LOV_COUNTRY_DESC_ENG_L_LIST<L_INC> = L_REC<4>
            L_PIM_PRD_LOV_COUNTRY_DESC_FRN_L_LIST<L_INC> = L_REC<20>
         END
      END ELSE
         CRT ">>> Record ":L_KEY:" does not exist in file SYSTBL. <<<"
      END
   NEXT L_CNT

   *** Accumulate PIM ProductPlant Object Source Reference Info - PIMFLO<4> ***
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST)))                       ;* 1
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_NAME_LIST)))                       ;* 2
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_COUNTRY_CODE_LIST)))               ;* 3
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_PRIMARY_SOURCE_FLAG_LIST)))        ;* 4
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_INACTIVE_SOURCE_FLAG_LIST)))       ;* 5
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_IS_BOM_FLAG_LIST)))                ;* 6
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_STOCK_TYPE_LIST)))          ;* 7
   L_CURRENT_DELTA_REC<1,4,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_PLANNER_BUYER_NAME_LIST)))  ;* 8

   *** Get PIM ProductSupplier Object Source Reference Buy Card Historical Info (Purchased Product) ***
   L_INFOFLO_PRODUCT_BUY_CARD_SUPPLIER_ID_LIST = L_PRD_REC<17>
   L_TTL = DCOUNT(L_INFOFLO_PRODUCT_BUY_CARD_SUPPLIER_ID_LIST, @VM)
   FOR L_CNT = 1 TO L_TTL
      L_INFOFLO_PRODUCT_PLANT_COMPANY_CODE = L_INFOFLO_PRODUCT_BUY_CARD_SUPPLIER_ID_LIST<1,L_CNT>"G0*1"
      L_INFOFLO_PRODUCT_SUPPLIER_CODE      = L_INFOFLO_PRODUCT_BUY_CARD_SUPPLIER_ID_LIST<1,L_CNT>"G1*1"
      L_KEY = L_INFOFLO_PRODUCT_PLANT_COMPANY_CODE:"*":L_INFOFLO_PRODUCT_SUPPLIER_CODE
      READ L_REC FROM SUPPMST, L_KEY
      ON ERROR
         L_RTN_CD  = "B1040-ERROR-18"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file SUPPMST { ":STATUS():" }."
         GO B1040_EXIT
      END THEN
         FIND L_INFOFLO_PRODUCT_SUPPLIER_CODE IN L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
            CONTINUE  ;* skip duplicate supplier code
         END ELSE
            L_INC = DCOUNT(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST, @AM) + 1
            L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST<L_INC>                 = L_INFOFLO_PRODUCT_SUPPLIER_CODE
            L_PIM_PRD_SRC_PRODUCT_SUPPLIER_NAME_LIST<L_INC>                 = TRIM(L_REC<3>):" ":TRIM(L_REC<4>)
            L_PIM_PRD_SRC_PRODUCT_SUPPLIER_KEY_LIST<L_INC>                  = L_PRODUCT_CODE:"-":L_INFOFLO_PRODUCT_SUPPLIER_CODE
            L_PIM_PRD_SRC_PRODUCT_SUPPLIER_COUNTRY_CODE_LIST<L_INC>         = L_REC<37>
            L_PIM_PRD_SRC_PRODUCT_SUPPLIER_PRIMARY_SOURCE_FLAG_LIST<L_INC>  = "NIL" ;* non-primary source
            L_PIM_PRD_SRC_PRODUCT_SUPPLIER_IS_BUY_CARD_FLAG_LIST<L_INC>     = "Y"   ;* all product-suppliers should have a "Buy Card?" flag
            L_PIM_PRD_SRC_PRODUCT_SUPPLIER_INACTIVE_SOURCE_FLAG_LIST<L_INC> = "Y"   ;* inactive source
         END
      END ELSE
         FIND L_PRODUCT_CODE:CHAR(9):L_KEY IN L_ERROR_CASE5_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
            CONTINUE  ;* skip duplicate errors
         END ELSE
            L_ERROR_CASE5_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY
         END
         CRT ">>> Record ":L_KEY:" does not exist in file SUPPMST (#5: Missing Product Supplier). <<<"
      END
   NEXT L_CNT

   *** Get PIM LOV Countires Info - Supplier Country ***
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_COUNTRY_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_INFOFLO_SUPPLIER_COUNTRY_CODE = L_PIM_PRD_SRC_PRODUCT_SUPPLIER_COUNTRY_CODE_LIST<L_CNT>
      L_KEY = "ECC*":L_INFOFLO_SUPPLIER_COUNTRY_CODE
      READ L_REC FROM SYSTBL, L_KEY
      ON ERROR
         L_RTN_CD  = "B1060-ERROR-19"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
         GO B1060_EXIT
      END THEN
         FIND L_INFOFLO_SUPPLIER_COUNTRY_CODE IN L_PIM_PRD_LOV_COUNTRY_CODE_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
            ;* skip duplicate supplier country code
         END ELSE
            L_INC = DCOUNT(L_PIM_PRD_LOV_COUNTRY_CODE_LIST, @AM) + 1
            L_PIM_PRD_LOV_COUNTRY_CODE_LIST<L_INC>       = L_INFOFLO_SUPPLIER_COUNTRY_CODE
            L_PIM_PRD_LOV_COUNTRY_DESC_ENG_L_LIST<L_INC> = L_REC<4>
            L_PIM_PRD_LOV_COUNTRY_DESC_FRN_L_LIST<L_INC> = L_REC<20>
         END
      END ELSE
         CRT ">>> Record ":L_KEY:" does not exist in file SYSTBL. <<<"
      END
   NEXT L_CNT

   *** Accumulate PIM ProductSupplier Object Source Reference Info - PIMFLO<5> ***
   L_CURRENT_DELTA_REC<1,5,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST)))                  ;* 1
   L_CURRENT_DELTA_REC<1,5,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_NAME_LIST)))                  ;* 2
   L_CURRENT_DELTA_REC<1,5,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_COUNTRY_CODE_LIST)))          ;* 3
   L_CURRENT_DELTA_REC<1,5,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_PRIMARY_SOURCE_FLAG_LIST)))   ;* 4
   L_CURRENT_DELTA_REC<1,5,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_INACTIVE_SOURCE_FLAG_LIST)))  ;* 5
   L_CURRENT_DELTA_REC<1,5,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_IS_BUY_CARD_FLAG_LIST)))      ;* 6

   *** Get PIM Product Cross Reference Substitute Info ***
   L_PIM_PRD_CR_SUBSTITUTE_ITEM_NBR = L_PRD_REC<125>
   L_KEY = L_PIM_PRD_CR_SUBSTITUTE_ITEM_NBR
   READV L_PIM_PRD_CR_SUBSTITUTE_ITEM_CPN FROM ITMXRF, L_KEY, 1
   ON ERROR
      L_RTN_CD  = "B1040-ERROR-20"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMXRF { ":STATUS():" }."
      GO B1040_EXIT
   END THEN
      L_KEY = L_PIM_PRD_CR_SUBSTITUTE_ITEM_CPN
      READV L_PIM_PRD_CR_SUBSTITUTE_ITEM_CLASS_CODE FROM ITMMST, L_KEY, 73
      ON ERROR
         L_RTN_CD  = "B1040-ERROR-21"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMMST { ":STATUS():" }."
         GO B1040_EXIT
      END ELSE
         L_PIM_PRD_CR_SUBSTITUTE_ITEM_CLASS_CODE = ""
      END
   END ELSE
      L_PIM_PRD_CR_SUBSTITUTE_ITEM_CPN = ""
   END

   *** Get PIM Product Cross Reference Superseeded By Info ***
   L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_NBR = L_PRD_REC<97>
   L_KEY = L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_NBR
   READV L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CPN FROM ITMXRF, L_KEY, 1
   ON ERROR
      L_RTN_CD  = "B1040-ERROR-22"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMXRF { ":STATUS():" }."
      GO B1040_EXIT
   END THEN
      L_KEY = L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CPN
      READV L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CLASS_CODE FROM ITMMST, L_KEY, 73
      ON ERROR
         L_RTN_CD  = "B1040-ERROR-23"
         L_RTN_MSG = "Unable to read record ":L_KEY:" in file ITMMST { ":STATUS():" }."
         GO B1040_EXIT
      END ELSE
         L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CLASS_CODE = ""
      END
   END ELSE
      L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CPN = ""
   END

   *** Get PIM Product Cross Reference Alternate UPC Info ***
   L_PIM_PRD_CR_ALT_UPC_CODE = L_PRD_REC<196>
   IF L_PIM_PRD_CR_ALT_UPC_CODE # "" THEN
      IF L_PIM_PRD_CR_ALT_UPC_CODE # L_PIM_PRD_CMN_ATTR_UPC_CODE THEN
         READV L_PIM_PRD_CR_ALT_UPC_ITEM_CPN FROM UPCXRF, L_PIM_PRD_CR_ALT_UPC_CODE, 1
         ON ERROR
            L_RTN_CD  = "B1040-ERROR-24"
            L_RTN_MSG = "Unable to read record ":L_PIM_PRD_CR_ALT_UPC_CODE:" in file UPCXRF { ":STATUS():" }."
            GO B1040_EXIT
         END THEN
            IF L_PIM_PRD_CR_ALT_UPC_ITEM_CPN # L_PRD_KEY THEN
               READ L_REC FROM ITMMST, L_PIM_PRD_CR_ALT_UPC_ITEM_CPN
               ON ERROR
                  L_RTN_CD  = "B1040-ERROR-25"
                  L_RTN_MSG = "Unable to read record ":L_PIM_PRD_CR_ALT_UPC_ITEM_CPN:" in file ITMMST { ":STATUS():" }."
                  GO B1040_EXIT
               END THEN
                  L_PIM_PRD_CR_ALT_UPC_ITEM_NBR        = L_REC<1>
                  L_PIM_PRD_CR_ALT_UPC_ITEM_CLASS_CODE = L_REC<73>
               END ELSE
                  L_RTN_CD  = "B1040-ERROR-26"
                  L_RTN_MSG = "Record ":L_PIM_PRD_CR_ALT_UPC_ITEM_CPN:" does not exist in file ITMMST."
                  GO B1040_EXIT
               END
            END ELSE
               L_PIM_PRD_CR_ALT_UPC_ITEM_NBR = ""  ;* N/A
            END
         END ELSE
            L_PIM_PRD_CR_ALT_UPC_ITEM_NBR = ""  ;* N/A
            CRT "==> Record ":L_PIM_PRD_CR_ALT_UPC_CODE:" does not exist in file UPCXRF."
         END
      END ELSE
         L_PIM_PRD_CR_ALT_UPC_CODE     = ""  ;* N/A
         L_PIM_PRD_CR_ALT_UPC_ITEM_NBR = ""  ;* N/A
      END
   END

   *** Accumulate PIM Product Object Cross Reference Info - PIMFLO<6> ***
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_SUBSTITUTE_ITEM_NBR            ;* 1
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_SUBSTITUTE_ITEM_CPN            ;* 2
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_SUBSTITUTE_ITEM_CLASS_CODE     ;* 3
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_NBR         ;* 4
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CPN         ;* 5
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_CLASS_CODE  ;* 6
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_ALT_UPC_CODE                   ;* 7
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_ALT_UPC_ITEM_NBR               ;* 8
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_ALT_UPC_ITEM_CPN               ;* 9
   L_CURRENT_DELTA_REC<1,6,-1> = L_PIM_PRD_CR_ALT_UPC_ITEM_CLASS_CODE        ;* 10

B1040_EXIT:
   RETURN


*********************************************************
* Internal Subroutine to Get PIM Product Packaging Info *
*********************************************************

B1050_GET_PIM_PRODUCT_PACKAGING_INFO:

   *** Get Infoflo Product Packaging PI List ***
   L_INFOFLO_PACKAGE_PI_LIST = L_PRD_REC<225>
   SWAP @VM WITH @AM IN L_INFOFLO_PACKAGE_PI_LIST
   L_TTL = DCOUNT(L_INFOFLO_PACKAGE_PI_LIST, @AM)
   IF L_TTL = 0 OR TRIM(L_INFOFLO_PACKAGE_PI_LIST<1>) = "" THEN
      L_KEY = L_PRODUCT_CODE:CHAR(9):"No PI Setup"
      FIND L_KEY IN L_ERROR_CASE6_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
         ;* skip duplicate occurrence(s)
      END ELSE
         L_INFOFLO_PACKAGE_NO_PI_ERROR_FOUND = @TRUE
         L_ERROR_CASE6_LIST<-1> = L_KEY
         CRT ">>> Invalid packaging branch setup for item number ":L_PRODUCT_CODE:" (#6: No PI Setup). <<<"
      END
      GO B1050_EXIT
   END

   *** First Pass - Get Infoflo Product Packaging Default PI ***
   L_INFOFLO_PACKAGE_DEFAULT_PI = ""
   FOR L_CNT = 1 TO L_TTL
      L_INFOFLO_PACKAGE_PI = TRIM(L_INFOFLO_PACKAGE_PI_LIST<L_CNT>)
      CALL BOMS3000.26S(L_PRD_KEY, L_INFOFLO_PACKAGE_PI, L_INFOFLO_PACKAGE_BRANCH_MATRIX)
      L_INFOFLO_PACKAGE_TYPE_CODE = L_INFOFLO_PACKAGE_BRANCH_MATRIX<L_CNT,2>
      IF L_INFOFLO_PACKAGE_DEFAULT_PI = "" AND NOT(INDEX(UPCASE(L_INFOFLO_PACKAGE_TYPE_CODE), "OBS", 1)) THEN
         L_INFOFLO_PACKAGE_DEFAULT_PI = TRIM(L_INFOFLO_PACKAGE_BRANCH_MATRIX<L_CNT,1>)
         EXIT
      END
   NEXT L_CNT
   IF L_INFOFLO_PACKAGE_DEFAULT_PI = "" THEN
      L_INFOFLO_PACKAGE_DEFAULT_PI = L_INFOFLO_PACKAGE_PI_LIST<1>  ;* default to first package PI in case all package(s) are obsolete
      L_INFOFLO_PACKAGE_BRANCH_SETUP_ERROR_FOUND = @TRUE
   END

   *** Second Pass - Get Infoflo Product Package Default Branch PI List ***
   CALL BOMS3000.26S(L_PRD_KEY, L_INFOFLO_PACKAGE_DEFAULT_PI, L_INFOFLO_PACKAGE_DEFAULT_BRANCH_MATRIX)
   L_TTL = DCOUNT(L_INFOFLO_PACKAGE_BRANCH_MATRIX, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_PIM_PRD_PKG_DEFAULT_BRANCH_PI_LIST<-1> = L_INFOFLO_PACKAGE_DEFAULT_BRANCH_MATRIX<L_CNT,1>
   NEXT L_CNT

   *** Third Pass - Get Infoflo Product Packaging Next Level PI List ***
   L_TTL = DCOUNT(L_INFOFLO_PACKAGE_PI_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      *** Call API program to get next level PI list ***
      L_INFOFLO_PACKAGE_PI = TRIM(L_INFOFLO_PACKAGE_PI_LIST<L_CNT>)
      CALL BOMS3000.26S(L_PRD_KEY, L_INFOFLO_PACKAGE_PI, L_INFOFLO_PACKAGE_BRANCH_MATRIX)
      L_INC_TTL = DCOUNT(L_INFOFLO_PACKAGE_BRANCH_MATRIX, @AM)
      FOR L_INC = 1 TO L_INC_TTL
         IF L_INFOFLO_PACKAGE_PI = L_INFOFLO_PACKAGE_BRANCH_MATRIX<L_INC,1> THEN  ;* search for the current PI in the matrix returned
            L_INFOFLO_PACKAGE_NLPI = L_INFOFLO_PACKAGE_BRANCH_MATRIX<L_INC,13>
            L_PIM_PRD_PKG_ATTR_NLPI_LIST<L_CNT> = TRIM(L_INFOFLO_PACKAGE_NLPI)
            EXIT
         END
      NEXT L_INC
   NEXT L_CNT

   *** Fouth Pass - Get Product Packaging Branch Key Info Matrix ***
   L_TTL = DCOUNT(L_INFOFLO_PACKAGE_PI_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      *** Call API program to get packaging branch key info matrix ***
      L_INFOFLO_PACKAGE_PI   = TRIM(L_INFOFLO_PACKAGE_PI_LIST<L_CNT>)
      L_INFOFLO_PACKAGE_NLPI = L_PIM_PRD_PKG_ATTR_NLPI_LIST<L_CNT>
      CALL BOMS3000.26S(L_PRD_KEY, L_INFOFLO_PACKAGE_PI, L_INFOFLO_PACKAGE_BRANCH_MATRIX)

      *** Skip if there is more than one PI has the same next level PI or Current PI and Next Level PI are identical ***
      IF L_INFOFLO_PACKAGE_NLPI # "" AND L_INFOFLO_PACKAGE_PI = L_INFOFLO_PACKAGE_NLPI THEN
         L_KEY = L_PRODUCT_CODE:CHAR(9):"PI = NLPI":CHAR(9):L_INFOFLO_PACKAGE_NLPI
         FIND L_KEY IN L_ERROR_CASE6_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
            ;* skip duplicate occurrence(s)
         END ELSE
            L_INFOFLO_PACKAGE_BRANCH_SETUP_ERROR_FOUND = @TRUE
            L_ERROR_CASE6_LIST<-1> = L_KEY
            CRT ">>> Invalid packaging branch setup for item number ":L_PRODUCT_CODE:" (#6: PI = NLPI -> ":L_INFOFLO_PACKAGE_NLPI:"). <<<"
            EXIT
         END
      END ELSE
         IF L_INFOFLO_PACKAGE_NLPI # "" AND NOT(INDEX(L_INFOFLO_PACKAGE_PI_LIST, L_INFOFLO_PACKAGE_NLPI, 1)) THEN
            L_KEY = L_PRODUCT_CODE:CHAR(9):"NLPI Not Found":CHAR(9):L_INFOFLO_PACKAGE_NLPI
            FIND L_KEY IN L_ERROR_CASE6_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
               ;* skip duplicate occurrence(s)
            END ELSE
               L_INFOFLO_PACKAGE_BRANCH_SETUP_ERROR_FOUND = @TRUE
               L_ERROR_CASE6_LIST<-1> = L_KEY
               CRT ">>> Invalid packaging branch setup for item number ":L_PRODUCT_CODE:" (#6: NLPI Not Found Warning -> ":L_INFOFLO_PACKAGE_NLPI:"). <<<"  ;* Warning
            END
         END
         IF COUNT(L_PIM_PRD_PKG_ATTR_NLPI_LIST, L_INFOFLO_PACKAGE_PI) = 0 THEN  ;* get the full package branch chain returned from the above API program call with leaf package PI (i.e. first PI of the branch or standalone PI)
            L_PIM_PRD_PKG_BRANCH_MATRIX<-1> = LOWER(L_INFOFLO_PACKAGE_BRANCH_MATRIX)
         END
      END
   NEXT L_CNT

   *** Fifth Pass - Build PIM Product Packaging Key Attribute Info List (include default package in case of NL/PI branch setup errors found) ***
   IF L_INFOFLO_PACKAGE_BRANCH_SETUP_ERROR_FOUND THEN
      L_PIM_PRD_PKG_BRANCH_MATRIX = LOWER(L_INFOFLO_PACKAGE_DEFAULT_BRANCH_MATRIX)
   END
   L_TTL = DCOUNT(L_PIM_PRD_PKG_BRANCH_MATRIX, @AM)
   FOR L_CNT = 1 TO L_TTL
      *** Get the package key attribute info for each PI in each branch ***
      L_INC_TTL = DCOUNT(L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT>, @VM)
      IF TRIM(L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_INC_TTL,1>) = "" THEN
         L_INC_TTL = L_INC_TTL - 1  ;* previous level is the last level if no PI found (patch for BOMS3000.26S API program)
      END
      FOR L_INC = 1 TO L_INC_TTL
         *** Get PIM Product Package PI List (Child -> Parent Direction by Branch) ***
         L_INC2 = DCOUNT(L_PIM_PRD_PKG_ATTR_PI_LIST, @AM) + 1
         L_INFOFLO_PACKAGE_PI = L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_INC,1>

         *** Skip if PI is null ***
         IF L_INFOFLO_PACKAGE_PI = "" THEN
            CONTINUE
         END ELSE
            L_PIM_PRD_PKG_ATTR_PI_LIST<L_INC2> = L_INFOFLO_PACKAGE_PI
         END

         *** Determine if the PI is the default PI & default branch ***
         IF L_INFOFLO_PACKAGE_PI = L_INFOFLO_PACKAGE_DEFAULT_PI THEN
            L_PIM_PRD_PKG_ATTR_DEFAULT_PI_FLAG_LIST<L_INC2>        = "Y"
            L_PIM_PRD_PKG_ATTR_DEFAULT_BRANCH_PI_FLAG_LIST<L_INC2> = "Y"
         END ELSE
            L_PIM_PRD_PKG_ATTR_DEFAULT_PI_FLAG_LIST<L_INC2> = "N"
            IF INDEX(L_PIM_PRD_PKG_DEFAULT_BRANCH_PI_LIST, L_INFOFLO_PACKAGE_PI, 1) THEN
               L_PIM_PRD_PKG_ATTR_DEFAULT_BRANCH_PI_FLAG_LIST<L_INC2> = "Y"
            END ELSE
               L_PIM_PRD_PKG_ATTR_DEFAULT_BRANCH_PI_FLAG_LIST<L_INC2> = "N"
            END
         END

         *** Get the I2of5 from package indicator and UPC code without last check digit ***
         IF L_PIM_PRD_CR_ALT_UPC_CODE = "" THEN  ;* default UPC
            L_PIM_PRD_PKG_ATTR_I2OF5 = TRIM(L_INFOFLO_PACKAGE_PI:L_PIM_PRD_CMN_ATTR_UPC_CODE[1,11])
         END ELSE  ;* alternate UPC
            L_PIM_PRD_PKG_ATTR_I2OF5 = TRIM(L_INFOFLO_PACKAGE_PI:L_PIM_PRD_CR_ALT_UPC_CODE[1,11])
         END
         CALL BOMS3000.22S(L_PIM_PRD_PKG_ATTR_I2OF5)  ;* get I2of5 from package indicator and UPC code without last check digit
         L_PIM_PRD_PKG_ATTR_I2OF5_LIST<L_INC2> = L_PIM_PRD_PKG_ATTR_I2OF5

         *** Get next level PI cross reference key (i.e. its child package I2OF5 number) ***
         IF L_INC = 1 THEN  ;* leaf package child (i.e. parent of SKU product)
            L_PIM_PRD_PKG_ATTR_CR_I2OF5_LIST<L_INC2> = "SKU"
         END ELSE
            L_LEVEL = DCOUNT(L_PIM_PRD_PKG_ATTR_I2OF5_LIST, @AM) - 1
            L_PIM_PRD_PKG_ATTR_CR_I2OF5_LIST<L_INC2> = L_PIM_PRD_PKG_ATTR_I2OF5_LIST<L_LEVEL>
         END

         *** Get Package Key Attribute Info ***
         L_INFOFLO_PACKAGE_TYPE_CODE               = L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_INC,2>
         L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_INC2> = L_INFOFLO_PACKAGE_TYPE_CODE
         L_KEY = "I07*":L_INFOFLO_PACKAGE_TYPE_CODE
         READ L_REC FROM SYSTBL, L_KEY
         ON ERROR
            L_RTN_CD  = "B1050-ERROR-1"
            L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
            GO B1050_EXIT
         END THEN
            *** Get package setup info ***
            L_PIM_PRD_PKG_ATTR_DESC_ENG_L_LIST<L_INC2>              = L_REC<4>
            L_PIM_PRD_PKG_ATTR_DESC_FRN_L_LIST<L_INC2>              = L_REC<20>
            L_PIM_PRD_PKG_ATTR_DESC_ENG_S_LIST<L_INC2>              = L_REC<18>
            L_PIM_PRD_PKG_ATTR_DESC_FRN_S_LIST<L_INC2>              = L_REC<21>
            L_PIM_PRD_PKG_ATTR_OVERRIDE_DIMENSION_FLAG_LIST<L_INC2> = L_REC<13>
            L_PIM_PRD_PKG_ATTR_CARTONS_PER_LAYER_LIST<L_INC2>       = L_REC<15>
            IF UPCASE(L_REC<8>) = "I" THEN
               L_PIM_PRD_PKG_ATTR_ACTIVE_PACKAGE_FLAG_LIST<L_INC2> = "N"
            END ELSE
               L_PIM_PRD_PKG_ATTR_ACTIVE_PACKAGE_FLAG_LIST<L_INC2> = "Y"
            END
            IF INDEX(UPCASE(L_INFOFLO_PACKAGE_TYPE_CODE), "OBS", 1) THEN
               L_PIM_PRD_PKG_ATTR_ACTIVE_BRANCH_FLAG_LIST<L_INC2> = "N"
            END ELSE
               L_PIM_PRD_PKG_ATTR_ACTIVE_BRANCH_FLAG_LIST<L_INC2> = "Y"
            END
            IF INDEX(UPCASE(L_INFOFLO_PACKAGE_TYPE_CODE), "OBS", 1) THEN
               L_PIM_PRD_PKG_ATTR_DEFAULT_PI_FLAG_LIST<L_INC2> = "N"
            END

            *** Locate PI Position ***
            LOCATE(L_INFOFLO_PACKAGE_PI, L_PRD_REC<225>, 1; L_PI_CNT) ELSE L_PI_CNT = 0

            *** Get package code dimension attribute info ***
            L_PIM_PRD_PKG_ATTR_LENGTH_LIST<L_INC2> = L_REC<10>/1000
            L_PIM_PRD_PKG_ATTR_WIDTH_LIST<L_INC2>  = L_REC<11>/1000
            L_PIM_PRD_PKG_ATTR_HEIGHT_LIST<L_INC2> = L_REC<12>/1000
            L_PIM_PRD_PKG_ATTR_WEIGHT_LIST<L_INC2> = L_REC<9>/1000

            *** Get package dimension attribute info (leave empty if not found in ITMMST) ***
            IF L_PRD_REC<233,L_PI_CNT> # "" THEN
               L_PIM_PRD_PKG_ATTR_LENGTH_LIST2<L_INC2> = L_PRD_REC<233,L_PI_CNT>/1000
            END ELSE
               L_PIM_PRD_PKG_ATTR_LENGTH_LIST2<L_INC2> = ""
            END
            IF L_PRD_REC<234,L_PI_CNT> # "" THEN
               L_PIM_PRD_PKG_ATTR_WIDTH_LIST2<L_INC2> = L_PRD_REC<234,L_PI_CNT>/1000
            END ELSE
               L_PIM_PRD_PKG_ATTR_WIDTH_LIST2<L_INC2> = ""
            END
            IF L_PRD_REC<235,L_PI_CNT> # "" THEN
               L_PIM_PRD_PKG_ATTR_HEIGHT_LIST2<L_INC2> = L_PRD_REC<235,L_PI_CNT>/1000
            END ELSE
               L_PIM_PRD_PKG_ATTR_HEIGHT_LIST2<L_INC2> = ""
            END
            IF L_PRD_REC<236,L_PI_CNT> # "" THEN
               L_PIM_PRD_PKG_ATTR_WEIGHT_LIST2<L_INC2> = L_PRD_REC<236,L_PI_CNT>/1000
            END ELSE
               L_PIM_PRD_PKG_ATTR_WEIGHT_LIST2<L_INC2> = ""
            END

            *** Get PIM package attribute name list ***
            L_INFOFLO_PACKAGE_CODE               = L_REC<6>
            L_PIM_PRD_PKG_ATTR_CODE_LIST<L_INC2> = L_INFOFLO_PACKAGE_CODE
            L_KEY = "I135*":L_INFOFLO_PACKAGE_CODE
            READ L_REC FROM SYSTBL, L_KEY
            ON ERROR
               L_RTN_CD  = "B1050-ERROR-2"
               L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
               GO B1050_EXIT
            END THEN
               L_INFOFLO_PACKAGE_NAME = TRIM(L_REC<2>)
               IF L_INFOFLO_PACKAGE_NAME # "" THEN
                  L_PIM_PRD_PKG_ATTR_NAME_LIST<L_INC2> = L_INFOFLO_PACKAGE_NAME
               END ELSE
                  L_PIM_PRD_PKG_ATTR_NAME_LIST<L_INC2> = "NIL"
                  FIND L_INFOFLO_PACKAGE_CODE IN L_ERROR_CASE9_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                     ;* skip duplicate package code
                  END ELSE
                     L_ERROR_CASE9_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY
                  END
                  CRT ">>> PIM package name is not defined for package code ":L_INFOFLO_PACKAGE_CODE:" in file SYSTBL I135 Table (#9: Missing PIM Package Name). <<< "
               END
            END ELSE
               L_PIM_PRD_PKG_ATTR_CODE_LIST<L_INC2> = "NIL"
               FIND L_KEY IN L_ERROR_CASE8_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
                  ;* skip duplicate EDI package code
               END ELSE
                  L_ERROR_CASE8_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY
               END
               CRT ">>> Record ":L_KEY:" does not exist in file SYSTBL (#8: Missing EDI Package Code). <<< "
            END
         END ELSE
            L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_INC2> = "NIL"
            FIND L_KEY IN L_ERROR_CASE7_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
               ;* skip duplicate EDI package code
            END ELSE
               L_ERROR_CASE7_LIST<-1> = L_PRODUCT_CODE:CHAR(9):L_KEY
            END
            CRT ">>> Record ":L_KEY:" does not exist in file SYSTBL (#7: Missing Package Type Code). <<< "
         END

         *** Get Package Quantity Info (divide child package quantities if applicable) ***
         IF L_INC > 1 THEN
            L_LEVEL = L_INC - 1
            IF L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_LEVEL,3> > 0 THEN
               L_PIM_PRD_PKG_ATTR_QUANTITY_LIST<L_INC2> = L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_INC,3>/L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_LEVEL,3>
            END ELSE
               L_PIM_PRD_PKG_ATTR_QUANTITY_LIST<L_INC2> = L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_INC,3>/100
            END
         END ELSE
            L_PIM_PRD_PKG_ATTR_QUANTITY_LIST<L_INC2> = L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_INC,3>/100
         END

         *** Get Truck Load Info ***
         L_PIM_PRD_PKG_ATTR_TRUCK_LOAD_LIST<L_INC2> = L_PIM_PRD_PKG_BRANCH_MATRIX<L_CNT,L_INC,15>
      NEXT L_INC
   NEXT L_CNT

   *** Check if we need to send product shell to remove package I2OF5 reference ***
   L_TTL = DCOUNT(L_LAST_PIM_PRD_PKG_ATTR_I2OF5_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_LAST_PIM_PRD_PKG_ATTR_I2OF5 = L_LAST_PIM_PRD_PKG_ATTR_I2OF5_LIST<L_CNT>
      FIND L_LAST_PIM_PRD_PKG_ATTR_I2OF5 IN L_PIM_PRD_PKG_ATTR_I2OF5_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
         ;* skip if any previous package I2OF5 still exist in the current delta package I2OF5 state
      END ELSE
         L_PRODUCT_SHELL_PACKAGE_I2OF5_LIST<-1> = L_LAST_PIM_PRD_PKG_ATTR_I2OF5
      END
   NEXT L_CNT

   *** Accumulate PIM ProductPackage Object Info - PIMFLO<1,9> ***
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_PI_LIST)))                       ;* 1
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_NLPI_LIST)))                     ;* 2
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_DEFAULT_PI_FLAG_LIST)))          ;* 3
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_DEFAULT_BRANCH_PI_FLAG_LIST)))   ;* 4
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_I2OF5_LIST)))                    ;* 5
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_CR_I2OF5_LIST)))                 ;* 6
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_CODE_LIST)))                     ;* 7
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST)))                ;* 8
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_NAME_LIST)))                     ;* 9
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_DESC_ENG_L_LIST)))               ;* 10
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_DESC_ENG_S_LIST)))               ;* 11
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_DESC_FRN_L_LIST)))               ;* 12
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_DESC_FRN_S_LIST)))               ;* 13
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_OVERRIDE_DIMENSION_FLAG_LIST)))  ;* 14
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_ACTIVE_PACKAGE_FLAG_LIST)))      ;* 15
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_ACTIVE_BRANCH_FLAG_LIST)))       ;* 16
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_QUANTITY_LIST)))                 ;* 17
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_LENGTH_LIST)))                   ;* 18
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_WIDTH_LIST)))                    ;* 19
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_HEIGHT_LIST)))                   ;* 20
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_WEIGHT_LIST)))                   ;* 21
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_LENGTH_LIST2)))                  ;* 22
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_WIDTH_LIST2)))                   ;* 23
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_HEIGHT_LIST2)))                  ;* 24
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_WEIGHT_LIST2)))                  ;* 25
   L_CURRENT_DELTA_REC<1,9,-1> = LOWER(LOWER(LOWER(L_PIM_PRD_PKG_ATTR_TRUCK_LOAD_LIST)))               ;* 26

B1050_EXIT:
   RETURN


**********************************************************
* Internal Subroutine to Get PIM Product <Entities> Info *
**********************************************************

B1060_GET_PIM_PRODUCT_ENTITIES_INFO:

   *** Get PIM Entity Tariff Code Info ***
   L_INFOFLO_TARIFF_CODE = TRIM(L_PRD_REC<181>)
   L_KEY = "I34*":L_INFOFLO_TARIFF_CODE
   READ L_REC FROM SYSTBL, L_KEY
   ON ERROR
      L_RTN_CD  = "B1060-ERROR-4"
      L_RTN_MSG = "Unable to read record ":L_KEY:" in file SYSTBL { ":STATUS():" }."
      GO B1060_EXIT
   END THEN
      L_INFOFLO_TARIFF_CODE_DESC_ENG_L = TRIM(L_REC<4>)
      L_INFOFLO_TARIFF_CODE_DESC_FRN_L = TRIM(L_REC<20>)
      L_INFOFLO_TARIFF_CODE_DESC_ENG_S = TRIM(L_REC<18>)
      L_INFOFLO_TARIFF_CODE_DESC_FRN_S = TRIM(L_REC<21>)
      L_INFOFLO_TARIFF_CODE_CANADA     = TRIM(L_REC<1>)
      L_INFOFLO_TARIFF_CODE_USA        = TRIM(L_REC<2>)
      L_PIM_PRD_ENTITY_TC_ID           = "TC_":L_INFOFLO_TARIFF_CODE
      L_PIM_PRD_ENTITY_TC_NAME         = L_INFOFLO_TARIFF_CODE:" - ":L_INFOFLO_TARIFF_CODE_DESC_ENG_L
   END ELSE
      L_PIM_PRD_ENTITY_TC_ID = ""
   END

   *** Get Infoflo Dangerous Goods Info ***
   L_INFOFLO_DANGEROUS_GOODS_CODE = TRIM(L_PRD_REC<184>)
   READ L_REC FROM STDCOMM, L_INFOFLO_DANGEROUS_GOODS_CODE
   ON ERROR
      L_RTN_CD  = "B1060-ERROR-5"
      L_RTN_MSG = "Unable to read record ":L_INFOFLO_DANGEROUS_GOODS_CODE:" in file STDCOMM { ":STATUS():" }."
      GO B1060_EXIT
   END THEN
      L_INFOFLO_DANGEROUS_GOODS_DESC     = TRIM(L_REC<1>)
      L_INFOFLO_DANGEROUS_GOODS_COMMENTS = TRIM(L_REC<2>)
      SWAP @VM WITH CHAR(10) IN L_INFOFLO_DANGEROUS_GOODS_COMMENTS  ;* MV -> @VM
      IF L_REC<5> = 1 THEN
         L_INFOFLO_DANGEROUS_GOODS_PRINT_BOL_FLAG = "Y"
      END ELSE
         L_INFOFLO_DANGEROUS_GOODS_PRINT_BOL_FLAG = "N"
      END
      L_INFOFLO_DANGEROUS_GOODS_UN_CODES    = L_REC<3>  ;* MV -> @VM
      L_INFOFLO_DANGEROUS_GOODS_WEIGHT_PCTS = L_REC<4>  ;* MV -> @VM
      L_PIM_PRD_ENTITY_DG_ID                = "DG_":L_INFOFLO_DANGEROUS_GOODS_CODE
      L_PIM_PRD_ENTITY_DG_NAME              = L_INFOFLO_DANGEROUS_GOODS_CODE:" - ":L_INFOFLO_DANGEROUS_GOODS_DESC
   END ELSE
      L_PIM_PRD_ENTITY_DG_ID = ""
   END

   *** Accumulate PIM Product Object Entity Info - PIMFLO<1,2> ***
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_TARIFF_CODE                                            ;* 1
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_TARIFF_CODE_DESC_ENG_L                                 ;* 2
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_TARIFF_CODE_DESC_FRN_L                                 ;* 3
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_TARIFF_CODE_DESC_ENG_S                                 ;* 4
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_TARIFF_CODE_DESC_FRN_S                                 ;* 5
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_TARIFF_CODE_CANADA                                     ;* 6
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_TARIFF_CODE_USA                                        ;* 7
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_DANGEROUS_GOODS_CODE                                   ;* 8
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_DANGEROUS_GOODS_DESC                                   ;* 9
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_DANGEROUS_GOODS_COMMENTS                               ;* 10
   L_CURRENT_DELTA_REC<1,2,-1> = L_INFOFLO_DANGEROUS_GOODS_PRINT_BOL_FLAG                         ;* 11
   L_CURRENT_DELTA_REC<1,2,-1> = LOWER(LOWER(L_INFOFLO_DANGEROUS_GOODS_UN_CODES))                 ;* 12
   L_CURRENT_DELTA_REC<1,2,-1> = LOWER(LOWER(L_INFOFLO_DANGEROUS_GOODS_WEIGHT_PCTS))              ;* 13

B1060_EXIT:
   RETURN


*******************************************************
* Internal subroutine to build PIM STEPXML DOM object *
*******************************************************

B2000_BUILD_PIM_STEPXML_DOM:

*   *** PIM STEPXML Data Structure ***
*   <?xml version="1.0" encoding="UTF-8"?>
*   <STEP-ProductInformation ContextID="Context1" WorkspaceID="Main">
*      <ListOfValues/>
*      <Entites/>
*      <Classifications/>
*      <Products>
*         <Product>
*            1. ProductCompany Object
*            2. ProductPlant Object
*            3. ProductSupplier Object
*            4. Product Object
*            5. ProductPackaging Object
*         </Product>
*      </Products>
*   </STEP-ProductInformation>

   *** Convert to Latin-1 for special characters like french accents ***
   L_LEN = LEN(L_CODES_ASCII)
   FOR L_INC = 1 TO L_LEN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PRODUCT_LINE_NAME_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PRODUCT_GROUP_NAME_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PRODUCT_SUPER_GROUP_NAME_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PRODUCT_TYPE_NAME_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PRODUCT_MARKET_SEGMENT_NAME_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PRODUCT_ATTRIBUTE_GROUP_NAME_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_FRN
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_LOV_COUNTRY_DESC_FRN_L_LIST
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_CD
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_VALUE
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_SRC_PRODUCT_COMPANY_BRAND_NAME_FRN_LIST
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_LOV_CURRENCY_DESC_FRN_L_LIST
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_PKG_ATTR_DESC_FRN_L_LIST
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_PKG_ATTR_DESC_FRN_S_LIST
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_INFOFLO_TARIFF_CODE_DESC_FRN_L
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_INFOFLO_TARIFF_CODE_DESC_FRN_S
      SWAP L_CODES_ASCII[L_INC,1] WITH L_CODES_LATIN1[L_INC,1] IN L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_PLANNER_BUYER_NAME_LIST
   NEXT L_INC

   *** [STEP 0] => Create the STEPXML document DOM object { domHandle } ***
   xmlStatus = XDOMCreateRoot(domHandle)

   *** [STEP 1] => Add the root element node { STEP-ProductInformation } ***
   attrNode = "ContextID":@VM:"WorkspaceID":@AM:"Context1":@VM:"Main"
   xmlStatus = Add_XMLElement(domHandle, "STEP-ProductInformation", "", attrNode, "", node.new) ; node.this = node.new
   node.root = node.new  ;* save the root node handle

   *** [STEP 2] => Add the { ListsOfValues } element ***
   xmlStatus = Add_XMLElement(node.root, "ListsOfValues", "", "", "", node.new) ; node.this = node.new
   node.listsofvalues = node.new  ;* save the ListOfValues node handle

   ** [STEP 2.1] => Add the { ListsOfValues } -> { ListOfValue } Countries element
   IF L_PIM_PRD_LOV_COUNTRY_CODE_LIST # "" THEN
      GOSUB B2210_ADD_PIM_LOV_COUNTRY_STEPXML_ELEMENTS
   END

   ** [STEP 2.2] => Add the { ListsOfValues } -> { ListOfValue } Currencies element
   IF L_PIM_PRD_LOV_CURRENCY_CODE_LIST # "" THEN
      GOSUB B2220_ADD_PIM_LOV_CURRENCY_STEPXML_ELEMENTS
   END

   ** [STEP 2.3] => Add the { ListsOfValues } -> { ListOfValue } UOMs element
   IF L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE # "" THEN
      GOSUB B2230_ADD_PIM_LOV_UOM_STEPXML_ELEMENTS
   END

   ** [STEP 2.4] => Add the { ListsOfValues } -> { ListOfValue } ManufacturingColors element
   IF L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_CODE # "" THEN
      GOSUB B2240_ADD_PIM_LOV_MANUFACTURING_COLORS_STEPXML_ELEMENTS
   END

   *** [STEP 3] => Add the { Classifications } element ***
   xmlStatus = Add_XMLElement(node.root, "Classifications", "", "", "", node.new) ; node.this = node.new
   node.classifications = node.new  ;* save the Classifications node handle

   ** [STEP 3.1] => Add per { Classifications } -> { Classification } element(s) **
   GOSUB B2310_ADD_PIM_CLASSIFICATIONS_STEPXML_ELEMENTS

   *** [STEP 4] => Add the { Products } element ***
   xmlStatus = Add_XMLElement(node.root, "Products", "", "", "", node.new) ; node.this = node.new
   node.products = node.new  ;* save the Products node handle

   ** [STEP 4.1] => Add per { Product } element(s) for PIM ProductCompany Object **
   IF L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST # "" THEN
      GOSUB B2410_ADD_PIM_PRODUCT_COMPANY_STEPXML_ELEMENTS
   END

   ** [STEP 4.2] => Add per { Product } element(s) for PIM ProductPlant Object **
   IF L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST # "" THEN
      GOSUB B2420_ADD_PIM_PRODUCT_PLANT_STEPXML_ELEMENTS
   END

   ** [STEP 4.3] => Add per { Product } element(s) for PIM ProductSupplier Object **
   IF L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST # "" THEN
      GOSUB B2430_ADD_PIM_PRODUCT_SUPPLIER_STEPXML_ELEMENTS
   END

   ** [STEP 4.4] => Add per { Product } element(s) for PIM Product Object **
   GOSUB B2440_ADD_PIM_PRODUCT_STEPXML_ELEMENTS

   ** [STEP 4.5] => Add the { Product } for package element **
   GOSUB B2450_ADD_PIM_PRODUCT_PACKAGING_STEPXML_ELEMENTS

   *** [STEP 5] => Finalize the DOM ***
   xmlStatus = XDOMClose(node.new)

B2000_EXIT:
   RETURN


*************************************************************************
* Internal Subroutine to Add PIM ListOfValues Countries STEPXML Elements *
*************************************************************************

B2210_ADD_PIM_LOV_COUNTRY_STEPXML_ELEMENTS:

   *** [ node.listsofvalues = Parent Node ] ***

   ** Add the Countries LOV { ListOfValue } element **
   attrNode = "ID":@VM:"ParentID":@AM:"Countries":@VM:"List Of Values group root"
   xmlStatus = Add_XMLElement(node.listsofvalues, "ListOfValue", "", attrNode, "", node.new) ; node.this = node.new

   L_TTL = DCOUNT(L_PIM_PRD_LOV_COUNTRY_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      * Add per { ListOfValue } -> { Values } -> { Value } element for country name context en-US *
      attrNode = "ID":@VM:"QualifierID":@AM:L_PIM_PRD_LOV_COUNTRY_CODE_LIST<L_CNT>:@VM:"en-US"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_LOV_COUNTRY_DESC_ENG_L_LIST<L_CNT>, attrNode, "", node.new)

      * Add per { ListOfValue } -> { Values } -> { Value } element for country name context fr-CA *
      IF L_PIM_PRD_LOV_COUNTRY_DESC_FRN_L_LIST<L_CNT> # "" THEN  ;* may not have french description (e.g. ZZ)
         attrNode = "ID":@VM:"QualifierID":@AM:L_PIM_PRD_LOV_COUNTRY_CODE_LIST<L_CNT>:@VM:"fr-CA"
         xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_LOV_COUNTRY_DESC_FRN_L_LIST<L_CNT>, attrNode, "", node.new)
      END
   NEXT L_CNT

B2210_EXIT:
   RETURN


*************************************************************************
* Internal Subroutine to Add PIM ListOfValues Currencies STEPXML Elements *
*************************************************************************

B2220_ADD_PIM_LOV_CURRENCY_STEPXML_ELEMENTS:

   *** [ node.listsofvalues = Parent Node ] ***

   ** Add the LOV Currencies { ListOfValue } element **
   attrNode = "ID":@VM:"ParentID":@AM:"Currencies":@VM:"List Of Values group root"
   xmlStatus = Add_XMLElement(node.listsofvalues, "ListOfValue", "", attrNode, "", node.new) ; node.this = node.new

   L_TTL = DCOUNT(L_PIM_PRD_LOV_CURRENCY_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      * Add per { ListOfValue } -> { Values } -> { Value } element for currency name context en-US *
      attrNode = "ID":@VM:"QualifierID":@AM:L_PIM_PRD_LOV_CURRENCY_CODE_LIST<L_CNT>:@VM:"en-US"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_LOV_CURRENCY_DESC_ENG_L_LIST<L_CNT>, attrNode, "", node.new)

      * Add per { ListOfValue } -> { Values } -> { Value } element for currency name context fr-CA *
      attrNode = "ID":@VM:"QualifierID":@AM:L_PIM_PRD_LOV_CURRENCY_CODE_LIST<L_CNT>:@VM:"fr-CA"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_LOV_CURRENCY_DESC_FRN_L_LIST<L_CNT>, attrNode, "", node.new)
   NEXT L_CNT

B2220_EXIT:
   RETURN


*********************************************************************
* Internal Subroutine to Add PIM ListOfValues UOMs STEPXML Elements *
*********************************************************************

B2230_ADD_PIM_LOV_UOM_STEPXML_ELEMENTS:

   *** Add the UOMs LOV { ListOfValue } element ***
   attrNode = "ID":@VM:"ParentID":@AM:"UOMs":@VM:"List Of Values group root"
   xmlStatus = Add_XMLElement(node.listsofvalues, "ListOfValue", "", attrNode, "", node.new) ; node.this = node.new

   ** Add the { ListOfValue } -> { Values } element for base UOM code **
   attrNode = "ID":@AM:L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE
   xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CMN_ATTR_BASE_UOM_DESC, attrNode, "", node.new)

B2230_EXIT:
   RETURN


************************************************************************************
* Internal Subroutine to Add PIM ListOfValues ManufacturingColors STEPXML Element  *
************************************************************************************

B2240_ADD_PIM_LOV_MANUFACTURING_COLORS_STEPXML_ELEMENTS:

   *** Add the ManufacturingColors LOV  { ListOfValue } element ***
   attrNode = "ID":@VM:"ParentID":@AM:"ManufacturingColors":@VM:"List Of Values group root"
   xmlStatus = Add_XMLElement(node.listsofvalues, "ListOfValue", "", attrNode, "", node.new) ; node.this = node.new

   ** Add the { ListOfValue } -> { Values } element for ManufacturingColor **
   attrNode = "ID":@AM:L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_CODE
   xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_NAME, attrNode, "", node.new)

B2240_EXIT:
   RETURN


*******************************************************************
* Internal Subroutine to Add PIM Classifications STEPXML Elements *
*******************************************************************

B2310_ADD_PIM_CLASSIFICATIONS_STEPXML_ELEMENTS:

   *** [ node.classifications = Parent Node ] ***

   *** Add per { Classification } element for PIM ProductPlant Object ***
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      attrNode = "ID":@VM:"ParentID":@VM:"UserTypeID":@AM:"PLT_":L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST<L_CNT>:@VM:"PlantHierarchy":@VM:"Plant"
      xmlStatus = Add_XMLElement(node.classifications, "Classification", "", attrNode, "", node.new) ; node.this = node.new

      ** Add the { Classification } -> { Name } element **
      xmlStatus = Add_XMLElement(node.this, "Name", L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST<L_CNT>:" - ":L_PIM_PRD_SRC_PRODUCT_PLANT_NAME_LIST<L_CNT>, "", "", node.new)

      ** Add the { Classification } -> { Values } element **
      xmlStatus = Add_XMLElement(node.this, "Values", "", "", "", node.new) ; node.this = node.new

      * Add the { Classification } -> { Values } -> { Value } element for PlantCountry *
      attrNode = "AttributeID":@VM:"ID":@AM:"PlantCountry":@VM:L_PIM_PRD_SRC_PRODUCT_PLANT_COUNTRY_CODE_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)
   NEXT L_CNT

   *** Add per { Classification } element for PIM ProductSupplier Object ***
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      attrNode = "ID":@VM:"ParentID":@VM:"UserTypeID":@AM:"SPR_":L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST<L_CNT>:@VM:"SupplierHierarchy":@VM:"IPEXSupplier"
      xmlStatus = Add_XMLElement(node.classifications, "Classification", "", attrNode, "", node.new) ; node.this = node.new

      ** Add the { Classification } -> { Name } element **
      xmlStatus = Add_XMLElement(node.this, "Name", L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST<L_CNT>:" - ":L_PIM_PRD_SRC_PRODUCT_SUPPLIER_NAME_LIST<L_CNT>, "", "", node.new)

      ** Add the { Classification } -> { Values } element **
      xmlStatus = Add_XMLElement(node.this, "Values", "", "", "", node.new) ; node.this = node.new

      * Add the { Classificationi } -> { Values } -> { Value } element for SupplierCountry *
      attrNode = "AttributeID":@VM:"ID":@AM:"SupplierCountry":@VM:L_PIM_PRD_SRC_PRODUCT_SUPPLIER_COUNTRY_CODE_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)
   NEXT L_CNT

B2310_EXIT:
   RETURN


*******************************************************************
* Internal Subroutine to Add PIM Product Company STEPXML Elements *
*******************************************************************

B2410_ADD_PIM_PRODUCT_COMPANY_STEPXML_ELEMENTS:

   *** [ node.products = Parent Node ] ***

   *** Add per { Product } element(s) for PIM ProductCompany Object ***
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      attrNode = "UserTypeID":@VM:"ParentID":@AM:"ProductCompany":@VM:L_PRODUCT_CATEGORY_NAME
      xmlStatus = Add_XMLElement(node.products, "Product", "", attrNode, "", node.new) ; node.this = node.new
      node.product = node.this  ;* save the curent Product node handle

      ** Add the { Product } -> { KeyValue} element **
      attrNode = "KeyID":@AM:"ProductCompanyKey"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_SRC_PRODUCT_COMPANY_KEY_LIST<L_CNT>, attrNode, "", node.new)

      ** Add the { Product } -> { Name } element **
      xmlStatus = Add_XMLElement(node.this, "Name", L_PIM_PRD_SRC_PRODUCT_COMPANY_KEY_LIST<L_CNT>, "", "", node.new)

      ** Add the { Product } -> { Values } element **
      xmlStatus = Add_XMLElement(node.product, "Values", "", "", "", node.new) ; node.this = node.new

      * Add the { Proudct } -> { Values } -> { Value } element for attribute Trade Price List Name *
      attrNode = "AttributeID":@AM:"TradeListName"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_NAME_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute Trade Price List Description *
      attrNode = "AttributeID":@AM:"TradeListDescription"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SRC_PRODUCT_COMPANY_TRADE_PRICE_LIST_DESC_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute Currency *
      attrNode = "AttributeID":@VM:"ID":@AM:"Currency":@VM:L_PIM_PRD_PRICE_CURRENCY_CODE_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute CurrentListPriceEffectiveDate *
      attrNode = "AttributeID":@AM:"CurrentListPriceEffectiveDate"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CURRENT_LIST_PRICE_EFFECTIVE_DATE_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute CurrentListPrice *
      attrNode = "AttributeID":@AM:"CurrentListPrice"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CURRENT_LIST_PRICE_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute ProductCompanyCode *
      attrNode = "AttributeID":@AM:"ProductCompanyCode"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SRC_PRODUCT_COMPANY_CODE_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute ProductCode *
      attrNode = "AttributeID":@AM:"ProductCode"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PRODUCT_CODE, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute PricePer *
      attrNode = "AttributeID":@AM:"PricePer"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_PRICE_PER_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute FutureListPriceEffectiveDate *
      attrNode = "AttributeID":@AM:"FutureListPriceEffectiveDate"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_FUTURE_LIST_PRICE_EFFECTIVE_DATE_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for attribute FutureListPrice *
      attrNode = "AttributeID":@AM:"FutureListPrice"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_FUTURE_LIST_PRICE_LIST<L_CNT>, attrNode, "", node.new)
   NEXT L_CNT

B2410_EXIT:
   RETURN


*****************************************************************
* Internal Subroutine to Add PIM Product Plant STEPXML Elements *
*****************************************************************

B2420_ADD_PIM_PRODUCT_PLANT_STEPXML_ELEMENTS:

   *** [ node.products = Parent Node ] ***

   *** Add per { Product } element(s) for PIM ProductPlant Object ***
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      attrNode = "UserTypeID":@VM:"ParentID":@AM:"ProductPlant":@VM:L_PRODUCT_CATEGORY_NAME
      xmlStatus = Add_XMLElement(node.products, "Product", "", attrNode, "", node.new) ; node.this = node.new
      node.product = node.this  ;* save the curent Product node handle

      ** Add the { Product } -> { KeyValue} element **
      attrNode = "KeyID":@AM:"ProductPlantKey"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_SRC_PRODUCT_PLANT_KEY_LIST<L_CNT>, attrNode, "", node.new)

      ** Add the { Product } -> { Name } element **
      xmlStatus = Add_XMLElement(node.this, "Name", L_PIM_PRD_SRC_PRODUCT_PLANT_KEY_LIST<L_CNT>, "", "", node.new)

      ** Add the { ClassificationReference } element **
      attrNode = "ClassificationID":@VM:"Type":@AM:"PLT_":L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST<L_CNT>:@VM:"ProductPlantToPlant"
      xmlStatus = Add_XMLElement(node.product, "ClassificationReference", "", attrNode, "", node.new)

      ** Add the { Product } -> { Values } element **
      xmlStatus = Add_XMLElement(node.product, "Values", "", "", "", node.new) ; node.this = node.new

      * Add the { Proudct } -> { Values } -> { Value } element for ProductCode *
      attrNode = "AttributeID":@AM:"ProductCode"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PRODUCT_CODE, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for ProductPlantCode *
      attrNode = "AttributeID":@AM:"ProductPlantCode"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SRC_PRODUCT_PLANT_CODE_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for SourcePlannerBuyer *
      attrNode = "AttributeID":@AM:"SourcePlannerBuyer"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_PLANNER_BUYER_NAME_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Product } -> { Values } -> { Value } element for IsInfofloSupplyChain *
      IF L_PIM_PRD_SRC_PRODUCT_PLANT_INACTIVE_SOURCE_FLAG_LIST<L_CNT> = "Y" THEN
         attrNode = "AttributeID":@VM:"ID":@AM:"IsInfofloSupplyChain":@VM:"N"
      END ELSE
         attrNode = "AttributeID":@VM:"ID":@AM:"IsInfofloSupplyChain":@VM:"Y"
      END
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)  ;* LOV

      * Add the { Product } -> { Values } -> { Value } element for BillOfMaterial *
      attrNode = "AttributeID":@VM:"ID":@AM:"IsInfofloBOM":@VM:L_PIM_PRD_SRC_PRODUCT_PLANT_IS_BOM_FLAG_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)  ;* LOV

      * Add the { Product } -> { Values } -> { Value } element for SourceStockType *
      attrNode = "AttributeID":@VM:"ID":@AM:"SourceStockType":@VM:L_PIM_PRD_SRC_PRODUCT_PLANT_SOURCE_STOCK_TYPE_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)  ;* LOV
   NEXT L_CNT

B2420_EXIT:
   RETURN


********************************************************************
* Internal Subroutine to Add PIM Product Supplier STEPXML Elements *
********************************************************************

B2430_ADD_PIM_PRODUCT_SUPPLIER_STEPXML_ELEMENTS:

   *** [ node.products = Parent Node ] ***

   *** Add per { Product } element(s) for PIM ProductPlant Object ***
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      attrNode = "UserTypeID":@VM:"ParentID":@AM:"ProductSupplier":@VM:L_PRODUCT_CATEGORY_NAME
      xmlStatus = Add_XMLElement(node.products, "Product", "", attrNode, "", node.new) ; node.this = node.new
      node.product = node.this  ;* save the curent Product node handle

      ** Add the { Product } -> { KeyValue} element **
      attrNode = "KeyID":@AM:"ProductSupplierKey"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_SRC_PRODUCT_SUPPLIER_KEY_LIST<L_CNT>, attrNode, "", node.new)

      ** Add the { Product } -> { Name } element **
      xmlStatus = Add_XMLElement(node.this, "Name", L_PIM_PRD_SRC_PRODUCT_SUPPLIER_KEY_LIST<L_CNT>, "", "", node.new)

      ** Add the { ClassificationReference } element **
      attrNode = "ClassificationID":@VM:"Type":@AM:"SPR_":L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST<L_CNT>:@VM:"ProductSupplierToSupplier"
      xmlStatus = Add_XMLElement(node.product, "ClassificationReference", "", attrNode, "", node.new)

      ** Add the { Product } -> { Values } element **
      xmlStatus = Add_XMLElement(node.product, "Values", "", "", "", node.new) ; node.this = node.new

      * Add the { Proudct } -> { Values } -> { Value } element for ProductCode *
      attrNode = "AttributeID":@AM:"ProductCode"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PRODUCT_CODE, attrNode, "", node.new)

      * Add the { Proudct } -> { Values } -> { Value } element for ProductSupplierCode *
      attrNode = "AttributeID":@AM:"ProductSupplierCode"
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SRC_PRODUCT_SUPPLIER_CODE_LIST<L_CNT>, attrNode, "", node.new)

      * Add the { Product } -> { Values } -> { Value } element for IsInfofloSupplyChain *
      IF L_PIM_PRD_SRC_PRODUCT_SUPPLIER_INACTIVE_SOURCE_FLAG_LIST<L_CNT> = "Y" THEN
         attrNode = "AttributeID":@VM:"ID":@AM:"IsInfofloSupplyChain":@VM:"N"
      END ELSE
         attrNode = "AttributeID":@VM:"ID":@AM:"IsInfofloSupplyChain":@VM:"Y"
      END
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)  ;* LOV

      * Add PIM { ValueGroup } element for BuyCard *
      attrNode = "AttributeID":@VM:"ID":@AM:"IsInfofloBuyCard":@VM:L_PIM_PRD_SRC_PRODUCT_SUPPLIER_IS_BUY_CARD_FLAG_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)  ;* LOV
   NEXT L_CNT

B2430_EXIT:
   RETURN


***********************************************************
* Internal Subroutine to Add PIM Product STEPXML Elements *
***********************************************************

B2440_ADD_PIM_PRODUCT_STEPXML_ELEMENTS:

   *** [ node.products = Parent Node ] ***

   *** Add per { Product } element(s) for PIM Product Object ***
   attrNode = "UserTypeID":@VM:"ParentID":@AM:"Product":@VM:L_PRODUCT_CATEGORY_NAME
   xmlStatus = Add_XMLElement(node.products, "Product", "", attrNode, "", node.new) ; node.this = node.new
   node.product = node.this  ;* save the curent Product node handle

   ** Add the { Product } -> { KeyValue} element **
   attrNode = "KeyID":@AM:"ProductCode"
   xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PRODUCT_CODE, attrNode, "", node.new)

   ** Add the { Product } -> { Name } element **
   xmlStatus = Add_XMLElement(node.this, "Name", L_PRODUCT_CODE, "", "", node.new)

   ** Add the { Product } -> { ProductCrossReference } element(s) **
   GOSUB B2441_ADD_PIM_PRODUCT_CROSS_REFERENCE_STEPXML_ELEMENTS

   ** Add the { Product } -> { Values } element **
   xmlStatus = Add_XMLElement(node.product, "Values", "", "", "", node.new) ; node.this = node.new
   node.product.values = node.this  ;* save the current Product -> Values  node handle

   * Add the { Product } -> { Values } -> { Value } for common product attribute element(s) *
   GOSUB B2442_ADD_PIM_PRODUCT_COMMON_ATTRIBUTE_STEPXML_ELEMENTS

   * Add the { Product } -> { Values } -> { Value } for specific product attribute element(s) *
   GOSUB B2443_ADD_PIM_PRODUCT_SPECIFIC_ATTRIBUTE_STEPXML_ELEMENTS

B2440_EXIT:
   RETURN


***************************************************************************
* Internal Subroutine to Add PIM Product Cross Reference STEPXML Elements *
***************************************************************************

B2441_ADD_PIM_PRODUCT_CROSS_REFERENCE_STEPXML_ELEMENTS:

   *** [ node.product = Parent Node ] ***

   ** Add the { ClassificationReference } element for ProductLine **
   attrNode = "ClassificationID":@VM:"Type":@AM:"IIHL5_":L_PRODUCT_LINE_CODE:@VM:"ProductToInfofloProductLine"
   xmlStatus = Add_XMLElement(node.product, "ClassificationReference", "", attrNode, "", node.new)

   ** Add per { ProductCrossReference } for ProductCompany object element **
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_COMPANY_KEY_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      attrNode = "Type":@AM:"ProductToProductCompany"
      xmlStatus = Add_XMLElement(node.product, "ProductCrossReference", "", attrNode, "", node.new) ; node.this = node.new

      attrNode = "KeyID":@AM:"ProductCompanyKey"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_SRC_PRODUCT_COMPANY_KEY_LIST<L_CNT>, attrNode, "", node.new)
   NEXT L_CNT

   ** Add per { ProductCrossReference } for ProductPlant object element **
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_PLANT_KEY_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      IF L_PIM_PRD_SRC_PRODUCT_PLANT_INACTIVE_SOURCE_FLAG_LIST<L_CNT> = "Y" THEN
         attrNode = "Type":@AM:"ProductToInactiveSource"
      END ELSE
         IF L_PIM_PRD_SRC_PRODUCT_PLANT_PRIMARY_SOURCE_FLAG_LIST<L_CNT> = "Y" THEN
            attrNode = "Type":@AM:"ProductToPrimarySource"
         END ELSE
            attrNode = "Type":@AM:"ProductToAlternateSource"
         END
      END
      xmlStatus = Add_XMLElement(node.product, "ProductCrossReference", "", attrNode, "", node.new) ; node.this = node.new

      attrNode = "KeyID":@AM:"ProductPlantKey"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_SRC_PRODUCT_PLANT_KEY_LIST<L_CNT>, attrNode, "", node.new)
   NEXT L_CNT

   ** Add per { ProductCrossReference } for ProductSupplier object element **
   L_TTL = DCOUNT(L_PIM_PRD_SRC_PRODUCT_SUPPLIER_KEY_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      IF L_PIM_PRD_SRC_PRODUCT_SUPPLIER_INACTIVE_SOURCE_FLAG_LIST<L_CNT> = "Y" THEN
         attrNode = "Type":@AM:"ProductToInactiveSource"
      END ELSE
         IF L_PIM_PRD_SRC_PRODUCT_SUPPLIER_PRIMARY_SOURCE_FLAG_LIST<L_CNT> = "Y" THEN
            attrNode = "Type":@AM:"ProductToPrimarySource"
         END ELSE
            attrNode = "Type":@AM:"ProductToAlternateSource"
         END
      END
      xmlStatus = Add_XMLElement(node.product, "ProductCrossReference", "", attrNode, "", node.new) ; node.this = node.new

      attrNode = "KeyID":@AM:"ProductSupplierKey"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_SRC_PRODUCT_SUPPLIER_KEY_LIST<L_CNT>, attrNode, "", node.new)
   NEXT L_CNT

   ** Add the { ProductCrossReference } for ProductToSubstitute element **
   IF L_PIM_PRD_CR_SUBSTITUTE_ITEM_NBR # "" THEN
      attrNode = "Type":@AM:"ProductToSubstitute"
      xmlStatus = Add_XMLElement(node.product, "ProductCrossReference", "", attrNode, "", node.new) ; node.this = node.new

      attrNode = "KeyID":@AM:"ProductCode"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_CR_SUBSTITUTE_ITEM_NBR, attrNode, "", node.new)
   END

   ** Add the { ProductCrossReference } for ProductToSuperseededBy element **
   IF L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_NBR # "" THEN
      attrNode = "Type":@AM:"ProductToSupersededBy"
      xmlStatus = Add_XMLElement(node.product, "ProductCrossReference", "", attrNode, "", node.new) ; node.this = node.new

      attrNode = "KeyID":@AM:"ProductCode"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_CR_SUPERSEDED_BY_ITEM_NBR, attrNode, "", node.new)
   END

   ** Add the { ProductCrossReference } for ProductToAlternateUPC element **
   IF L_PIM_PRD_CR_ALT_UPC_ITEM_NBR # "" THEN
      attrNode = "Type":@AM:"ProductToAlternateUPC"
      xmlStatus = Add_XMLElement(node.product, "ProductCrossReference", "", attrNode, "", node.new) ; node.this = node.new

      attrNode = "KeyID":@AM:"ProductCode"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_CR_ALT_UPC_ITEM_NBR, attrNode, "", node.new)
   END

   ** Add per { EntityCrossReference } element for ProductTariffCode **
   IF L_PIM_PRD_ENTITY_TC_ID # "" THEN
      attrNode = "EntityID":@VM:"Type":@AM:L_PIM_PRD_ENTITY_TC_ID:@VM:"ProductTariffCode"
      xmlStatus = Add_XMLElement(node.product, "EntityCrossReference", "", attrNode, "", node.new)
   END

   ** Add per { EntityCrossReference } element for ProductDGCode **
   IF L_PIM_PRD_ENTITY_DG_ID # "" THEN
      attrNode = "EntityID":@VM:"Type":@AM:L_PIM_PRD_ENTITY_DG_ID:@VM:"ProductDGCode"
      xmlStatus = Add_XMLElement(node.product, "EntityCrossReference", "", attrNode, "", node.new)
   END

B2441_EXIT:
   RETURN


****************************************************************************
* Internal Subroutine to Add PIM Product Common Attribute STEPXML Elements *
****************************************************************************

B2442_ADD_PIM_PRODUCT_COMMON_ATTRIBUTE_STEPXML_ELEMENTS:

   *** [ node.product.values = Parent Node ] ***

   *** Add PIM Product Attributes Element Group (Identifiers) ***
   attrNode = "AttributeID":@AM:"InfofloCPN"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PRODUCT_CPN, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"ProductCode"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_PRODUCT_CODE, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"AltProductCode"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_ALT_PRODUCT_CODE, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"FriatecPartNumber"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_FRIATEC_PART_NUMBER, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"CanplasPartNumber"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_CANPLAS_PART_NUMBER, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"NacoPartNumber"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_NACO_PART_NUMBER, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"ScepterPartNumberCA"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_CA, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"ScepterPartNumberUS"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_SCEPTER_PART_NUMBER_US, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"UPCCode"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_UPC_CODE, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"AlternateUPCCode"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CR_ALT_UPC_CODE, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"UniPartNumber"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_UNIVERSAL_PART_NUMBER, attrNode, "", node.new)

   *** Add PIM Product Attributes Element Group (Core) ***
   attrNode = "AttributeID":@VM:"ID":@AM:"ItemClass":@VM:TRIM(L_PIM_PRD_CMN_ATTR_ITEM_CLASS_CODE)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"InfofloItemType":@VM:TRIM(L_PIM_PRD_CMN_ATTR_INFOFLO_ITEM_TYPE)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"ProductStatus":@VM:TRIM(L_PIM_PRD_CMN_ATTR_PRODUCT_STATUS)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"CreationDate"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_CREATION_DATE, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"ObsolescenceDate"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_OBSOLESCENCE_DATE, attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"ABCCategory":@VM:TRIM(L_PIM_PRD_CMN_ATTR_ABC_CATEGORY)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"ABCCategoryOverride":@VM:TRIM(L_PIM_PRD_CMN_ATTR_ABC_CATEGORY_OVERRIDE)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"NonRetNonCanc":@VM:TRIM(L_PIM_PRD_CMN_ATTR_NON_RET_NON_CANC)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"PrdRebateMatrixCode":@VM:TRIM(L_PIM_PRD_CMN_ATTR_REBATE_MATRIX_CODE)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"ProductDescriptionType":@VM:TRIM(L_PIM_PRD_CMN_ATTR_DESCRIPTION_TYPE) ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"PrdRoyaltyFlag":@VM:TRIM(L_PIM_PRD_CMN_ATTR_ROYALTY_FLAG)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"HasCosting":@VM:TRIM(L_PIM_PRD_CMN_ATTR_HAS_COSTING_SETUP_FLAG)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"DefaultPricePerI"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_I, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"DefaultPricePerM"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_DEFAULT_PRICE_PER_M, attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"ProductCountryOfOriginOverride":@VM:TRIM(L_PIM_PRD_CMN_ATTR_COUNTRY_OF_ORIGIN_CODE)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   *** Add PIM Product Attributes Element Group (Logistics & Manufacturing) ***
   attrNode = "AttributeID":@VM:"ID":@AM:"PurchasedFromAliaxis":@VM:TRIM(L_PIM_PRD_CMN_ATTR_PURCHASED_FROM_ALIAXIS)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"ManufacturingColor":@VM:TRIM(L_PIM_PRD_CMN_ATTR_MANUFACTURING_COLOR_CODE)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"DGFlashpointC"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_CELSIUS, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"DGFlashpointF"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_DG_FLASHPOINT_FARENHEIT, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"ProductPackagingComments"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_PACKING_COMMENTS, attrNode, "", node.new)

   *** Add PIM Product Attributes Element Group (Measurements) ***
   attrNode = "AttributeID":@VM:"ID":@AM:"BaseUOM":@VM:TRIM(L_PIM_PRD_CMN_ATTR_BASE_UOM_CODE)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"BaseQtyI"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_BASE_QTY_I, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"BaseQtyM"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_BASE_QTY_M, attrNode, "", node.new)

   IF L_PIM_PRD_CMN_ATTR_SHIPPING_UOM # "" THEN
      attrNode = "AttributeID":@AM:"ShippingWeight"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_SHIPPING_WEIGHT, attrNode, "", node.new)
   END

   attrNode = "AttributeID":@VM:"ID":@AM:"UOMStandard":@VM:TRIM(L_PIM_PRD_CMN_ATTR_UOM_STANDARD)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"WeightFactor"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_WEIGHT_FACTOR, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"ScrapPercent"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_SCRAP_PERCENT, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"BellLength"
   xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_CMN_ATTR_BELL_LENGTH, attrNode, "", node.new)

   attrNode = "AttributeID":@VM:"ID":@AM:"HasBellEnd":@VM:TRIM(L_PIM_PRD_CMN_ATTR_HAS_BELL_END)  ;* LOV
   xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

   ***  Add PIM Product Attributes Element Group (Description) for Context: Imperial & Metric ***
   attrNode = "AttributeID":@AM:"ProductDescriptionI"
   xmlStatus = Add_XMLElement(node.product.values, "ValueGroup", "", attrNode, "", node.new) ; node.this = node.new

   ** Add the language context Element { ValueGroup } -> { Value } for en-US (Imperial) **
   attrNode = "QualifierID":@AM:"en-US"
   xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_ENG, attrNode, "", node.new)

   ** Add the language context Element { ValueGroup } -> { Value } for fr-CA (Imperial) **
   attrNode = "QualifierID":@AM:"fr-CA"
   xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_I_FRN, attrNode, "", node.new)

   attrNode = "AttributeID":@AM:"ProductDescriptionM"
   xmlStatus = Add_XMLElement(node.product.values, "ValueGroup", "", attrNode, "", node.new) ; node.this = node.new

   ** Add the language context Element { ValueGroup } -> { Value } for en-US (Metric) **
   attrNode = "QualifierID":@AM:"en-US"
   xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_ENG, attrNode, "", node.new)

   ** Add the language context Element { ValueGroup } -> { Value } for fr-CA (Metric) **
   attrNode = "QualifierID":@AM:"fr-CA"
   xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_CMN_ATTR_PRODUCT_DESC_M_FRN, attrNode, "", node.new)

B2442_EXIT:
   RETURN


******************************************************************************
* Internal Subroutine to Add PIM Product Specific Attribute STEPXML Elements *
******************************************************************************

B2443_ADD_PIM_PRODUCT_SPECIFIC_ATTRIBUTE_STEPXML_ELEMENTS:

   *** [ node.product.values = Parent Node ] ***

   L_TTL = DCOUNT(L_PIM_PRD_SPC_ATTR_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      L_PIM_PRD_SPC_ATTR_ID                = L_PIM_PRD_SPC_ATTR_LIST<L_CNT,1>
      L_PIM_PRD_SPC_ATTR_CONTEXT_ENG_CD    = L_PIM_PRD_SPC_ATTR_LIST<L_CNT,2>
      L_PIM_PRD_SPC_ATTR_CONTEXT_ENG_VALUE = L_PIM_PRD_SPC_ATTR_LIST<L_CNT,3>
      L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_CD    = L_PIM_PRD_SPC_ATTR_LIST<L_CNT,4>
      L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_VALUE = L_PIM_PRD_SPC_ATTR_LIST<L_CNT,5>

      ** Add per product specfic attribute Element { ValueGroup } for Imperial **
      attrNode = "AttributeID":@AM:L_PIM_PRD_SPC_ATTR_ID
      xmlStatus = Add_XMLElement(node.product.values, "ValueGroup", "", attrNode, "", node.new) ; node.this = node.new

      * Add the product specific attribute language context Element { ValueGroup } -> { Value } for en-US *
      attrNode = "QualifierID":@AM:L_PIM_PRD_SPC_ATTR_CONTEXT_ENG_CD
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SPC_ATTR_CONTEXT_ENG_VALUE, attrNode, "", node.new)

      * Add the product specific attribute language context Element { ValueGroup } -> { Value } for fr-CA *
      attrNode = "QualifierID":@AM:L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_CD
      xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_SPC_ATTR_CONTEXT_FRN_VALUE, attrNode, "", node.new)
   NEXT L_CNT

B2443_EXIT:
   RETURN


*******************************************************************
* Internal Subroutine to Add PIM Product Package STEPXML Elements *
*******************************************************************

B2450_ADD_PIM_PRODUCT_PACKAGING_STEPXML_ELEMENTS:

   *** [ node.products = Parent Node ] ***

   *** No Pakcage PI Found -> Skip ***
   IF L_INFOFLO_PACKAGE_NO_PI_ERROR_FOUND THEN
      GO B2450_EXIT
   END

   *** Product Shell for Removing N/A Package I2OF5 Reference ***
   L_TTL = DCOUNT(L_PRODUCT_SHELL_PACKAGE_I2OF5_LIST, @AM)
   FOR L_CNT = 1 TO L_TTL
      *** Add per { Product } element(s) for PIM Shell Product Object ***
      xmlStatus = Add_XMLElement(node.products, "Product", "", "", "", node.new) ; node.this = node.new
      node.product = node.this  ;* save the curent Product node handle

      ** Add the { Product } -> { KeyValue} element **
      attrNode = "KeyID":@AM:"I2of5"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PRODUCT_SHELL_PACKAGE_I2OF5_LIST<L_CNT>, attrNode, "", node.new)
   NEXT L_CNT

   *** Pakcage Setup Info ***
   L_TEST_LIST = ""
   IF L_INFOFLO_PACKAGE_BRANCH_SETUP_ERROR_FOUND THEN
      L_TTL = 1  ;* only send default package info in case of NL/PI branch setup errors found
   END ELSE
      L_TTL = DCOUNT(L_PIM_PRD_PKG_ATTR_PI_LIST, @AM)
   END
   FOR L_CNT = 1 TO L_TTL
      IF L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT> = "NIL" OR L_PIM_PRD_PKG_ATTR_CODE_LIST<L_CNT> = "NIL" OR L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT> = "NIL" THEN
         CONTINUE  ;* skip if PackageTypeCode / PackageEDICode / PackageName error found
      END
      FIND L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT> IN L_TEST_LIST SETTING L_AM_POS,L_VM_POS,L_SM_POS THEN
         ;* skip duplicate package code
      END ELSE
         L_TEST_LIST<-1> = L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT>

         *** Add per packaging setup { Product } element ***
         IF UPCASE(L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT>) = "MISC" THEN
            attrNode = "ID":@VM:"ParentID":@VM:"UserTypeID":@AM:"PC_":L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT>:@VM:"PT_":UPCASE(L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT>):@VM:"PkgCode":L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT>
         END ELSE
            attrNode = "ID":@VM:"ParentID":@VM:"UserTypeID":@AM:"PC_":L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT>:@VM:"PT_":UPCASE(L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT>):"S":@VM:"PkgCode":L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT>
         END
         xmlStatus = Add_XMLElement(node.products, "Product", "", attrNode, "", node.new) ; node.this = node.new
         node.product = node.this  ;* save the current Product node handle

         ** Add per packaging setup { Product } -> { Name } element **
         xmlStatus = Add_XMLElement(node.this, "Name", L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT>, "", "", node.new)

         ** Add per packaging setup { Product } -> { Values } element **
         xmlStatus = Add_XMLElement(node.product, "Values", "", "", "", node.new) ; node.this = node.new
         node.product.values = node.this  ;* save the current Product -> Values  node handle

         ** Add per packaging setup { Product } -> { Values } -> { Value } element for package attribute PCCode **
         attrNode = "AttributeID":@AM:"PCCode"
         xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { Values } -> { Value } element for package attribute PkgActive **
         attrNode = "AttributeID":@VM:"ID":@AM:"PkgActive":@VM:L_PIM_PRD_PKG_ATTR_ACTIVE_PACKAGE_FLAG_LIST<L_CNT>  ;* LOV
         xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { Values } -> { Value } element for package attribute OvrDimensions **
         attrNode = "AttributeID":@VM:"ID":@AM:"OvrDimensions":@VM:L_PIM_PRD_PKG_ATTR_OVERRIDE_DIMENSION_FLAG_LIST<L_CNT>  ;* LOV
         xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)

         ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PkgCartonsPerLayer **
         IF UPCASE(L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT>) = "CARTON" THEN
            attrNode = "AttributeID":@AM:"PkgCartonsPerLayer"
            xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_CARTONS_PER_LAYER_LIST<L_CNT>, attrNode, "", node.new)
         END

         ** Add per packaging setup { Product } -> { ValueGroup } element **
         attrNode = "AttributeID":@AM:"PkgDescriptionLong"
         xmlStatus = Add_XMLElement(node.product.values, "ValueGroup", "", attrNode, "", node.new) ; node.this = node.new

         ** Add per packaging setup { Product } -> { ValueGroup } -> { Value } element for package attribute en-US short description **
         attrNode = "QualifierID":@AM:"en-US"
         xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_PKG_ATTR_DESC_ENG_L_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { ValueGroup } -> { Value } element for package attribute fr-CA short description **
         attrNode = "QualifierID":@AM:"fr-CA"
         xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_PKG_ATTR_DESC_FRN_L_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { ValueGroup } element **
         attrNode = "AttributeID":@AM:"PkgDescriptionShort"
         xmlStatus = Add_XMLElement(node.product.values, "ValueGroup", "", attrNode, "", node.new) ; node.this = node.new

         ** Add per packaging setup { Product } -> { ValueGroup } -> { Value } element for package attribute en-US long description **
         attrNode = "QualifierID":@AM:"en-US"
         xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_PKG_ATTR_DESC_ENG_S_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { ValueGroup } -> { Value } element for package attribute fr-CA long description **
         attrNode = "QualifierID":@AM:"fr-CA"
         xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_PKG_ATTR_DESC_FRN_S_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { Values } -> { Value } element for package attribute PkgLength**
         attrNode = "AttributeID":@AM:"PkgLength"
         xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_LENGTH_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { Values } -> { Value } element for package attribute PkgWidth **
         attrNode = "AttributeID":@AM:"PkgWidth"
         xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_WIDTH_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { Values } -> { Value } element for package attribute PkgHeight **
         attrNode = "AttributeID":@AM:"PkgHeight"
         xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_HEIGHT_LIST<L_CNT>, attrNode, "", node.new)

         ** Add per packaging setup { Product } -> { Values } -> { Value } element for package attribute PkgWeight **
         attrNode = "AttributeID":@AM:"PkgWeight"
         xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_WEIGHT_LIST<L_CNT>, attrNode, "", node.new)
      END
   NEXT L_CNT

   *** Package Option & Branch Info ***
   FOR L_CNT = 1 TO L_TTL
      IF L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT> = "NIL" OR L_PIM_PRD_PKG_ATTR_CODE_LIST<L_CNT> = "NIL" OR L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT> = "NIL" THEN
         CONTINUE  ;* skip if PackageTypeCode / PackageEDICode / PackageName error found
      END
      *** Add per packaging { Product } element ***
      attrNode = "UserTypeID":@VM:"ParentID":@AM:"Packaged":L_PIM_PRD_PKG_ATTR_NAME_LIST<L_CNT>:@VM:"PC_":L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.products, "Product", "", attrNode, "", node.new) ; node.this = node.new
      node.product = node.this  ;* save the current Product node handle

      ** Add per packaging { Product } -> { KeyValue } element **
      attrNode = "KeyID":@AM:"I2of5"
      xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_PKG_ATTR_I2OF5_LIST<L_CNT>, attrNode, "", node.new)

      ** Add per packaging { Product } -> { Name } element **
      xmlStatus = Add_XMLElement(node.this, "Name", L_PIM_PRD_PKG_ATTR_I2OF5_LIST<L_CNT>, "", "", node.new)

      L_INC_TTL = DCOUNT(L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST, @AM)
      FOR L_INC = 1 TO L_INC_TTL
         IF L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_INC> = L_PIM_PRD_PKG_ATTR_TYPE_CODE_LIST<L_CNT> THEN
            ** Add per packaging { Product } -> { ProductCrossReference } element **
            attrNode = "Type":@AM:"Packaged":L_PIM_PRD_PKG_ATTR_NAME_LIST<L_INC>:"ToChild"
            xmlStatus = Add_XMLElement(node.product, "ProductCrossReference", "", attrNode, "", node.new) ; node.this = node.new

            ** Add per packaging { Product } -> { ProductCrossReference } -> { KeyValue } element **
            IF L_PIM_PRD_PKG_ATTR_CR_I2OF5_LIST<L_INC> = "SKU" THEN  ;* leaf child package (i.e. parent of SKU product)
               attrNode = "KeyID":@AM:"ProductCode"
               xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PRODUCT_CODE, attrNode, "", node.new)
            END ELSE  ;* next level package indicator (package hierarchy reference)
               attrNode = "KeyID":@AM:"I2of5"
               xmlStatus = Add_XMLElement(node.this, "KeyValue", L_PIM_PRD_PKG_ATTR_CR_I2OF5_LIST<L_INC>, attrNode, "", node.new)
            END

            ** Add per packaging { Product } -> { ProductCrossReference } -> { MetaData } element **
            xmlStatus = Add_XMLElement(node.this, "MetaData", "", "", "", node.new) ; node.this = node.new

            ** Add per packaging { Product } -> { ProductCrossReference } -> { MetaData } -> { Value } element for package attribute PkgQuantity **
            attrNode = "AttributeID":@AM:"PkgQuantity"
            xmlStatus = Add_XMLElement(node.this, "Value", L_PIM_PRD_PKG_ATTR_QUANTITY_LIST<L_INC>, attrNode, "", node.new)

            ** Add per packaging { Product } -> { ProductCrossReference } -> { MetaData } -> { Value } element for package attribute PkgDefaultBranch **
            attrNode = "AttributeID":@VM:"ID":@AM:"PkgDefaultBranch":@VM:L_PIM_PRD_PKG_ATTR_DEFAULT_BRANCH_PI_FLAG_LIST<L_INC>  ;* LOV
            xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)

            ** Add per packaging { Product } -> { ProductCrossReference } -> { MetaData } -> { Value } element for package attribute PkgActiveBranch **
            IF L_PIM_PRD_PKG_ATTR_ACTIVE_BRANCH_FLAG_LIST<L_INC> = "Y" THEN  ;* LOV
               attrNode = "AttributeID":@VM:"ID":@AM:"PkgActiveBranch":@VM:"Y"
               xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)
            END ELSE
               attrNode = "AttributeID":@VM:"ID":@AM:"PkgActiveBranch":@VM:"N"
               xmlStatus = Add_XMLElement(node.this, "Value", "", attrNode, "", node.new)
            END
         END
      NEXT L_INC

      ** Add per packaging { Product } -> { Values } element **
      xmlStatus = Add_XMLElement(node.product, "Values", "", "", "", node.new) ; node.this = node.new
      node.product.values = node.this  ;* save the current Product -> Values  node handle

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute I2of5 **
      attrNode = "AttributeID":@AM:"I2of5"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_I2OF5_LIST<L_CNT>, attrNode, "", node.new)

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PkgDefault **
      attrNode = "AttributeID":@VM:"ID":@AM:"PkgDefault":@VM:L_PIM_PRD_PKG_ATTR_DEFAULT_PI_FLAG_LIST<L_CNT>
      xmlStatus = Add_XMLElement(node.product.values, "Value", "", attrNode, "", node.new)

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PkgPI **
      attrNode = "AttributeID":@AM:"PkgPI"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_PI_LIST<L_CNT>, attrNode, "", node.new)

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PerTruckLoad **
      attrNode = "AttributeID":@AM:"PerTruckLoad"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_TRUCK_LOAD_LIST<L_CNT>, attrNode, "", node.new)

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PkgLength**
      attrNode = "AttributeID":@AM:"PkgLength"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_LENGTH_LIST2<L_CNT>, attrNode, "", node.new)

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PkgWidth **
      attrNode = "AttributeID":@AM:"PkgWidth"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_WIDTH_LIST2<L_CNT>, attrNode, "", node.new)

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PkgHeight **
      attrNode = "AttributeID":@AM:"PkgHeight"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_HEIGHT_LIST2<L_CNT>, attrNode, "", node.new)

      ** Add per packaging { Product } -> { Values } -> { Value } element for package attribute PkgWeight **
      attrNode = "AttributeID":@AM:"PkgWeight"
      xmlStatus = Add_XMLElement(node.product.values, "Value", L_PIM_PRD_PKG_ATTR_WEIGHT_LIST2<L_CNT>, attrNode, "", node.new)
   NEXT L_CNT

B2450_EXIT:
   RETURN


*************************************
* Internal subroutine to write data *
*************************************

B3000_WRITE_PIM_STEPXML_DOM_TO_FILE:

   *** STEPXML Output File Timestamp ***
   L_DATE_OCONV = OCONV(DATE(),"D4/")
   L_TIME_OCONV = OCONV(TIME(), "MTS")
   SWAP "/" WITH "" IN L_DATE_OCONV
   SWAP ":" WITH "" IN L_TIME_OCONV

   *** STEPXML Output File Fullpath Name ***
   L_FILE_DIR  = "DOM_XML"
   L_FILE_NAME = L_FILE_DIR:"/STEPXML_":L_PRD_KEY:"_":L_PRODUCT_CODE:".xml"

   *** Write STEPXML DOM to File ***
   xmlStatus = XDOMWrite(domHandle, L_FILE_NAME, XML.TO.FILE)
   IF xmlStatus # XML.SUCCESS THEN
      L_RTN_CD  = "B3000-ERROR-1"
      L_RTN_MSG = "Failed writing STEPXML DOM to file ":L_FILE_NAME:"."
      GO B3000_EXIT
   END ELSE
      CRT L_FILE_NAME
   END

B3000_EXIT:
   RETURN


****************************************
* Exit
****************************************

   $INCLUDE IIPLUS.BOTTOM

END
*
