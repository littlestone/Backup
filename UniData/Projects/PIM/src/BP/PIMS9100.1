   SUBROUTINE PIMS9100.1(STEPXML, STEPXML_FILEPATH, STATUS)
* PIM to Infoflo Outbound Integration Gateway Endpoint UniBasic Program Interface
* VERSION 8.2.3
* 22 AUG 16 8.2.3 juntan PRJ*SPC076D.14-PIM TO INFOFLO OUTBOUND INTEGRATION
*
*
*
*
*
*
*
****************************************
*
*   IPEX Inc. - INFOFLO Release 8.2
*
*    Copyright (c) 1998, Ipex Inc.
*
*         All Rights Reserved
*
****************************************

   PROGRAM = 'PIMS9100.1'

   $INCLUDE SYSS9170.2  ;* Infoflo Standard Charset Table Mapping Matrix

   $INCLUDE TUBP TU.API.H
   $INCLUDE TUBP ROC.H
   $INCLUDE /usr/igi/ud/sys/INCLUDE XML.H  ;* XML parser
*  $INCLUDE /usr/igi/ud/sys/INCLUDE UDO.H  ;* JSON parser is available in UniData v7.3


**************************************************************************
*
* DESCRIPTION:
* ============
*              This program is used to send HTTP post request to PIM Web API
*              hosted in IIS on windows server to post data to Infoflo system.
*
*              <<<NOTE>>>
*
*              Input arguments:
*                 STEPXML -> PIM product data in XML format
*
*              Return status (null or 0 if no error occurred)
*                 STATUS<1> -> Error code
*                 STATUS<2> -> Error message
*
* MODIFICATIONS:
* ==============
*              2016/08/15 juntan SPC076D.14 - Initial creation.
*
**************************************************************************


A100_MAIN:

   GOSUB A200_INITIALIZATION
   IF ERR_CODE # "" THEN
      GO A100_EXIT
   END

   GOSUB A300_OPEN_FILES
   IF ERR_CODE # "" THEN
      GO A100_EXIT
   END

   GOSUB A400_MAIN_PROCESS
   IF ERR_CODE # "" THEN
      GO A100_EXIT
   END

A100_EXIT:
   GO A500_CONCLUSION


***************************************
* Define & Initialize Local Variables *
***************************************
A200_INITIALIZATION:

   @USER.RETURN.CODE   = 0   ;* U2 system variable
   STATUS              = ""  ;* Subroutine return status

   TIMESTAMP           = ""
   MILLISECOND         = ""
   RTN_CODE            = ""
   RTN_MSG             = ""
   ERR_CODE            = ""
   ERR_MSG             = ""
   INFO_CODE           = ""
   INFO_MSG            = ""
   INFO_CODE_LIST      = ""
   INFO_MSG_LIST       = ""

   ID                  = ""
   REC                 = ""

   AM_POS              = 0
   VM_POS              = 0
   SM_POS              = 0
   POS                 = 0
   I                   = 0  ;* Specific node counter
   X                   = 0  ;* Parent node counter
   Y                   = 0  ;* Child node counter
   Z                   = 0  ;* Sub-Child node counter
   CNT                 = 0
   INC                 = 0
   TTL                 = 0
   TOTAL               = 0
   TOTAL_ITEMS         = 0
   TOTAL_ATTRS         = 0
   TOTAL_LINES         = 0

   ERR                 = @FALSE
   FOUND               = @FALSE
   REFERENCED_NODE     = @FALSE
   ENTITY_DG_FOUND     = @FALSE
   ENTITY_TC_FOUND     = @FALSE
   PRODUCT_FOUND       = @FALSE
   NEW_PRODUCT         = @FALSE
   PACKAGE_CODE_FOUND  = @FALSE
   PACKAGE_FOUND       = @FALSE
   RECORD_LOCK_FOUND   = @FALSE
   EMAIL_REPORT        = @FALSE

   ;* XDOM handle has to be saved using dimensioned array, use dynamic array would error, not sure why???
   INIT_DOM_NODE = 1000           ;* initialize to 1000
   MAX_DOM_NODE  = INIT_DOM_NODE  ;* SYSCON parameter default to 1000
   DIM XDOM_NODES(INIT_DOM_NODE)
   DIM XDOM_PARENT_NODES(INIT_DOM_NODE)
   DIM XDOM_CHILD_NODES(INIT_DOM_NODE)
   DIM XDOM_SUBCHILD_NODES(INIT_DOM_NODE)

   XDOM                                                   = ""
   XPATH                                                  = ""
   XPATH_ROOT                                             = ""
   XPATH_EXP                                              = ""
   FND_NODE                                               = ""
   NEW_NODE                                               = ""
   ATTR_NODE                                              = ""
   ATTR_ID                                                = ""
   ATTR_NAME                                              = ""
   ATTR_VALUE                                             = ""
   UNIT_VALUE                                             = ""
   TEXT_NODE                                              = ""
   TEXT_VALUE                                             = ""
   XDOM_ATTRIBUTE_NAMES                                   = ""
   XDOM_ATTRIBUTE_MATRIX                                  = ""
   ATTRIBUTE_NAME                                         = ""
   ATTRIBUTE_VALUE                                        = ""
   ATTRIBUTE_UNIT                                         = ""
   CONTEXT_VALUE                                          = ""
   CONTEXT_CODE                                           = ""
   CONTEXT_VALUE_ENG                                      = ""
   CONTEXT_VALUE_FRN                                      = ""
   MULTI_VALUE                                            = ""
   MULTI_VALUE_ID                                         = ""

   XDOM_NODE_CNT                                          = 0
   PARENT_NODE_CNT                                        = 0
   CHILD_NODE_CNT                                         = 0
   SUBCHILD_NODE_CNT                                      = 0

   PARENT_NODE_ATTR_USERTYPEID_VALUE                      = ""
   PARENT_NODE_ATTR_ID_NAME                               = ""
   PARENT_NODE_ATTR_ID_VALUE                              = ""
   PARENT_NODE_ATTR_ID_MATRIX                             = ""
   CHILD_NODE_ATTR_NAMES                                  = ""
   CHILD_NODE_ATTR_MATRIX                                 = ""

   PIM_STEPXML_ENTITY_DG_ATTR_NAMES                       = ""
   PIM_STEPXML_ENTITY_DG_DATA_MATRIX                      = ""
   PIM_STEPXML_ENTITY_TC_ATTR_NAMES                       = ""
   PIM_STEPXML_ENTITY_TC_DATA_MATRIX                      = ""
   PIM_STEPXML_PRODUCT_ATTR_NAMES                         = ""
   PIM_STEPXML_PRODUCT_DATA_MATRIX                        = ""
   PIM_STEPXML_PACKAGE_ATTR_NAMES                         = ""
   PIM_STEPXML_PACKAGE_DATA_MATRIX                        = ""
   PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES                    = ""
   PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX                   = ""

   INFOFLO_SYSCON_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_LIST    = ""
   INFOFLO_SYSCON_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_LIST    = ""
   INFOFLO_SYSCON_PIM_STEPXML_PRODUCT_ATTRIBUTE_LIST      = ""
   INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_ATTRIBUTE_LIST      = ""
   INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_LIST = ""

   ERR_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_NAME_LIST          = ""
   ERR_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_NAME_LIST          = ""
   ERR_PIM_STEPXML_PRODUCT_ATTRIBUTE_NAME_LIST            = ""
   ERR_PIM_STEPXML_PACKAGE_ATTRIBUTE_NAME_LIST            = ""
   ERR_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_NAME_LIST       = ""

   IN_DATA                                                = ""
   OUT_DATA                                               = ""
   RTN_STATUS                                             = ""
   SWAP_VALUE                                             = ""
   TEST_VALUE                                             = ""
   TEST_LOCK                                              = ""
   TEST_LIST                                              = ""
   SYSCON_KEYS                                            = ""
   STEPID                                                 = ""
   PIM_REST_SERVICE_PARAMS                                = ""
   RESULT                                                 = ""

   ENTITY_DG_KEY_INFO_LIST                                = ""
   ENTITY_DG_STEPID                                       = ""
   ENTITY_DG_CODE                                         = ""
   ENTITY_DG_CODE_TTL                                     = 0
   ENTITY_DG_UNWEIGHTPCT_TTL                              = 0
   ENTITY_DG_WEIGHT_PCT_TTL                               = 0
   ENTITY_TC_KEY_INFO_LIST                                = ""
   ENTITY_TC_STEPID                                       = ""
   ENTITY_TC_CODE                                         = ""
   ENTITY_TC_CODE_LIST                                    = ""
   ENTITY_TC_CODE_DESC_L                                  = ""

   PRODUCT_STEPID_LIST                                    = ""
   PRODUCT_STEPID                                         = ""
   PRODUCT_CPN                                            = ""
   PRODUCT_CODE                                           = ""
   PRODUCT_LINE_CODE                                      = ""
   PRODUCT_NACO_PART_NBR                                  = ""
   PRODUCT_CANPLAS_PART_NBR                               = ""
   PRODUCT_TO_SUPERSEDED_BY                               = ""
   PRODUCT_TO_SUPERSEDED_BY_STEPID_LIST                   = ""
   PRODUCT_TO_SUBSTITUTE                                  = ""
   PRODUCT_TO_SUBSTITUTE_STEPID_LIST                      = ""
   PRODUCT_SHIPPING_WEIGHT                                = ""
   PRODUCT_CUT_LENGTH                                     = ""
   PRODUCT_UPC                                            = ""
   PRODUCT_UPN                                            = ""
   PRODUCT_UPN_OLD                                        = ""
   PRODUCT_UPN_NEW                                        = ""
   PRODUCT_STATUS                                         = ""
   PRODUCT_BASE_UOM                                       = ""
   PRODUCT_UOM_TYPE                                       = ""
   PRODUCT_UOM_STANDARD                                   = ""
   PRODUCT_ITEM_TYPE                                      = ""
   PRODUCT_ITEM_CLASS                                     = ""
   PRODUCT_CURRENT_ITEM_CLASS                             = ""
   PRODUCT_IS_OEM                                         = ""
   PRODUCT_IS_REPACKING                                   = ""
   PRODUCT_KEY_INFO_LIST                                  = ""
   PRODUCT_PLANTS                                         = ""
   PRODUCT_LAST_CHANGE_COMMENT                            = ""
   PRODUCT_DESC_ENG_I                                     = ""
   PRODUCT_DESC_FRN_I                                     = ""
   PRODUCT_DESC_ENG_M                                     = ""
   PRODUCT_DESC_FRN_M                                     = ""
   PRODUCT_DESC_ENG_S                                     = ""
   PRODUCT_DESC_FRN_S                                     = ""
   PRODUCT_DESC_ENG                                       = ""
   PRODUCT_DESC_FRN                                       = ""
   PRODUCT_OWNER                                          = ""
   PRODUCT_CODE_SAVE                                      = ""
   CANPLAS_ITEM_NBR                                       = ""
   ITMMSTWRK_ID_LIST                                      = ""
   ITMMSTWRK_REC_LIST                                     = ""
   TOKENS                                                 = ""
   DESC_TEXT                                              = ""

   PACKAGE_STEPID                                         = ""
   PACKAGE_PARENTID                                       = ""
   PACKAGE_TYPE                                           = ""
   PACKAGE_CODE                                           = ""
   PACKAGE_CODE_STEPID                                    = ""
   PACKAGE_EDI_CODE                                       = ""
   PACKAGE_PI                                             = ""
   PACKAGE_NLPI                                           = ""
   PACKAGE_DEFAULT                                        = ""
   PACKAGE_DEFAULT_BRANCH                                 = ""
   PACKAGE_CODE_LIST                                      = ""
   PACKAGE_PER_TRUCK_LOAD                                 = ""
   PACKAGE_LENGTH                                         = ""
   PACKAGE_WIDTH                                          = ""
   PACKAGE_HEIGHT                                         = ""
   PACKAGE_WEIGHT                                         = ""
   PACKAGE_QUANTITY                                       = ""
   PACKAGE_COMMENT                                        = ""
   PACKAGE_CODE_DESC_L                                    = ""

   EMAIL_REPORT                                           = ""
   EMAIL_TO                                               = ""
   IT_SUPPORT_RECIPIENTS                                  = ""
   PIM_ADMIN_RECIPIENTS                                   = ""
   SUMMARY_REPORT_CONTENT                                 = ""
   SUMMARY_REPORT_ENTITY_DG_CONTENT                       = ""
   SUMMARY_REPORT_ENTITY_TC_CONTENT                       = ""
   SUMMARY_REPORT_PRODUCT_CONTENT                         = ""
   SUMMARY_REPORT_PACKAGE_CONTENT                         = ""
   SUMMARY_REPORT_PACKAGE_CODE_CONTENT                    = ""

   ;*****************************************************************
   ;* Get the current user login id since the UniData system variable
   ;* ACNT.NAME is not available when connects with UO.NET library
   ;*****************************************************************
   ACNT_NAME = FIELD(@ACCOUNT, "/", DCOUNT(@ACCOUNT, "/"))

A200_EXIT:
   RETURN


*****************************************************
* Open UniData File(s) & Initialze File Variable(s) *
*****************************************************
A300_OPEN_FILES:

   ;*********************
   ;* System Costant File
   ;*********************
   OPEN "SYSCON" TO SYSCON
   ON ERROR
      ERR_CODE = "A300-ERROR-1-1"
      ERR_MSG  = "Fatal error occurs while opening file SYSCON {":STATUS():"}."
      GO A300_EXIT
   END THEN
      SYSCON_ID  = ""
      SYSCON_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-1-2"
      ERR_MSG  = "Unable to open file SYSCON {":STATUS():"}."
      GO A300_EXIT
   END

   ;*******************
   ;* System Table File
   ;*******************
   OPEN "SYSTBL" TO SYSTBL
   ON ERROR
      ERR_CODE = "A300-ERROR-2-1"
      ERR_MSG  = "Fatal error occurs while opening file SYSTBL {":STATUS():"}."
      GO A300_EXIT
   END THEN
      SYSTBL_ID  = ""
      SYSTBL_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-2-2"
      ERR_MSG  = "Unable to open file SYSTBL {":STATUS():"}."
      GO A300_EXIT
   END

   ;*********************
   ;* System IICOMBO File
   ;*********************
   OPEN "IICOMBO" TO IICOMBO
   ON ERROR
      ERR_CODE = "A300-ERROR-3-1"
      ERR_MSG  = "Fatal error occurs while opening file IICOMBO {":STATUS():"}."
      GO A300_EXIT
   END THEN
      IICOMBO_ID  = ""
      IICOMBO_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-3-2"
      ERR_MSG  = "Unable to open file IICOMBO {":STATUS():"}."
      GO A300_EXIT
   END

   ;******************
   ;* Item Master File
   ;******************
   OPEN "ITMMST" TO ITMMST
   ON ERROR
      ERR_CODE = "A300-ERROR-4-1"
      ERR_MSG  = "Fatal error occurs while opening file ITMMST {":STATUS():"}."
      GO A300_EXIT
   END THEN
      ITMMST_ID  = ""
      ITMMST_REC = ""
      ITMMST_REC_OLD = ""
   END ELSE
      ERR_CODE = "A300-ERROR-4-2"
      ERR_MSG  = "Unable to open file ITMMST {":STATUS():"}."
      GO A300_EXIT
   END

   ;***************************
   ;* Item Cross Reference File
   ;***************************
   OPEN "ITMXRF" TO ITMXRF
   ON ERROR
      ERR_CODE = "A300-ERROR-5-1"
      ERR_MSG  = "Fatal error occurs while opening file ITMXRF {":STATUS():"}."
      GO A300_EXIT
   END THEN
      ITMXRF_ID  = ""
      ITMXRF_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-5-2"
      ERR_MSG  = "Unable to open file ITMXRF {":STATUS():"}."
      GO A300_EXIT
   END

   ;*********************
   ;* Item Workbench File
   ;*********************
   OPEN "ITMMSTWRK" TO ITMMSTWRK
   ON ERROR
      ERR_CODE = "A300-ERROR-6-1"
      ERR_MSG  = "Fatal error occurs while opening file ITMMSTWRK {":STATUS():"}."
      GO A300_EXIT
   END THEN
      ITMMSTWRK_ID  = ""
      ITMMSTWRK_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-6-2"
      ERR_MSG  = "Unable to open file ITMMSTWRK {":STATUS():"}."
      GO A300_EXIT
   END

   ;**********************
   ;* Item Master Log File
   ;**********************
   OPEN "ITMMSTLOG" TO ITMMSTLOG
   ON ERROR
      ERR_CODE = "A300-ERROR-7-1"
      ERR_MSG  = "Fatal error occurs while opening file ITMMSTLOG {":STATUS():"}."
      GO A300_EXIT
   END THEN
      ITMMSTLOG_ID  = ""
      ITMMSTLOG_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-7-2"
      ERR_MSG  = "Unable to open file ITMMSTLOG {":STATUS():"}."
      GO A300_EXIT
   END

   ;***********************************
   ;* Canplas Item Cross Reference File
   ;***********************************
   OPEN "CANPLASXRF" TO CANPLASXRF
   ON ERROR
      ERR_CODE = "A300-ERROR-8-1"
      ERR_MSG  = "Fatal error occurs while opening file CANPLASXRF {":STATUS():"}."
      GO A300_EXIT
   END THEN
      CANPLASXRF_ID  = ""
      CANPLASXRF_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-8-2"
      ERR_MSG  = "Unable to open file CANPLASXRF {":STATUS():"}."
      GO A300_EXIT
   END

   ;*****************
   ;* BOM Master File
   ;*****************
   OPEN "BOMMST" TO BOMMST
   ON ERROR
      ERR_CODE = "A300-ERROR-9-1"
      ERR_MSG  = "Fatal error occurs while opening file BOMMST {":STATUS():"}."
      GO A300_EXIT
   END THEN
      BOMMST_ID  = ""
      BOMMST_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-9-2"
      ERR_MSG  = "Unable to open file BOMMST {":STATUS():"}."
      GO A300_EXIT
   END

   ;****************************
   ;* PIM Integration Delta File
   ;****************************
   OPEN "PIMFLO" TO PIMFLO
   ON ERROR
      ERR_CODE = "A300-ERROR-10-1"
      ERR_MSG  = "Fatal error occurs while opening file PIMFLO {":STATUS():"}."
      GO A300_EXIT
   END THEN
      PIMFLO_ID  = ""
      PIMFLO_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-10-2"
      ERR_MSG  = "Unable to open file PIMFLO {":STATUS():"}."
      GO A300_EXIT
   END

   ;**************
   ;* STDCOMM File
   ;**************
   OPEN "STDCOMM" TO STDCOMM
   ON ERROR
      ERR_CODE = "A300-ERROR-11-1"
      ERR_MSG  = "Fatal error occurs while opening file STDCOMM {":STATUS():"}."
      GO A300_EXIT
   END THEN
      STDCOMM_ID  = ""
      STDCOMM_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-11-2"
      ERR_MSG  = "Unable to open file STDCOMM {":STATUS():"}."
      GO A300_EXIT
   END

   ;*******************
   ;* Address Book File
   ;*******************
   OPEN "ADDRESSBOOK" TO ADDRESSBOOK
   ON ERROR
      ERR_CODE = "A300-ERROR-12-1"
      ERR_MSG  = "Fatal error occurs while opening file ADDRESSBOOK {":STATUS():"}."
      GO A300_EXIT
   END THEN
      ADDRESSBOOK_ID  = ""
      ADDRESSBOOK_REC = ""
   END ELSE
      ERR_CODE = "A300-ERROR-12-2"
      ERR_MSG  = "Unable to open file ADDRESSBOOK {":STATUS():"}."
      GO A300_EXIT
   END

A300_EXIT:
   RETURN


*******************************************
* Main Process Data Structure & Algorithm *
*******************************************
A400_MAIN_PROCESS:

   GOSUB B100_READ_PIM_STEPXML_DATA_MAPPING_SYSCON_SETUP
   IF ERR_CODE # "" THEN
      GO A400_EXIT
   END

   GOSUB B200_OPEN_PIM_STEPXML_DOCUMENT_TO_XDOM
   IF ERR_CODE # "" THEN
      GO A400_EXIT
   END

   GOSUB B300_PARSE_PIM_STEPXML_XDOM
   IF ERR_CODE # "" THEN
      GO A400_EXIT
   END

   GOSUB B400_COMMIT_PIM_STEPXML_DATA
   IF ERR_CODE # "" THEN
      GO A400_EXIT
   END

   GOSUB B500_EMAIL_SUMMARY_REPORT
   IF ERR_CODE # "" THEN
      GO A400_EXIT
   END

A400_EXIT:
   RETURN


****************
* Return State *
****************
A500_CONCLUSION:

   IF ERR_CODE # "" AND ERR_CODE # 0 THEN
      ;* get current timestamp
      MILLISECOND = FIELD(SYSTEM(12)/1000,'.',2)
      BEGIN CASE
      CASE LEN(MILLISECOND) = 0
         MILLISECOND = "000"
      CASE LEN(MILLISECOND) = 1
         MILLISECOND := "00"
      CASE LEN(MILLISECOND) = 2
         MILLISECOND := "0"
      END CASE
      TIMESTAMP = OCONV(FIELD(SYSTEM(12)/1000,'.',1),"MTS"):".":MILLISECOND
      STATUS = "[":TIMESTAMP:"] Program ":PROGRAM:" in ":ACNT_NAME:" aborted at ":ERR_CODE:": ":ERR_MSG:CHAR(13)

      ;* email the PIM integration process error log
      GOSUB B510_EMAIL_ERROR_LOG
      IF ERR_CODE # "" THEN
         STATUS := CHAR(13):"[":TIMESTAMP:"] Program ":PROGRAM:" in ":ACNT_NAME:" aborted at ":ERR_CODE:": ":ERR_MSG
      END
   END

   @USER.RETURN.CODE = 0

A500_EXIT:
   RETURN  ;* this subroutine exits here (pass control back to caller program)

*****************************************************************************
* Read PIM Integration Request STEPXML Document Data Mapping (SYSCON Setup) *
*****************************************************************************
B100_READ_PIM_STEPXML_DATA_MAPPING_SYSCON_SETUP:

   ;***********************************************
   ;* Read STEPXML Entity data mapping SYSCON setup
   ;***********************************************
   SYSCON_ID = "PIM.STEPXML.DATA.MAPPING.ENTITY"
   READ SYSCON_REC FROM SYSCON, SYSCON_ID
   ON ERROR
      ERR_CODE = "B100-ERROR-1-1"
      ERR_MSG  = "Unable to read record ":SYSCON_ID:" in file SYSCON {":STATUS():"}."
      GO B100_EXIT
   END THEN
      INFOFLO_SYSCON_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_LIST = TRIM(FIELD(SYSCON_REC<1>,';',1),' ','A')  ;* Entity DangerousGood
      INFOFLO_SYSCON_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_LIST = TRIM(FIELD(SYSCON_REC<2>,';',1),' ','A')  ;* Entity TariffCode
      SWAP @VM WITH @AM IN INFOFLO_SYSCON_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_LIST
      SWAP @VM WITH @AM IN INFOFLO_SYSCON_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_LIST
   END ELSE
      ERR_CODE = "B100-ERROR-1-2"
      ERR_MSG  = "Record ":SYSCON_ID:" does not exist in file SYSCON."
      GO B100_EXIT
   END

   ;************************************************
   ;* Read STEPXML Product data mapping SYSCON setup
   ;************************************************
   SYSCON_ID = "PIM.STEPXML.DATA.MAPPING.PRODUCT"
   READ SYSCON_REC FROM SYSCON, SYSCON_ID
   ON ERROR
      ERR_CODE = "B100-ERROR-2-1"
      ERR_MSG  = "Unable to read record ":SYSCON_ID:" in file SYSCON {":STATUS():"}."
      GO B100_EXIT
   END THEN
      INFOFLO_SYSCON_PIM_STEPXML_PRODUCT_ATTRIBUTE_LIST = TRIM(FIELD(SYSCON_REC<1>,';',1),' ','A')
      SWAP @VM WITH @AM IN INFOFLO_SYSCON_PIM_STEPXML_PRODUCT_ATTRIBUTE_LIST
      SWAP "[[" WITH "[]" IN INFOFLO_SYSCON_PIM_STEPXML_PRODUCT_ATTRIBUTE_LIST  ;* char "]" is reserved as value delimter for SYSCON table, has to use "[" instead
   END ELSE
      ERR_CODE = "B100-ERROR-2-2"
      ERR_MSG  = "Record ":SYSCON_ID:" does not exist in file SYSCON."
      GO B100_EXIT
   END

   ;************************************************
   ;* Read STEPXML Package data mapping SYSCON setup
   ;************************************************
   SYSCON_ID = "PIM.STEPXML.DATA.MAPPING.PACKAGE"
   READ SYSCON_REC FROM SYSCON, SYSCON_ID
   ON ERROR
      ERR_CODE = "B100-ERROR-3-1"
      ERR_MSG  = "Unable to read record ":SYSCON_ID:" in file SYSCON {":STATUS():"}."
      GO B100_EXIT
   END THEN
      INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_LIST = TRIM(FIELD(SYSCON_REC<1>,';',1),' ','A')  ;* Package Code
      INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_ATTRIBUTE_LIST      = TRIM(FIELD(SYSCON_REC<2>,';',1),' ','A')  ;* Package
      SWAP @VM WITH @AM IN INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_LIST
      SWAP @VM WITH @AM IN INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_ATTRIBUTE_LIST
   END ELSE
      ERR_CODE = "B100-ERROR-3-2"
      ERR_MSG  = "Record ":SYSCON_ID:" does not exist in file SYSCON."
      GO B100_EXIT
   END

   ;**************************************************
   ;* Read STEPXML Outbound Integration Constant Setup
   ;**************************************************
   SYSCON_ID = "PIM.OUTBOUND.INTEGRATION.CONSTANT"
   READ SYSCON_REC FROM SYSCON, SYSCON_ID
   ON ERROR
      ERR_CODE = "B500-ERROR-4-1"
      ERR_MSG  = "Unable to read record ":SYSCON_ID:" in file SYSCON { ":STATUS():" }."
      GO B500_EXIT
   END THEN
      EMAIL_REPORT          = TRIM(FIELD(SYSCON_REC<1>,';',1),' ','A')
      IT_SUPPORT_RECIPIENTS = TRIM(FIELD(SYSCON_REC<2>,';',1),' ','A')
      PIM_ADMIN_RECIPIENTS  = TRIM(FIELD(SYSCON_REC<3>,';',1),' ','A')
      MAX_DOM_NODE          = TRIM(FIELD(SYSCON_REC<4>,';',1),' ','A')
      SWAP @VM WITH "," IN IT_SUPPORT_RECIPIENTS
      SWAP @VM WITH "," IN PIM_ADMIN_RECIPIENTS

      ;* increase dimensioned array size based on SYSCON confirguration
      IF MAX_DOM_NODE > INIT_DOM_NODE THEN
         DIM XDOM_NODES(MAX_DOM_NODE)
         DIM XDOM_PARENT_NODES(MAX_DOM_NODE)
         DIM XDOM_CHILD_NODES(MAX_DOM_NODE)
         DIM XDOM_SUBCHILD_NODES(MAX_DOM_NODE)
      END
   END ELSE
      ERR_CODE = "B500-ERROR-4-2"
      ERR_MSG  = "Record ":SYSCON_ID:" does not exist in file SYSCON."
      GO B500_EXIT
   END

B100_EXIT:
   RETURN


*********************************************************
* Open PIM Integration Request STEPXML Document To XDOM *
*********************************************************
B200_OPEN_PIM_STEPXML_DOCUMENT_TO_XDOM:

   ;* build XDOM from per integration request STEPXML string
   RTN_CODE = XDOMOpen(STEPXML, XML.FROM.STRING, XDOM)
   IF RTN_CODE # XML.SUCCESS THEN
      RESULT = XMLGetError(RTN_CODE, RTN_MSG)
      ERR_CODE = "B200-ERROR-1"
      ERR_MSG  = "Unable to open XML document {":RTN_MSG:"}."
      GO B200_EXIT
   END

B200_EXIT:
   RETURN


*****************************************************************************
* Parse PIM Integration Request STEPXML XDOM Data: Entity, Product, Package *
*****************************************************************************
B300_PARSE_PIM_STEPXML_XDOM:

   GOSUB B310_PARSE_PIM_STEPXML_ENTITY_DG_DATA
   IF ERR_CODE # "" THEN
      GO B300_EXIT
   END

   GOSUB B311_PARSE_PIM_STEPXML_ENTITY_TC_DATA
   IF ERR_CODE # "" THEN
      GO B300_EXIT
   END

   GOSUB B320_PARSE_PIM_STEPXML_PRODUCT_DATA
   IF ERR_CODE # "" THEN
      GO B300_EXIT
   END

   GOSUB B330_PARSE_PIM_STEPXML_PACKAGE_DATA
   IF ERR_CODE # "" THEN
      GO B300_EXIT
   END

   GOSUB B331_PARSE_PIM_STEPXML_PACKAGE_CODE_DATA
   IF ERR_CODE # "" THEN
      GO B300_EXIT
   END

B300_EXIT:
   RETURN


**************************************************************************************************
* Parse PIM Integration Request STEPXML Entity DangerousGood Data: Analyze -> Validate & Extract *
**************************************************************************************************
B310_PARSE_PIM_STEPXML_ENTITY_DG_DATA:

   ;**************************************************************************************************************
   ;* find all our Entity DG parent nodes with the XPATH and store them in our dimensioned array XDOM_PARENT_NODES
   ;**************************************************************************************************************
   XPATH_ROOT = "/STEP-ProductInformation/Entities/Entity"
   XQUERY     = "[boolean(@ID)]"
   XPATH      = XPATH_ROOT:XQUERY
   GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
   IF ERR_CODE # "" THEN
      GO B310_EXIT
   END ELSE
      ENTITY_DG_FOUND       = @FALSE
      PARENT_NODE_CNT       = XDOM_NODE_CNT   ;* total Entity nodes found
      MAT XDOM_PARENT_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
      I = 0                                   ;* Entity node counter
      FOR X = 1 TO PARENT_NODE_CNT
         ;*********************************************************
         ;* read attribute "UserTypeID" from per Entity parent node
         ;*********************************************************
         ATTR_ID  = "UserTypeID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B310-ERROR-1"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Entities<":X:"> for DangerousGood."
            GO B310_EXIT
         END
         PARENT_NODE_ATTR_USERTYPEID_VALUE = ATTR_VALUE
         IF PARENT_NODE_ATTR_USERTYPEID_VALUE = "DangerousGood" THEN
            ENTITY_DG_FOUND = @TRUE  ;* Entity DG node found
            I += 1
         END ELSE
            CONTINUE  ;* skip if all other UserTypeID(s)
         END

         ;****************************************************
         ;* read attribute "ID" from per Entity DG parent node
         ;****************************************************
         ATTR_ID  = "ID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B310-ERROR-2"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Entities<":X:"> for DangerousGood."
            GO B310_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   = ATTR_ID
         PARENT_NODE_ATTR_ID_VALUE  = ATTR_VALUE
         PARENT_NODE_ATTR_ID_MATRIX = ATTR_ID:@SM:ATTR_VALUE
         PIM_STEPXML_ENTITY_DG_ATTR_NAMES<I>  = PARENT_NODE_ATTR_ID_NAME
         PIM_STEPXML_ENTITY_DG_DATA_MATRIX<I> = PARENT_NODE_ATTR_ID_MATRIX

         ;********************************************************************
         ;* Build xquery used in xpath to locate specific Entity DG child node
         ;********************************************************************
         XQUERY = "[@UserTypeID='":PARENT_NODE_ATTR_USERTYPEID_VALUE:"' and boolean(@ID) and @ID='":PARENT_NODE_ATTR_ID_VALUE:"']"

         ;********************************************************************************************************************
         ;* find all our Entity DG child "Value" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;********************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/Value"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B310_EXIT
         END ELSE
            ;*************************************************************
            ;* extract data from our found Entity DG child "Value" node(s)
            ;*************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Entity DG child "Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C201_GET_STEPXML_VALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B310_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_ENTITY_DG_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_ENTITY_DG_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;*************************************************************************************************************************
         ;* find all our Entity DG child "ValueGroup" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;*************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/ValueGroup"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B310_EXIT
         END ELSE
            ;***************************************************************************
            ;* extract data from our found Entity DG child "ValueGroup -> Value" node(s)
            ;***************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Entity DG child "ValueGroup -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C202_GET_STEPXML_VALUEGROUP_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B310_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_ENTITY_DG_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_ENTITY_DG_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;*************************************************************************************************************************
         ;* find all our Entity DG child "MultiValue" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;*************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/MultiValue"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B310_EXIT
         END ELSE
            ;***************************************************************************
            ;* extract data from our found Entity DG child "MultiValue -> Value" node(s)
            ;***************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Entity DG child "Multivalue -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C203_GET_STEPXML_MULTIVALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B310_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_ENTITY_DG_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_ENTITY_DG_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;*************************************************
         ;* validate per Entity DG attribute name extracted
         ;*************************************************
         TOTAL = DCOUNT(PIM_STEPXML_ENTITY_DG_ATTR_NAMES<I>, @VM)
         FOR CNT = 1 TO TOTAL
            ATTRIBUTE_NAME = PIM_STEPXML_ENTITY_DG_ATTR_NAMES<I,CNT>
            FIND ATTRIBUTE_NAME IN INFOFLO_SYSCON_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_LIST SETTING AM_POS,VM_POS,SM_POS THEN
               ;* matched basic attribute name found -> valid
            END ELSE
               FIND ATTRIBUTE_NAME IN ERR_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_NAME_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  ;* skip duplicate(s)
               END ELSE
                  ERR_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_NAME_LIST<I,-1> = ATTRIBUTE_NAME
               END
            END
         NEXT CNT
      NEXT X
   END

B310_EXIT:
   RETURN


***********************************************************************************************
* Parse PIM Integration Request STEPXML Entity TariffCode Data: Analyze -> Validate & Extract *
***********************************************************************************************
B311_PARSE_PIM_STEPXML_ENTITY_TC_DATA:

   ;**************************************************************************************************************
   ;* find all our Entity TC parent nodes with the XPATH and store them in our dimensioned array XDOM_PARENT_NODES
   ;**************************************************************************************************************
   XPATH_ROOT = "/STEP-ProductInformation/Entities/Entity"
   XQUERY     = "[boolean(@ID)]"
   XPATH      = XPATH_ROOT:XQUERY
   GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
   IF ERR_CODE # "" THEN
      GO B311_EXIT
   END ELSE
      ENTITY_TC_FOUND       = @FALSE
      PARENT_NODE_CNT       = XDOM_NODE_CNT   ;* total Entity nodes found
      MAT XDOM_PARENT_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
      I = 0                                   ;* Entity node counter
      FOR X = 1 TO PARENT_NODE_CNT
         ;*********************************************************
         ;* read attribute "UserTypeID" from per Entity parent node
         ;*********************************************************
         ATTR_ID  = "UserTypeID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B311-ERROR-1"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Entities<":X:">."
            GO B311_EXIT
         END
         PARENT_NODE_ATTR_USERTYPEID_VALUE = ATTR_VALUE
         IF PARENT_NODE_ATTR_USERTYPEID_VALUE = "TariffCode" THEN
            ENTITY_TC_FOUND = @TRUE  ;* Entity TC node found
            I += 1
         END ELSE
            CONTINUE  ;* skip if all other UserTypeID(s)
         END

         ;****************************************************
         ;* read attribute "ID" from per Entity TC parent node
         ;****************************************************
         ATTR_ID  = "ID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B311-ERROR-2"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Entities<":X:"> for ": PARENT_NODE_ATTR_USERTYPEID_VALUE:"."
            GO B311_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   = ATTR_ID
         PARENT_NODE_ATTR_ID_VALUE  = ATTR_VALUE
         PARENT_NODE_ATTR_ID_MATRIX = ATTR_ID:@SM:ATTR_VALUE
         PIM_STEPXML_ENTITY_TC_ATTR_NAMES<I>  = PARENT_NODE_ATTR_ID_NAME
         PIM_STEPXML_ENTITY_TC_DATA_MATRIX<I> = PARENT_NODE_ATTR_ID_MATRIX

         ;********************************************************************
         ;* Build xquery used in xpath to locate specific Entity TC child node
         ;********************************************************************
         XQUERY = "[@UserTypeID='":PARENT_NODE_ATTR_USERTYPEID_VALUE:"' and boolean(@ID) and @ID='":PARENT_NODE_ATTR_ID_VALUE:"']"

         ;********************************************************************************************************************
         ;* find all our Entity TC child "Value" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;********************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/Value"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B311_EXIT
         END ELSE
            ;*************************************************************
            ;* extract data from our found Entity TC child "Value" node(s)
            ;*************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Entity TC child "Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C201_GET_STEPXML_VALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B311_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_ENTITY_TC_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_ENTITY_TC_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;*************************************************************************************************************************
         ;* find all our Entity TC child "ValueGroup" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;*************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/ValueGroup"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B311_EXIT
         END ELSE
            ;***************************************************************************
            ;* extract data from our found Entity TC child "ValueGroup -> Value" node(s)
            ;***************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Entity child "ValueGroup -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C202_GET_STEPXML_VALUEGROUP_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B311_EXIT
               END
               PIM_STEPXML_ENTITY_TC_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
               PIM_STEPXML_ENTITY_TC_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
            END
         END

         ;*************************************************************************************************************************
         ;* find all our Entity TC child "MultiValue" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;*************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/MultiValue"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B311_EXIT
         END ELSE
            ;***************************************************************************
            ;* extract data from our found Entity TC child "MultiValue -> Value" node(s)
            ;***************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Entity TC child "Multivalue -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C203_GET_STEPXML_MULTIVALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B311_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_ENTITY_TC_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_ENTITY_TC_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;*************************************************
         ;* validate per Entity TC attribute name extracted
         ;*************************************************
         TOTAL = DCOUNT(PIM_STEPXML_ENTITY_TC_ATTR_NAMES<I>, @VM)
         FOR CNT = 1 TO TOTAL
            ATTRIBUTE_NAME = PIM_STEPXML_ENTITY_TC_ATTR_NAMES<I,CNT>
            FIND ATTRIBUTE_NAME IN INFOFLO_SYSCON_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_LIST SETTING AM_POS,VM_POS,SM_POS THEN
               ;* matched basic attribute name found -> valid
            END ELSE
               FIND ATTRIBUTE_NAME IN ERR_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_NAME_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  ;* skip duplicate(s)
               END ELSE
                  ERR_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_NAME_LIST<I,-1> = ATTRIBUTE_NAME
               END
            END
         NEXT CNT
      NEXT X
   END

B311_EXIT:
   RETURN


*************************************************************************************
* Parse PIM Integration Request STEPXML Product Data: Analyze -> Validate & Extract *
*************************************************************************************
B320_PARSE_PIM_STEPXML_PRODUCT_DATA:

   ;************************************************************************************************************
   ;* find all our Product parent nodes with the XPATH and store them in our dimensioned array XDOM_PARENT_NODES
   ;************************************************************************************************************
   XPATH_ROOT = "/STEP-ProductInformation/Products/Product"
   XQUERY     = "[boolean(@ID)]"
   XPATH      = XPATH_ROOT:XQUERY
   GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
   IF ERR_CODE # "" THEN
      GO B320_EXIT
   END ELSE
      ;* CRT "Product Node: ":XDOM_NODE_CNT
      PRODUCT_FOUND         = @FALSE
      PARENT_NODE_CNT       = XDOM_NODE_CNT   ;* total Product nodes found
      MAT XDOM_PARENT_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
      I = 0                                   ;* Product node counter
      FOR X = 1 TO PARENT_NODE_CNT
         ;**********************************************************
         ;* read attribute "UserTypeID" from per Product parent node
         ;**********************************************************
         ATTR_ID  = "UserTypeID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B320-ERROR-1"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:">."
            GO B320_EXIT
         END
         PARENT_NODE_ATTR_USERTYPEID_VALUE = ATTR_VALUE
         IF PARENT_NODE_ATTR_USERTYPEID_VALUE = "Product" OR PARENT_NODE_ATTR_USERTYPEID_VALUE = "ObsoleteProduct" THEN
            PRODUCT_FOUND = @TRUE  ;* Product node found
            CHILD_NODE_ATTR_NAMES  = ""
            CHILD_NODE_ATTR_MATRIX = ""
            I += 1
         END ELSE
            CONTINUE  ;* skip if the above UserTypeID not found
         END

         ;**************************************************
         ;* read attribute "ID" from per Product parent node
         ;**************************************************
         ATTR_ID  = "ID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B310-ERROR-2"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:"> for ":PARENT_NODE_ATTR_USERTYPEID_VALUE:"."
            GO B320_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   = ATTR_ID
         PARENT_NODE_ATTR_ID_VALUE  = ATTR_VALUE
         PARENT_NODE_ATTR_ID_MATRIX = ATTR_ID:@SM:ATTR_VALUE
         PIM_STEPXML_PRODUCT_ATTR_NAMES<I>  = PARENT_NODE_ATTR_ID_NAME
         PIM_STEPXML_PRODUCT_DATA_MATRIX<I> = PARENT_NODE_ATTR_ID_MATRIX
         PRODUCT_STEPID_LIST<I> = ATTR_VALUE

         ;****************************************************
         ;* Build xquery used in xpath to locate specific node
         ;****************************************************
         XQUERY = "[(@UserTypeID='":PARENT_NODE_ATTR_USERTYPEID_VALUE:"') and boolean(@ID) and @ID='":PARENT_NODE_ATTR_ID_VALUE:"']"

         ;*******************************************************************************************************
         ;* read the ProductToMaterial attribute "ClassificationID" from the "ClassificationReference" child node
         ;*******************************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/ClassificationReference[@Type='ProductToMaterial']"
         ATTR_ID = "ClassificationID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "ProductToMaterial"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "ProductToMaterial":@SM:ATTR_VALUE
         END

         ;*****************************************************************************************************************
         ;* read the ProductToInfofloProductLine attribute "ClassificationID" from the "ClassificationReference" child node
         ;*****************************************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/ClassificationReference[@Type='ProductToInfofloProductLine']"
         ATTR_ID = "ClassificationID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "ProductToInfofloProductLine"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "ProductToInfofloProductLine":@SM:ATTR_VALUE
         END

         ;**************************************************************************************************
         ;* read the ProductToSupersededBy attribute "ProductID" from the "ProductCrossReference" child node
         ;**************************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/ProductCrossReference[@Type='ProductToSupersededBy']"
         ATTR_ID = "ProductID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "ProductToSupersededBy"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "ProductToSupersededBy":@SM:ATTR_VALUE
            PRODUCT_TO_SUPERSEDED_BY_STEPID_LIST<-1> = ATTR_VALUE
         END

         ;************************************************************************************************
         ;* read the ProductToSubstitute attribute "ProductID" from the "ProductCrossReference" child node
         ;************************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/ProductCrossReference[@Type='ProductToSubstitute']"
         ATTR_ID = "ProductID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "ProductToSubstitute"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "ProductToSubstitute":@SM:ATTR_VALUE
            PRODUCT_TO_SUBSTITUTE_STEPID_LIST<-1> = ATTR_VALUE
         END

         ;****************************************************************************************
         ;* read the ProductDGCode attribute "EntityID" from the "EntityCrossReference" child node
         ;****************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/EntityCrossReference[@Type='ProductDGCode']"
         ATTR_ID = "EntityID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "ProductDGCode"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "ProductDGCode":@SM:ATTR_VALUE
         END

         ;********************************************************************************************
         ;* read the ProductTariffCode attribute "EntityID" from the "EntityCrossReference" child node
         ;********************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/EntityCrossReference[@Type='ProductTariffCode']"
         ATTR_ID = "EntityID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "ProductTariffCode"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "ProductTariffCode":@SM:ATTR_VALUE
         END
         IF CHILD_NODE_ATTR_NAMES # "" THEN
            PIM_STEPXML_PRODUCT_ATTR_NAMES<I>  := @VM:CHILD_NODE_ATTR_NAMES
            PIM_STEPXML_PRODUCT_DATA_MATRIX<I> := @VM:CHILD_NODE_ATTR_MATRIX
         END

         ;******************************************************************************************************************
         ;* find all our Product child "Value" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;******************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/Value"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B320_EXIT
         END ELSE
            ;***********************************************************
            ;* extract data from our found Product child "Value" node(s)
            ;***********************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Product child "Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C201_GET_STEPXML_VALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B320_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PRODUCT_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PRODUCT_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;***********************************************************************************************************************
         ;* find all our Product child "ValueGroup" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;***********************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/ValueGroup"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B320_EXIT
         END ELSE
            ;*************************************************************************
            ;* extract data from our found Product child "ValueGroup -> Value" node(s)
            ;*************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Product child "ValueGroup -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C202_GET_STEPXML_VALUEGROUP_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B320_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PRODUCT_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PRODUCT_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;***********************************************************************************************************************
         ;* find all our Product child "MultiValue" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;***********************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/MultiValue"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B320_EXIT
         END ELSE
            ;*************************************************************************
            ;* extract data from our found Product child "MultiValue -> Value" node(s)
            ;*************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Product child "Multivalue -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C203_GET_STEPXML_MULTIVALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B320_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PRODUCT_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PRODUCT_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;****************************************************
         ;* validate per Product node attribute name extracted
         ;****************************************************
         TOTAL = DCOUNT(PIM_STEPXML_PRODUCT_ATTR_NAMES<I>, @VM)
         FOR CNT = 1 TO TOTAL
            ATTRIBUTE_NAME = PIM_STEPXML_PRODUCT_ATTR_NAMES<I,CNT>
            FIND ATTRIBUTE_NAME IN INFOFLO_SYSCON_PIM_STEPXML_PRODUCT_ATTRIBUTE_LIST SETTING AM_POS,VM_POS,SM_POS THEN
               ;* matched basic attribute name found -> valid
            END ELSE
               FIND ATTRIBUTE_NAME IN ERR_PIM_STEPXML_PRODUCT_ATTRIBUTE_NAME_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  ;* skip duplicate(s)
               END ELSE
                  ERR_PIM_STEPXML_PRODUCT_ATTRIBUTE_NAME_LIST<I,-1> = ATTRIBUTE_NAME
               END
            END
         NEXT CNT
      NEXT X
   END

B320_EXIT:
   RETURN


*************************************************************************************
* Parse PIM Integration Request STEPXML Package Data: Analyze -> Validate & Extract *
*************************************************************************************
B330_PARSE_PIM_STEPXML_PACKAGE_DATA:

   ;************************************************************************************************************
   ;* find all our Product parent nodes with the XPATH and store them in our dimensioned array XDOM_PARENT_NODES
   ;************************************************************************************************************
   XPATH_ROOT = "/STEP-ProductInformation/Products/Product"
   XQUERY     = "[boolean(@ID)]"
   XPATH      = XPATH_ROOT:XQUERY
   GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
   IF ERR_CODE # "" THEN
      GO B330_EXIT
   END ELSE
      PACKAGE_FOUND         = @FALSE
      PARENT_NODE_CNT       = XDOM_NODE_CNT   ;* total Product nodes found
      MAT XDOM_PARENT_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
      I = 0                                   ;* Package node counter
      FOR X = 1 TO PARENT_NODE_CNT
         ;**********************************************************
         ;* read attribute "UserTypeID" from per Product parent node
         ;**********************************************************
         ATTR_ID  = "UserTypeID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B330-ERROR-1"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:"> for package."
            GO B330_EXIT
         END
         PARENT_NODE_ATTR_USERTYPEID_VALUE = ATTR_VALUE
         IF NOT(INDEX(PARENT_NODE_ATTR_USERTYPEID_VALUE, "Packaged", 1)) THEN
            CONTINUE ;* skip if UserTypeID not contain "Packaged"
         END ELSE
            PACKAGE_FOUND = @TRUE
            CHILD_NODE_ATTR_NAMES  = ""
            CHILD_NODE_ATTR_MATRIX = ""
            I += 1  ;* Package node found
         END

         ;**************************************************
         ;* read attribute "ID" from per Package parent node
         ;**************************************************
         ATTR_ID  = "ID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B330-ERROR-2"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:"> for Package."
            GO B330_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   = ATTR_ID
         PARENT_NODE_ATTR_ID_VALUE  = ATTR_VALUE
         PARENT_NODE_ATTR_ID_MATRIX = ATTR_ID:@SM:ATTR_VALUE

         ;********************************************************
         ;* read attribute "ParentID" from per Package parent node
         ;********************************************************
         ATTR_ID  = "ParentID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B330-ERROR-3"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:"> for Package."
            GO B330_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   := @VM:ATTR_ID
         PARENT_NODE_ATTR_ID_MATRIX := @VM:ATTR_ID:@SM:ATTR_VALUE
         PIM_STEPXML_PACKAGE_ATTR_NAMES<I>  = PARENT_NODE_ATTR_ID_NAME
         PIM_STEPXML_PACKAGE_DATA_MATRIX<I> = PARENT_NODE_ATTR_ID_MATRIX

         ;****************************************************
         ;* Build xquery used in xpath to locate specific node
         ;****************************************************
         XQUERY = "[starts-with(@UserTypeID,'Packaged') and boolean(@ID) and @ID='":PARENT_NODE_ATTR_ID_VALUE:"']"

         ;************************************************************************************
         ;* read the attribute "ProductID" from the Package "ProductCrossReference" child node
         ;************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/ProductCrossReference[starts-with(@Type,'Packaged')]"
         ATTR_ID = "ProductID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "ProductID"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "ProductID":@SM:ATTR_VALUE
            PIM_STEPXML_PACKAGE_ATTR_NAMES<I>  := @VM:CHILD_NODE_ATTR_NAMES
            PIM_STEPXML_PACKAGE_DATA_MATRIX<I> := @VM:CHILD_NODE_ATTR_MATRIX
         END

         ;**************************************************************************************************************************************************
         ;* find all our Package ProductCrossReferece "MetaData" child "Value" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;**************************************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/ProductCrossReference[starts-with(@Type,'Packaged')]/MetaData/Value"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B330_EXIT
         END ELSE
            ;********************************************************************************************
            ;* extract data from our found Package ProductCrossReference "MetaData" child "Value" node(s)
            ;********************************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Package ProductCrossReference "MetaData" child "Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C201_GET_STEPXML_VALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B330_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;******************************************************************************************************************
         ;* find all our Package child "Value" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;******************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/Value"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B330_EXIT
         END ELSE
            ;***********************************************************
            ;* extract data from our found Package child "Value" node(s)
            ;***********************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Package child "Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C201_GET_STEPXML_VALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B330_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;***********************************************************************************************************************
         ;* find all our Package child "ValueGroup" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;***********************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/ValueGroup"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B330_EXIT
         END ELSE
            ;*************************************************************************
            ;* extract data from our found Package child "ValueGroup -> Value" node(s)
            ;*************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Package child "ValueGroup -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C202_GET_STEPXML_VALUEGROUP_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B330_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;***********************************************************************************************************************
         ;* find all our Package child "MultiValue" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;***********************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/MultiValue"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B330_EXIT
         END ELSE
            ;*************************************************************************
            ;* extract data from our found Package child "MultiValue -> Value" node(s)
            ;*************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Package child "Multivalue -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C203_GET_STEPXML_MULTIVALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B330_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;******************************************
         ;* validate per Package node attribute name
         ;******************************************
         TOTAL = DCOUNT(PIM_STEPXML_PACKAGE_ATTR_NAMES<X>, @VM)
         FOR CNT = 1 TO TOTAL
            ATTRIBUTE_NAME = PIM_STEPXML_PACKAGE_ATTR_NAMES<X,CNT>
            FIND ATTRIBUTE_NAME IN INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_ATTRIBUTE_LIST SETTING AM_POS,VM_POS,SM_POS THEN
               ;* matched basic attribute name found -> valid
            END ELSE
               FIND ATTRIBUTE_NAME IN ERR_PIM_STEPXML_PACKAGE_ATTRIBUTE_NAME_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  ;* skip duplicate(s)
               END ELSE
                  ERR_PIM_STEPXML_PACKAGE_ATTRIBUTE_NAME_LIST<I,-1> = ATTRIBUTE_NAME
               END
            END
         NEXT CNT
      NEXT X
   END

B330_EXIT:
   RETURN


******************************************************************************************
* Parse PIM Integration Request STEPXML Package Code Data: Analyze -> Validate & Extract *
******************************************************************************************
B331_PARSE_PIM_STEPXML_PACKAGE_CODE_DATA:

   ;************************************************************************************************************
   ;* find all our Product parent nodes with the XPATH and store them in our dimensioned array XDOM_PARENT_NODES
   ;************************************************************************************************************
   XPATH_ROOT = "/STEP-ProductInformation/Products/Product"
   XQUERY     = "[boolean(@ID)]"
   XPATH      = XPATH_ROOT:XQUERY
   GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
   IF ERR_CODE # "" THEN
      GO B331_EXIT
   END ELSE
      PACKAGE_CODE_FOUND    = @FALSE
      PARENT_NODE_CNT       = XDOM_NODE_CNT   ;* total Product nodes found
      MAT XDOM_PARENT_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
      I = 0                                   ;* PackageCode node counter
      FOR X = 1 TO PARENT_NODE_CNT
         ;**********************************************************
         ;* read attribute "UserTypeID" from per Product parent node
         ;**********************************************************
         ATTR_ID  = "UserTypeID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B331-ERROR-1"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:">."
            GO B331_EXIT
         END
         PARENT_NODE_ATTR_USERTYPEID_VALUE = ATTR_VALUE

         ;**********************************************************
         ;* count our non-referenced Product PackageCode parent node
         ;**********************************************************
         IF INDEX(PARENT_NODE_ATTR_USERTYPEID_VALUE, "PkgCode", 1) THEN
            PACKAGE_CODE_FOUND = @TRUE
            I += 1  ;* PackageCode node found
         END ELSE
            CONTINUE ;* skip if UserTypeID does not contain "PkgCode" and it's a referenced Product node
         END

         ;******************************************************
         ;* read attribute "ID" from per PackageCode parent node
         ;******************************************************
         ATTR_ID  = "ID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B331-ERROR-2"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:"> for ":PARENT_NODE_ATTR_USERTYPEID_VALUE:"."
            GO B331_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   = ATTR_ID
         PARENT_NODE_ATTR_ID_VALUE  = ATTR_VALUE
         PARENT_NODE_ATTR_ID_MATRIX = ATTR_ID:@SM:ATTR_VALUE

         ;************************************************************
         ;* read attribute "ParentID" from per PackageCode parent node
         ;************************************************************
         ATTR_ID  = "ParentID"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B331-ERROR-3"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:"> for PackageCode."
            GO B331_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   := @VM:ATTR_ID
         PARENT_NODE_ATTR_ID_MATRIX := @VM:ATTR_ID:@SM:ATTR_VALUE

         ;**************************************************************
         ;* read attribute "Referenced" from per PackageCode parent node
         ;**************************************************************
         ATTR_ID  = "Referenced"
         FND_NODE = XDOM_PARENT_NODES(X)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            RTN_CODE = "B331-ERROR-4"
            RTN_MSG  = "Unable to read attribute (":ATTR_ID:") from the parent node Products<":X:"> for PackageCode."
            GO B331_EXIT
         END
         PARENT_NODE_ATTR_ID_NAME   := @VM:ATTR_ID
         PARENT_NODE_ATTR_ID_MATRIX := @VM:ATTR_ID:@SM:ATTR_VALUE
         PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<I>  = PARENT_NODE_ATTR_ID_NAME
         PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<I> = PARENT_NODE_ATTR_ID_MATRIX

         ;****************************************************
         ;* Build xquery used in xpath to locate specific node
         ;****************************************************
         XQUERY = "[starts-with(@UserTypeID,'PkgCode') and boolean(@ID) and @ID='":PARENT_NODE_ATTR_ID_VALUE:"']"

         ;***************************************************************************************************
         ;* read the PackageCodeSummaryCode attribute "ProductID" from the "ProductCrossReference" child node
         ;***************************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/ProductCrossReference[@Type='PackageCodeSummaryCode']"
         ATTR_ID = "ProductID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "PackageCodeSummaryCode"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "PackageCodeSummaryCode":@SM:ATTR_VALUE
         END

         ;**********************************************************************************************************
         ;* read the PackageCodeToDefaultNextLevel attribute "ProductID" from the "ProductCrossReference" child node
         ;**********************************************************************************************************
         XPATH   = XPATH_ROOT:XQUERY:"/ProductCrossReference[@Type='PackageCodeToDefaultNextLevel']"
         ATTR_ID = "ProductID"
         GOSUB XDOM.READ.ATTRIBUTE.FROM.NODE
         IF NOT(ERR) THEN  ;* may not exist
            CHILD_NODE_ATTR_NAMES<1,-1>  = "PackageCodeToDefaultNextLevel"
            CHILD_NODE_ATTR_MATRIX<1,-1> = "PackageCodeToDefaultNextLevel":@SM:ATTR_VALUE
            PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<I>  := @VM:CHILD_NODE_ATTR_NAMES
            PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<I> := @VM:CHILD_NODE_ATTR_MATRIX
         END

         ;******************************************************************************************************************************************************
         ;* find all our PackageCode ProductCrossReferece "MetaData" child "Value" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;******************************************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/ProductCrossReference[starts-with(@Type,'PackageCodeToDefaultNextLevel')]/MetaData/Value"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B331_EXIT
         END ELSE
            ;********************************************************************************************
            ;* extract data from our found Package ProductCrossReference "MetaData" child "Value" node(s)
            ;********************************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total Package ProductCrossReference "MetaData" child "Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C201_GET_STEPXML_VALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B331_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;**********************************************************************************************************************
         ;* find all our PackageCode child "Value" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;**********************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/Value"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B331_EXIT
         END ELSE
            ;***************************************************************
            ;* extract data from our found PackageCode child "Value" node(s)
            ;***************************************************************
            * CRT "Value Node: ":XDOM_NODE_CNT
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total PackageCode child "Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C201_GET_STEPXML_VALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B331_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;***************************************************************************************************************************
         ;* find all our PackageCode child "ValueGroup" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;***************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/ValueGroup"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B331_EXIT
         END ELSE
            ;*****************************************************************************
            ;* extract data from our found PackageCode child "ValueGroup -> Value" node(s)
            ;*****************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total PackageCode child "ValueGroup -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C202_GET_STEPXML_VALUEGROUP_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B331_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;***************************************************************************************************************************
         ;* find all our PackageCode child "MultiValue" nodes with the XPATH and store them in our dimensioned array XDOM_CHILD_NODES
         ;***************************************************************************************************************************
         XPATH = XPATH_ROOT:XQUERY:"/Values/MultiValue"
         GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
         IF ERR_CODE # "" THEN
            ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
            GO B331_EXIT
         END ELSE
            ;*****************************************************************************
            ;* extract data from our found PackageCode child "MultiValue -> Value" node(s)
            ;*****************************************************************************
            CHILD_NODE_CNT = XDOM_NODE_CNT  ;* total PackageCode child "Multivalue -> Value" nodes found
            IF CHILD_NODE_CNT > 0 THEN
               MAT XDOM_CHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
               GOSUB C203_GET_STEPXML_MULTIVALUE_CHILD_NODE_DATA
               IF ERR_CODE # "" THEN
                  ERR_MSG := " ==> ":PARENT_NODE_ATTR_ID_VALUE
                  GO B331_EXIT
               END
               IF XDOM_ATTRIBUTE_NAMES # "" THEN
                  PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<I>  := @VM:XDOM_ATTRIBUTE_NAMES
                  PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<I> := @VM:XDOM_ATTRIBUTE_MATRIX
               END
            END
         END

         ;**********************************************
         ;* validate per PackageCode node attribute name
         ;**********************************************
         TOTAL = DCOUNT(PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<X>, @VM)
         FOR CNT = 1 TO TOTAL
            ATTRIBUTE_NAME = PIM_STEPXML_PACKAGE_CODE_ATTR_NAMES<X,CNT>
            FIND ATTRIBUTE_NAME IN INFOFLO_SYSCON_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_LIST SETTING AM_POS,VM_POS,SM_POS THEN
               ;* matched basic attribute name found -> valid
            END ELSE
               FIND ATTRIBUTE_NAME IN ERR_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_NAME_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  ;* skip duplicate(s)
               END ELSE
                  ERR_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_NAME_LIST<I,-1> = ATTRIBUTE_NAME
               END
            END
         NEXT CNT
      NEXT X
   END

B331_EXIT:
   RETURN


******************************************************************************
* Commit PIM Outbound Integration Request STEPXML Data (Write to UniData DB) *
******************************************************************************
B400_COMMIT_PIM_STEPXML_DATA:

   ;****************************************************************
   ;* Each transaction must process the ACID Properties:
   ;* --------------------------------------------------------------
   ;* Atomicity   -> Either all the actions of a transaction occur
   ;*                successfully or the transaction is nullified
   ;*                by rolling back all operations.
   ;* --------------------------------------------------------------
   ;* Consistency -> A transaction moves the database from one valid
   ;*                state to another valid state, and if the
   ;*                transaction is prematurely terminated, the
   ;*                database is returned to its previous valid
   ;*                state.
   ;* --------------------------------------------------------------
   ;* Isolation   -> The actions carried out by a transaction
   ;*                cannot become visible to another transaction
   ;*                until the transaction is committed.
   ;* --------------------------------------------------------------
   ;* Durability  -> Once a transaction completes successfully,
   ;*                its effects cannot be altered without running
   ;*                a compensating transaction.
   ;* --------------------------------------------------------------
   ;* Note: TRANSACTION COMMIT and TRANSACTION ABORT releases all
   ;*       locks your process has set within the transaction
   ;****************************************************************
   TRANSACTION START THEN
      GOSUB B410_WRITE_PIM_STEPXML_ENTITY_DG_DATA_TO_INFOFLO_DB
      IF ERR_CODE # "" THEN
         TRANSACTION ABORT
         ERR_MSG := " ==> Transaction Aborted <=="
         GO B400_EXIT
      END

      GOSUB B411_WRITE_PIM_STEPXML_ENTITY_TC_DATA_TO_INFOFLO_DB
      IF ERR_CODE # "" THEN
         TRANSACTION ABORT
         ERR_MSG := " ==> Transaction Aborted <=="
         GO B400_EXIT
      END

      GOSUB B420_WRITE_PIM_STEPXML_PRODUCT_DATA_TO_INFOFLO_DB
      IF ERR_CODE # "" THEN
         TRANSACTION ABORT
         ERR_MSG := " ==> Transaction Aborted <=="
         GO B400_EXIT
      END

      GOSUB B430_WRITE_PIM_STEPXML_PACKAGE_DATA_TO_INFOFLO_DB
      IF ERR_CODE # "" THEN
         TRANSACTION ABORT
         ERR_MSG := " ==> Transaction Aborted <=="
         GO B400_EXIT
      END

      GOSUB B431_WRITE_PIM_STEPXML_PACKAGE_CODE_DATA_TO_INFOFLO_DB
      IF ERR_CODE # "" THEN
         TRANSACTION ABORT
         ERR_MSG := " ==> Transaction Aborted <=="
         GO B400_EXIT
      END

      TRANSACTION COMMIT THEN
         GOSUB B440_TRANSACTION_COMMIT_POST_ACTION
      END ELSE
         ERR_CODE = "B400-ERROR-1"
         ERR_MSG  = "Transaction Aborted, STATUS = ":STATUS()
         GO B400_EXIT
      END
   END ELSE
      ERR_CODE = "B400-ERROR-2"
      ERR_MSG  = "Failed to start a Transaction, STATUS = ":STATUS()
      GO B400_EXIT
   END

B400_EXIT:
   RETURN


*******************************************************************************
* Write PIM Outbound Integration Request STEPXML Entity DG Data To Infoflo DB *
*******************************************************************************
B410_WRITE_PIM_STEPXML_ENTITY_DG_DATA_TO_INFOFLO_DB:

   ;*******************************
   ;* PIM Entity DangerousGood Info
   ;*******************************
   IF ENTITY_DG_FOUND THEN
      TOTAL_ITEMS = DCOUNT(PIM_STEPXML_ENTITY_DG_DATA_MATRIX, @AM)
      FOR X = 1 TO TOTAL_ITEMS
         STDCOMM_ID  = ""
         STDCOMM_REC = ""
         ENTITY_DG_STEPID = ""
         TOTAL_ATTRS = DCOUNT(PIM_STEPXML_ENTITY_DG_ATTR_NAMES<X>, @VM)
         FOR Y = 1 TO TOTAL_ATTRS
            ;****************************************************
            ;* Extract attribute context value (english & french)
            ;****************************************************
            ATTRIBUTE_NAME  = PIM_STEPXML_ENTITY_DG_DATA_MATRIX<X,Y,1>
            ATTRIBUTE_VALUE = PIM_STEPXML_ENTITY_DG_DATA_MATRIX<X,Y,2>
            SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
            SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
            ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
            ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA

            ;*****************************************************************
            ;* Mapping per PIM Entity DG attribute with Infoflo file attribute
            ;*****************************************************************
            BEGIN CASE
            CASE ATTRIBUTE_NAME = "ID"
               ENTITY_DG_STEPID = ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "DGCode"
               STDCOMM_ID = ATTRIBUTE_VALUE_ENG
               ENTITY_DG_KEY_INFO_LIST<X> = ENTITY_DG_STEPID:@VM:STDCOMM_ID
               SUMMARY_REPORT_ENTITY_DG_CONTENT = INSERT(SUMMARY_REPORT_ENTITY_DG_CONTENT,X,0,0,ENTITY_DG_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"STDCOMM":CHAR(9):"F0":CHAR(9):ATTRIBUTE_VALUE_ENG)
            CASE ATTRIBUTE_NAME = "DGDescription"
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG
               GOSUB CONVERT.UNICODE.TO.ASCII
               STDCOMM_REC<1> = RESULT
               SUMMARY_REPORT_ENTITY_DG_CONTENT<X,-1> = ENTITY_DG_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"STDCOMM":CHAR(9):"F1":CHAR(9):ATTRIBUTE_VALUE_ENG:"|":ATTRIBUTE_VALUE_FRN
            CASE ATTRIBUTE_NAME = "DGMessage"
               SWAP CHAR(13) WITH @VM IN ATTRIBUTE_VALUE_ENG
               SWAP CHAR(10) WITH @VM IN ATTRIBUTE_VALUE_ENG
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG
               GOSUB CONVERT.UNICODE.TO.ASCII
               STDCOMM_REC<2> = RESULT
               SUMMARY_REPORT_ENTITY_DG_CONTENT<X,-1> = ENTITY_DG_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"STDCOMM":CHAR(9):"F2":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "DGUNCodesList"
               ENTITY_DG_CODE_TTL = DCOUNT(ATTRIBUTE_VALUE_ENG, @VM)
               TEST_LIST = ""
               FOR CNT = 1 TO ENTITY_DG_CODE_TTL
                  ENTITY_DG_CODE = ATTRIBUTE_VALUE_ENG<1,CNT>
                  FIND ENTITY_DG_CODE IN TEST_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                     ERR_CODE = "B410-ERROR-1-1"
                     ERR_MSG  = "Duplicate dangerous good code found {":ENTITY_DG_CODE:"} -> Entities<":X:"> -> ":ENTITY_DG_STEPID:"."
                     GO B410_EXIT
                  END ELSE
                     TEST_LIST<-1> = ENTITY_DG_CODE
                     STDCOMM_REC<3,CNT> = ENTITY_DG_CODE
                  END
               NEXT CNT
               SWAP @VM WITH "|" IN ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_ENTITY_DG_CONTENT<X,-1> = ENTITY_DG_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"STDCOMM":CHAR(9):"F3":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "DGUNWeightPct"
               ENTITY_DG_UNWEIGHTPCT_TTL = DCOUNT(ATTRIBUTE_VALUE_ENG, @VM)
               FOR CNT = 1 TO ENTITY_DG_UNWEIGHTPCT_TTL
                  ENTITY_DG_WEIGHT_PCT      = ICONV(ATTRIBUTE_VALUE_ENG<1,CNT>, "MD1")
                  STDCOMM_REC<4,CNT>        = ENTITY_DG_WEIGHT_PCT
                  ENTITY_DG_WEIGHT_PCT_TTL += ATTRIBUTE_VALUE_ENG<1,CNT>
               NEXT CNT
               IF ENTITY_DG_WEIGHT_PCT_TTL # 100 THEN
                  ERR_CODE = "B410-ERROR-1-2"
                  ERR_MSG  = "The total weight percentage of the dangerous good must be equal to 100% -> Entities<":X:"> -> ":ENTITY_DG_STEPID:"."
                  GO B410_EXIT
               END
               SWAP @VM WITH "|" IN ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_ENTITY_DG_CONTENT<X,-1> = ENTITY_DG_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"STDCOMM":CHAR(9):"F4":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "DGPrtBolFlg"
               IF ATTRIBUTE_VALUE_ENG = "Y" THEN
                  STDCOMM_REC<5> = 1
               END ELSE
                  STDCOMM_REC<5> = 0
               END
               SUMMARY_REPORT_ENTITY_DG_CONTENT<X,-1> = ENTITY_DG_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"STDCOMM":CHAR(9):"F5":CHAR(9):ATTRIBUTE_VALUE_ENG
            END CASE
         NEXT Y
         IF ENTITY_DG_UNWEIGHTPCT_TTL # ENTITY_DG_CODE_TTL THEN
            ERR_CODE = "B410-ERROR-1-3"
            ERR_MSG  = "The total number of weight does not match number of UN -> Entities<":X:"> -> ":ENTITY_DG_STEPID:"."
            CRT ERR_MSG
            GO B410_EXIT
         END

         ;******************************************************
         ;* Write PIM DangerousGood info to Infoflo STDCOMM file
         ;******************************************************
         IF STDCOMM_ID # "" THEN
            READVU TEST_LOCK FROM STDCOMM, STDCOMM_ID, 1
            ON ERROR
               ERR_CODE = "B410-ERROR-2-1"
               ERR_MSG  = "Unable to read dangerous good code record ":STDCOMM_ID:" in file STDCOMM {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_DG_STEPID:"."
               GO B410_EXIT
            END LOCKED
               ERR_CODE = "B410-ERROR-2-2"
               ERR_MSG  = "The dangerous good code record ":STDCOMM_ID:" in file STDCOMM is currently locked by {":GETUSERNAME(STATUS()):"} -> Entities<":X:"> -> ":ENTITY_DG_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B410_EXIT
            END ELSE
               ;* new dangerous good
               IF STDCOMM_ID[1,1] # "P" THEN
                  ERR_CODE = "B410-ERROR-2-3"
                  ERR_MSG  = "The dangerous good ":STDCOMM_ID:" is invalid -> Entities<":X:"> -> ":ENTITY_DG_STEPID:"."
                  GO B410_EXIT
               END
            END
            WRITE STDCOMM_REC TO STDCOMM, STDCOMM_ID ON ERROR
               ERR_CODE = "B410-ERROR-2-4"
               ERR_MSG  = "Unable to write the dangerous good record ":STDCOMM_ID:" in file STDCOMM {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_DG_STEPID:"."
               GO B410_EXIT
            END
         END
      NEXT X
   END

B410_EXIT:
   RETURN


*******************************************************************************
* Write PIM Outbound Integration Request STEPXML Entity TC Data To Infoflo DB *
*******************************************************************************
B411_WRITE_PIM_STEPXML_ENTITY_TC_DATA_TO_INFOFLO_DB:

   ;****************************
   ;* PIM Entity TariffCode Info
   ;****************************
   IF ENTITY_TC_FOUND THEN
      TOTAL_ITEMS = DCOUNT(PIM_STEPXML_ENTITY_TC_DATA_MATRIX, @AM)
      FOR X = 1 TO TOTAL_ITEMS
         SYSTBL_ID   = ""
         SYSTBL_REC  = ""
         ENTITY_TC_STEPID = ""
         TOTAL_ATTRS = DCOUNT(PIM_STEPXML_ENTITY_TC_ATTR_NAMES<X>, @VM)
         FOR Y = 1 TO TOTAL_ATTRS
            ;****************************************************
            ;* Extract attribute context value (english & french)
            ;****************************************************
            ATTRIBUTE_NAME  = PIM_STEPXML_ENTITY_TC_DATA_MATRIX<X,Y,1>
            ATTRIBUTE_VALUE = PIM_STEPXML_ENTITY_TC_DATA_MATRIX<X,Y,2>
            SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
            SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
            ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
            ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA

            ;*****************************************************************
            ;* Mapping per PIM Entity TC attribute with Infoflo file attribute
            ;*****************************************************************
            BEGIN CASE
            CASE ATTRIBUTE_NAME = "ID"
               ENTITY_TC_STEPID = ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "TCCode"
               ENTITY_TC_CODE = ATTRIBUTE_VALUE_ENG
               ENTITY_TC_KEY_INFO_LIST<X> = ENTITY_TC_STEPID:@VM:ENTITY_TC_CODE
               SYSTBL_ID = "I34*":ENTITY_TC_CODE
               SUMMARY_REPORT_ENTITY_TC_CONTENT = INSERT(SUMMARY_REPORT_ENTITY_TC_CONTENT,X,0,0,ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F0":CHAR(9):ATTRIBUTE_VALUE_ENG)
            CASE ATTRIBUTE_NAME = "TCLongDescription"
               SYSTBL_REC<4> = ATTRIBUTE_VALUE_ENG
               ENTITY_TC_CODE_DESC_L = SYSTBL_REC<4>
               SUMMARY_REPORT_ENTITY_TC_CONTENT<X,-1> = ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F4":CHAR(9):ATTRIBUTE_VALUE_ENG
               IF ATTRIBUTE_VALUE_FRN # "" THEN
                  CONTEXT_VALUE = ATTRIBUTE_VALUE_FRN
                  GOSUB CONVERT.UNICODE.TO.ASCII
                  SYSTBL_REC<20> = RESULT
               END ELSE  ;* default to English if no French available
                  SYSTBL_REC<20> = ATTRIBUTE_VALUE_ENG
               END
               SUMMARY_REPORT_ENTITY_TC_CONTENT<X,-1> = ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F20":CHAR(9):SYSTBL_REC<20>
            CASE ATTRIBUTE_NAME = "TCCanada"
               SYSTBL_REC<1> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_ENTITY_TC_CONTENT<X,-1> = ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F1":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "TCCanadaReturn"
               SYSTBL_REC<6> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_ENTITY_TC_CONTENT<X,-1> = ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F6":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "TCUSA"
               SYSTBL_REC<2> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_ENTITY_TC_CONTENT<X,-1> = ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F2":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "TCUSAReturn"
               SYSTBL_REC<7> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_ENTITY_TC_CONTENT<X,-1> = ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F7":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "TCToxicMessage"
               SWAP CHAR(13) WITH @SM IN ATTRIBUTE_VALUE_ENG
               SWAP CHAR(10) WITH @SM IN ATTRIBUTE_VALUE_ENG
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG
               GOSUB CONVERT.UNICODE.TO.ASCII
               SYSTBL_REC<5> = RESULT
               SUMMARY_REPORT_ENTITY_TC_CONTENT<X,-1> = ENTITY_TC_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F5":CHAR(9):ATTRIBUTE_VALUE_ENG
            END CASE
         NEXT Y

         ;**************************************************
         ;* Write PIM TariffCode info to Infoflo SYSTBL file
         ;**************************************************
         IF SYSTBL_ID # "" THEN
            ;* update the tariff code
            READVU TEST_LOCK FROM SYSTBL, SYSTBL_ID, 1
            ON ERROR
               ERR_CODE = "B411-ERROR-1-1"
               ERR_MSG  = "Unable to read tariff code record ":SYSTBL_ID:" in file SYSTBL {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
               GO B411_EXIT
            END LOCKED
               ERR_CODE = "B411-ERROR-1-2"
               ERR_MSG  = "The tariff code record ":SYSTBL_ID:" in file SYSTBL is currently locked by {":GETUSERNAME(STATUS()):"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B411_EXIT
            END ELSE
               ;* new tariff code
            END
            WRITE SYSTBL_REC TO SYSTBL, SYSTBL_ID ON ERROR
               ERR_CODE = "B411-ERROR-1-3"
               ERR_MSG  = "Unable to write the tariff code record ":SYSTBL_ID:" in file SYSTBL {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
               GO B411_EXIT
            END

            ;* update tariff code SYSTBL control record
            ID = "I34"
            READU REC FROM SYSTBL, ID
            ON ERROR
               ERR_CODE = "B411-ERROR-2-1"
               ERR_MSG  = "Unable to read tariff code control record ":ID:" in file SYSTBL {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
               GO B411_EXIT
            END LOCKED
               ERR_CODE = "B411-ERROR-2-2"
               ERR_MSG  = "The tariff code control record ":ID:" in file SYSTBL is currently locked by {":GETUSERNAME(STATUS()):"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B411_EXIT
            END THEN
               ENTITY_TC_CODE_LIST = REC<1>
               LOCATE ENTITY_TC_CODE IN ENTITY_TC_CODE_LIST<1> BY "AL" SETTING POS THEN
                  ;* existing tariff code, nop
               END ELSE
                  ;* new tariff code
                  ENTITY_TC_CODE_LIST = INSERT(ENTITY_TC_CODE_LIST,1,POS,0,ENTITY_TC_CODE)
                  REC<1> = ENTITY_TC_CODE_LIST<1>
                  WRITE REC TO SYSTBL, ID ON ERROR
                     ERR_CODE = "B411-ERROR-2-3"
                     ERR_MSG  = "Unable to write the tariff code control record ":ID:" in file SYSTBL {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
                     GO B411_EXIT
                  END

                  ;* update IICOMBO file -> SYSS3005.2
                  IICOMBO_ID  = "COMBO.":ID
                  IICOMBO_REC = ""
                  READU IICOMBO_REC FROM IICOMBO, IICOMBO_ID
                  ON ERROR
                     ERR_CODE = "B411-ERROR-2-5"
                     ERR_MSG  = "Unable to read tariff code IICOMBO record ":IICOMBO_ID:" in file IICOMBO {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
                     GO B411_EXIT
                  END LOCKED
                     ERR_CODE = "B411-ERROR-2-6"
                     ERR_MSG  = "The tariff code IICOMBO record ":IICOMBO_ID:" in file IICOMBO is currently locked by {":GETUSERNAME(STATUS()):"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
                     RECORD_LOCK_FOUND = @TRUE
                     GO B411_EXIT
                  END THEN
                     IICOMBO_REC<3> = INSERT(IICOMBO_REC<3>,1,POS,0,ENTITY_TC_CODE)
                     IICOMBO_REC<4> = INSERT(IICOMBO_REC<4>,1,POS,0,ENTITY_TC_CODE_DESC_L)
                     IICOMBO_REC<5> = INSERT(IICOMBO_REC<5>,1,POS,0,"")
                     IICOMBO_REC<9> = ACNT_NAME:@VM:@LOGNAME:@VM:DATE():@VM:TIME()
                     WRITE IICOMBO_REC TO IICOMBO, IICOMBO_ID ON ERROR
                        ERR_CODE = "B411-ERROR-2-7"
                        ERR_MSG  = "Unable to write the tariff code IICOMBO record ":IICOMBO_ID:" in file IICOMBO {":STATUS():"} -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
                        GO B411_EXIT
                     END
                  END ELSE
                     ERR_CODE = "B411-ERROR-2-8"
                     ERR_MSG  = "The tariff code IICOMBO record ":IICOMBO_ID:" does not exist in file IICOMBO -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
                     GO B411_EXIT
                  END
               END
            END ELSE
               ERR_CODE = "B411-ERROR-2-9"
               ERR_MSG  = "The tariff code control record ":ID:" does not exist in file SYSTBL -> Entities<":X:"> -> ":ENTITY_TC_STEPID:"."
               GO B411_EXIT
            END
         END
      NEXT X
   END

B411_EXIT:
   RETURN


*****************************************************************************
* Write PIM Outbound Integration Request STEPXML Product Data To Infoflo DB *
*****************************************************************************
B420_WRITE_PIM_STEPXML_PRODUCT_DATA_TO_INFOFLO_DB:

   IF PRODUCT_FOUND THEN
      TOTAL_ITEMS = DCOUNT(PIM_STEPXML_PRODUCT_DATA_MATRIX, @AM)
      FOR X = 1 TO TOTAL_ITEMS
         ;* locate mandatory attribute ProductCode and extract product CPN to determine if the product is new or existing
         PRODUCT_STEPID = ""; ITMXRF_ID  = ""; ITMXRF_REC = ""; ITMMST_ID  = ""; ITMMST_REC = ""; ITMMST_REC_OLD = ""
         ITMMSTWRK_ID = ""; ITMMSTWRK_REC = ""; ITMMSTWRK_ID_LIST = ""; ITMMSTWRK_REC_LIST = ""; REFERENCED_NODE = @FALSE
         FIND "ProductCode" IN PIM_STEPXML_PRODUCT_DATA_MATRIX<X> SETTING AM_POS,VM_POS,SM_POS THEN
            ATTRIBUTE_VALUE = PIM_STEPXML_PRODUCT_DATA_MATRIX<X,VM_POS,2>
            SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
            SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
            PRODUCT_CODE = ATTRIBUTE_VALUE<1>
            ITMXRF_ID    = PRODUCT_CODE
            IF X = 1 THEN PRODUCT_CODE_SAVE = PRODUCT_CODE
            READVU PRODUCT_CPN FROM ITMXRF, ITMXRF_ID, 1
            ON ERROR
               ERR_CODE = "B420-ERROR-1-1"
               ERR_MSG  = "Unable to read the product xref record ":ITMXRF_ID:" in file ITMXRF {":STATUS():"} -> Products<":X:">."
               GO B420_EXIT
            END LOCKED
               ERR_CODE = "B420-ERROR-1-2"
               ERR_MSG  = "The product xref record ":ITMXRF_ID:" in file ITMXRF is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:">."
               RECORD_LOCK_FOUND = @TRUE
               GO B420_EXIT
            END THEN
               ;* existing product xref record exclusive lock is set successfully...
               NEW_PRODUCT = @FALSE
               ITMMST_ID = PRODUCT_CPN
               READU ITMMST_REC FROM ITMMST, ITMMST_ID
               ON ERROR
                  ERR_CODE = "B420-ERROR-1-3"
                  ERR_MSG  = "Unable to read the proudct record ":ITMMST_ID:" in file ITMMST {":STATUS():"} -> Products<":X:">."
                  GO B420_EXIT
               END LOCKED
                  ERR_CODE = "B420-ERROR-1-4"
                  ERR_MSG  = "The product record ":ITMMST_ID:" in file ITMMST is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:">."
                  RECORD_LOCK_FOUND = @TRUE
                  GO B420_EXIT
               END THEN
                  ;* existing product record exclusive lock is set successfully...
                  NEW_PRODUCT = @FALSE
                  GOSUB B421_INITIALIZE_EXISTING_PRODUCT_RECORD
               END ELSE
                  ERR_CODE = "B420-ERROR-1-5"
                  ERR_MSG  = "The product record ":ITMMST_ID:" does not exist in file ITMMST -> Products<":X:">."
                  GO B420_EXIT
               END
            END ELSE
               NEW_PRODUCT = @TRUE
               GOSUB B422_INITIALIZE_NEW_PRODUCT_RECORD
            END
         END ELSE
            ERR_CODE = "B420-ERROR-1-6"
            ERR_MSG  = 'Unable to find the product mandatory attribute "ProductCode" -> Products<':X:">."
            GO B420_EXIT
         END

         ;*************************************************
         ;* Build Infoflo ITMMST record for the PIM product
         ;*************************************************
         TOTAL_ATTRS = DCOUNT(PIM_STEPXML_PRODUCT_ATTR_NAMES<X>, @VM)
         FOR Y = 1 TO TOTAL_ATTRS
            ;****************************************************
            ;* Extract attribute context value (english & french)
            ;****************************************************
            ATTRIBUTE_NAME  = PIM_STEPXML_PRODUCT_DATA_MATRIX<X,Y,1>
            ATTRIBUTE_VALUE = PIM_STEPXML_PRODUCT_DATA_MATRIX<X,Y,2>
            ATTRIBUTE_UNIT  = PIM_STEPXML_PRODUCT_DATA_MATRIX<X,Y,3>
            SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
            SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
            ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
            ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA

            ;**********************************************************************
            ;* Mapping per PIM product attribute with Infoflo ITMMST file attribute
            ;**********************************************************************
            BEGIN CASE
            CASE ATTRIBUTE_NAME = "ID"
               PRODUCT_STEPID  = ATTRIBUTE_VALUE_ENG
               IF INDEX(PRODUCT_TO_SUPERSEDED_BY_STEPID_LIST, PRODUCT_STEPID, 1) OR INDEX(PRODUCT_TO_SUBSTITUTE_STEPID_LIST, PRODUCT_STEPID, 1) THEN
                  REFERENCED_NODE = @TRUE
                  EXIT
               END
               ITMMST_REC<185> = PRODUCT_STEPID
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F185":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "InfofloCPN"
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"InfofloCPN":CHAR(9):"ITMMST":CHAR(9):"F0":CHAR(9):PRODUCT_CPN
            CASE ATTRIBUTE_NAME = "ProductCode"
               PRODUCT_CODE  = ATTRIBUTE_VALUE_ENG
               ITMMST_REC<1> = PRODUCT_CODE
               SUMMARY_REPORT_PRODUCT_CONTENT = INSERT(SUMMARY_REPORT_PRODUCT_CONTENT,X,1,0,PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F1":CHAR(9):ATTRIBUTE_VALUE_ENG)
            CASE ATTRIBUTE_NAME = "NacoPartNumber"
               PRODUCT_NACO_PART_NBR = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F13":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "CanplasPartNumber"
               PRODUCT_CANPLAS_PART_NBR = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F13":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "AlternateUPCCode"
               ITMMST_REC<196> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F196":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "UniPartNumber"
               PRODUCT_UPN = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMXRF":CHAR(9):"F0":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "BaseUOM"
               PRODUCT_BASE_UOM = ATTRIBUTE_VALUE_ENG
               ITMMST_REC<6>    = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F6":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "UOMStandard"
               PRODUCT_UOM_STANDARD = ATTRIBUTE_VALUE_ENG
               ITMMST_REC<263>      = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F263":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "BaseQtyI"
               FIND "I" IN ITMMST_REC<175> SETTING AM_POS,VM_POS,SM_POS THEN
                  ITMMST_REC<176,VM_POS> = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               END
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F176.":VM_POS:CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "BaseQtyM"
               FIND "M" IN ITMMST_REC<175> SETTING AM_POS,VM_POS,SM_POS THEN
                  ITMMST_REC<176,VM_POS> = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               END
            CASE ATTRIBUTE_NAME = "DefaultPricePer"
               FIND "I" IN ITMMST_REC<175> SETTING AM_POS,VM_POS,SM_POS THEN
                  ITMMST_REC<177,VM_POS> = ATTRIBUTE_VALUE_ENG
               END
               FIND "M" IN ITMMST_REC<175> SETTING AM_POS,VM_POS,SM_POS THEN
                  ITMMST_REC<177,VM_POS> = ATTRIBUTE_VALUE_ENG
               END
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F177.":VM_POS:CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductDescriptionType"
               ITMMST_REC<264> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F264":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ABCCategoryOverride"
               ITMMST_REC<333> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F333":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ShippingWeight"
               PRODUCT_SHIPPING_WEIGHT = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F99":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "InfofloItemType"
               PRODUCT_ITEM_TYPE = ATTRIBUTE_VALUE_ENG
               ITMMST_REC<57>[1,1] = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F57":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductStatus"
               PRODUCT_STATUS = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F73":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ItemClass"
               PRODUCT_ITEM_CLASS = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F73":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "IsOEM"
               PRODUCT_IS_OEM = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"N/A":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "IsRepacking"
               PRODUCT_IS_REPACKING = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"N/A":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductCountryOfOrigin"
               ITMMST_REC<180> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F180":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PurchasingCost"
               ITMMSTWRK_REC<54> = ICONV(ATTRIBUTE_VALUE_ENG,"MD2")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F180":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PurchasingCostFreightPct"
               ITMMSTWRK_REC<55> = ICONV(ATTRIBUTE_VALUE_ENG,"MD2")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F55":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PurchasingCostDutyPct"
               ITMMSTWRK_REC<56> = ICONV(ATTRIBUTE_VALUE_ENG,"MD2")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F56":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PurchasingCostCurrency"
               ITMMSTWRK_REC<319> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F319":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PurchasedFromAliaxis"
               ITMMST_REC<194> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F194":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "NonRetNonCanc"
               ITMMST_REC<238> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F238":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "StatusExpirationDate"
               ITMMST_REC<238> = ICONV(ATTRIBUTE_VALUE_ENG,"DYMD")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F238":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PrdRoyaltyFlag"
               ITMMST_REC<189> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F189":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PrdRebateMatrixCode"
               ITMMST_REC<191> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F191":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "DGFlashpoint"
               IF UPCASE(ATTRIBUTE_UNIT) = "UNECE.UNIT.CEL" THEN  ;* Celsius
                  ITMMST_REC<317> = ATTRIBUTE_VALUE_ENG                              ;* Celsius
                  ITMMST_REC<318> = ICONV(ATTRIBUTE_VALUE_ENG * 9 / 5 + 32,"MD0")    ;* Farenheit
                  SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F317,F318":CHAR(9):ITMMST_REC<317>:"|":ITMMST_REC<318>
               END ELSE  ;* Farenheit
                  ITMMST_REC<317> = ICONV((ATTRIBUTE_VALUE_ENG - 32) * 5 / 9,"MD0")  ;* Celsius
                  ITMMST_REC<318> = ATTRIBUTE_VALUE_ENG                              ;* Farenheit
                  SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F317,F318":CHAR(9):ITMMST_REC<317>:"|":ITMMST_REC<318>
               END
            CASE ATTRIBUTE_NAME = "CutLength"
               PRODUCT_CUT_LENGTH = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"N/A":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "NAFTAFlag"
               IF ATTRIBUTE_VALUE_ENG = "Y" THEN
                  ITMMST_REC<341> = 1
               END ELSE
                  ITMMST_REC<341> = 0
               END
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F341":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "Length"
               GOSUB CONVERT.UNIT.TO.FEET
               ATTRIBUTE_VALUE_ENG = RESULT
               ITMMST_REC<320> = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F320":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ManufacturingColor"
               ITMMST_REC<337> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F337":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "BellLength"
               GOSUB CONVERT.UNIT.TO.FEET
               ATTRIBUTE_VALUE_ENG = RESULT
               ITMMST_REC<343> = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F343":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "BellLengthI"
               ITMMST_REC<344> = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F344":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "BellLengthM"
               ITMMST_REC<345> = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F345":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "UVProtectionFlag"
               ITMMST_REC<346> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F346":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductPackagingComments"
               SWAP CHAR(10) WITH " " IN ATTRIBUTE_VALUE_ENG
               SWAP CHAR(13) WITH " " IN ATTRIBUTE_VALUE_ENG
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG
               GOSUB CONVERT.UNICODE.TO.ASCII
               PACKAGE_COMMENT = RESULT
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F335":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductChangesCommentsLog"
               SWAP CHAR(10) WITH " " IN ATTRIBUTE_VALUE_ENG
               SWAP CHAR(13) WITH " " IN ATTRIBUTE_VALUE_ENG
               TOTAL = DCOUNT(ATTRIBUTE_VALUE_ENG, @VM)
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG<1,TOTAL>
               GOSUB CONVERT.UNICODE.TO.ASCII
               PRODUCT_LAST_CHANGE_COMMENT = RESULT
               ITMMST_REC<20>  = INSERT(ITMMST_REC<20>,1,1,0,TRIM(FIELD(PRODUCT_LAST_CHANGE_COMMENT,":",3)))
               ITMMST_REC<231> = INSERT(ITMMST_REC<231>,1,1,0,ICONV(TRIM(FIELD(PRODUCT_LAST_CHANGE_COMMENT," ",1)),"D-YMD[4,2,2]"))
               ITMMST_REC<232> = INSERT(ITMMST_REC<232>,1,1,0,TRIM(FIELD(PRODUCT_LAST_CHANGE_COMMENT," ",3))[2,6])
               PRODUCT_LAST_CHANGE_COMMENT = ITMMST_REC<20,1>  ;* the most recent changed comment and will be used later to update comment for class code history
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F20,F231,F232":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductToInfofloProductLine"
               PRODUCT_LINE_CODE = TRIM(FIELD(ATTRIBUTE_VALUE_ENG,'_',2),' ','A')
               ITMMST_REC<12>  = PRODUCT_LINE_CODE
               ITMMST_REC<63>  = PRODUCT_LINE_CODE
               ITMMST_REC<208> = PRODUCT_LINE_CODE
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F12,F63,F208":CHAR(9):PRODUCT_LINE_CODE
            CASE ATTRIBUTE_NAME = "ProductToSupersededBy"
               STEPID = ATTRIBUTE_VALUE_ENG
               FIND STEPID IN PRODUCT_STEPID_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  POS = AM_POS
                  FIND "ProductCode" IN PIM_STEPXML_PRODUCT_DATA_MATRIX<POS> SETTING AM_POS,VM_POS,SM_POS THEN
                     ATTRIBUTE_VALUE = PIM_STEPXML_PRODUCT_DATA_MATRIX<POS,VM_POS,2>
                     SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
                     SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
                     PRODUCT_TO_SUPERSEDED_BY = ATTRIBUTE_VALUE<1>
                  END
               END
               ITMMST_REC<97> = PRODUCT_TO_SUPERSEDED_BY
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F97":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductToSubstitute"
               STEPID = ATTRIBUTE_VALUE_ENG
               FIND STEPID IN PRODUCT_STEPID_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  POS = AM_POS
                  FIND "ProductCode" IN PIM_STEPXML_PRODUCT_DATA_MATRIX<POS> SETTING AM_POS,VM_POS,SM_POS THEN
                     ATTRIBUTE_VALUE = PIM_STEPXML_PRODUCT_DATA_MATRIX<POS,VM_POS,2>
                     SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
                     SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
                     PRODUCT_TO_SUBSTITUTE = ATTRIBUTE_VALUE<1>
                  END
               END
               ITMMST_REC<125> = PRODUCT_TO_SUBSTITUTE
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F125":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductDGCode"
               STEPID = ATTRIBUTE_VALUE_ENG
               FIND STEPID IN ENTITY_DG_KEY_INFO_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  ITMMST_REC<184> = ENTITY_DG_KEY_INFO_LIST<AM_POS,2>
               END
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F184":CHAR(9):ITMMST_REC<184>
            CASE ATTRIBUTE_NAME = "ProductTariffCode"
               STEPID = ATTRIBUTE_VALUE_ENG
               FIND STEPID IN ENTITY_TC_KEY_INFO_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                  ITMMST_REC<181> = ENTITY_TC_KEY_INFO_LIST<AM_POS,2>
               END
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F181":CHAR(9):ITMMST_REC<181>
            CASE ATTRIBUTE_NAME = "NewManufacturedProductPlants"
               PRODUCT_PLANTS = TRIM(ATTRIBUTE_VALUE_ENG,' ','A')
               SWAP ";" WITH @VM IN PRODUCT_PLANTS
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMSTWRK":CHAR(9):"F0":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ProductDescription325S"
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG
               GOSUB CONVERT.UNICODE.TO.ASCII
               PRODUCT_DESC_ENG_S = RESULT
               CONTEXT_VALUE = ATTRIBUTE_VALUE_FRN
               GOSUB CONVERT.UNICODE.TO.ASCII
               PRODUCT_DESC_FRN_S = RESULT
            CASE ATTRIBUTE_NAME = "ProductDescription325I"
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG
               GOSUB CONVERT.UNICODE.TO.ASCII
               PRODUCT_DESC_ENG_I = RESULT
               CONTEXT_VALUE = ATTRIBUTE_VALUE_FRN
               GOSUB CONVERT.UNICODE.TO.ASCII
               PRODUCT_DESC_FRN_I = RESULT
            CASE ATTRIBUTE_NAME = "ProductDescription325M"
               CONTEXT_VALUE = ATTRIBUTE_VALUE_ENG
               GOSUB CONVERT.UNICODE.TO.ASCII
               PRODUCT_DESC_ENG_M = RESULT
               CONTEXT_VALUE = ATTRIBUTE_VALUE_FRN
               GOSUB CONVERT.UNICODE.TO.ASCII
               PRODUCT_DESC_FRN_M = RESULT
            END CASE
         NEXT Y

         ;* Skip referened product node (i.e. SupersededBy or Substitute)
         IF REFERENCED_NODE THEN CONTINUE

         ;*********************
         ;* Get item class code
         ;*********************
         BEGIN CASE
         CASE PRODUCT_STATUS = "E" OR PRODUCT_STATUS = "O"
            ITMMST_REC<73> = PRODUCT_STATUS
         CASE PRODUCT_ITEM_CLASS = "C" OR PRODUCT_ITEM_CLASS = "S"
            ITMMST_REC<73> = PRODUCT_ITEM_CLASS
         CASE PRODUCT_ITEM_CLASS = "P" AND PRODUCT_IS_REPACKING = "Y"
            ITMMST_REC<73> = "M2"
         CASE PRODUCT_ITEM_CLASS = "P" AND PRODUCT_IS_OEM = "Y"
            ITMMST_REC<73> = "M1"
         CASE 1
            ITMMST_REC<73> = PRODUCT_STATUS
         END CASE
         ID = "I128*":ITMMST_REC<73>
         READV TEST_VALUE FROM SYSTBL, ID, 1
         ON ERROR
            ERR_CODE = "B420-ERROR-2-1"
            ERR_MSG  = "Unable to read the product item class code record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
            GO B420_EXIT
         END THEN
            READV PRODUCT_CURRENT_ITEM_CLASS FROM ITMMST, ITMMST_ID, 73
            ON ERROR
               ERR_CODE = "B420-ERROR-2-2"
               ERR_MSG  = "Unable to read the current product item class code record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END THEN
               ;* Update existing product item class code change comment
               IF NOT(NEW_PRODUCT) AND ITMMST_REC<73> # PRODUCT_CURRENT_ITEM_CLASS THEN
                  ITMMST_REC<243> = INSERT(ITMMST_REC<243>,1,1,0,@LOGNAME)                     ;* changed by
                  ITMMST_REC<244> = INSERT(ITMMST_REC<244>,1,1,0,DATE())                       ;* changed date
                  ITMMST_REC<245> = INSERT(ITMMST_REC<245>,1,1,0,PRODUCT_LAST_CHANGE_COMMENT)  ;* last comment changed
                  ITMMST_REC<246> = INSERT(ITMMST_REC<246>,1,1,0,PRODUCT_CURRENT_ITEM_CLASS)   ;* last item class code changed
               END
            END ELSE
               ERR_CODE = "B420-ERROR-2-3"
               ERR_MSG  = "The current product item class code record ":ID:" does not exist in file SYSTBL -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END
         END ELSE
            ERR_CODE = "B420-ERROR-2-4"
            ERR_MSG  = "The product item class code record ":ID:" does not exist in file SYSTBL -> Products<":X:"> -> ":PRODUCT_STEPID:"."
            GO B420_EXIT
         END

         ;******************
         ;* Infoflo M/P Flag
         ;******************
         ID = "ITP*":PRODUCT_ITEM_TYPE
         READV TEST_VALUE FROM SYSTBL, ID, 1
         ON ERROR
            ERR_CODE = "B420-ERROR-3-1"
            ERR_MSG  = "Unable to read the product item type record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
            GO B420_EXIT
         END THEN
            BEGIN CASE
            CASE INDEX("4|5|6|7|A", PRODUCT_ITEM_TYPE, 1)
               ITMMST_REC<57>[7,1] = "M"  ;* manufacturing product
            CASE INDEX("8|9|Z", PRODUCT_ITEM_TYPE, 1)
               ITMMST_REC<57>[7,1] = "P"  ;* purchased product
            CASE 1
               ERR_CODE = "B420-ERROR-3-2"
               ERR_MSG  = "The M/P flag is not appliable for the product item type ":ID:" -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END CASE
         END ELSE
            ERR_CODE = "B420-ERROR-3-3"
            ERR_MSG  = "The product item type record ":ID:" does not exist in file SYSTBL -> Products<":X:"> -> ":PRODUCT_STEPID:"."
            GO B420_EXIT
         END

         ;*********************************************
         ;* Company product xref item number (sort key)
         ;*********************************************
         ID = "I03*":PRODUCT_LINE_CODE
         READV PRODUCT_OWNER FROM SYSTBL, ID, 2
         ON ERROR
            ERR_CODE = "B420-ERROR-4-1"
            ERR_MSG  = "Unable to read the product line record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
            GO B420_EXIT
         END THEN
            BEGIN CASE
            CASE PRODUCT_NACO_PART_NBR # "" AND PRODUCT_OWNER = "IPX"
               ITMMST_REC<13> = PRODUCT_NACO_PART_NBR
            CASE PRODUCT_CANPLAS_PART_NBR # "" AND PRODUCT_OWNER = "CPL"
               ITMMST_REC<13> = PRODUCT_CANPLAS_PART_NBR
               CANPLAS_ITEM_NBR = PRODUCT_CANPLAS_PART_NBR
            CASE 1
               ITMMST_REC<13> = PRODUCT_CODE
            END CASE
         END ELSE
            ERR_CODE = "B420-ERROR-4-2"
            ERR_MSG  = "The product line record ":ID:" does not exist in file SYSTBL -> Products<":X:"> -> ":PRODUCT_STEPID:"."
            GO B420_EXIT
         END

         ;*************************************************************************
         ;* Re-format product description to be 25 characters long 3 lines in total
         ;*************************************************************************
         TTL = DCOUNT(ITMMST_REC<161>, @VM)
         FOR CNT = 1 TO TTL
            BEGIN CASE
            CASE ITMMST_REC<161,CNT> = "S" AND ITMMST_REC<162,CNT> = "ENG"  ;* Standard English
               IF PRODUCT_DESC_ENG_S = "" THEN
                  TEXT_VALUE = PRODUCT_DESC_ENG_I
               END ELSE
                  TEXT_VALUE = PRODUCT_DESC_ENG_S
               END
               GOSUB FORMAT.PRODUCT.DESCRIPTION
               PRODUCT_DESC_ENG_S = RESULT
               ITMMST_REC<163,CNT> = PRODUCT_DESC_ENG_S
            CASE ITMMST_REC<161,CNT> = "S" AND ITMMST_REC<162,CNT> = "FRN"  ;* Standard French
               IF PRODUCT_DESC_FRN_S = "" THEN
                  PRODUCT_DESC_FRN_S = PRODUCT_DESC_ENG_S
               END ELSE
                  TEXT_VALUE = PRODUCT_DESC_FRN_S
                  GOSUB FORMAT.PRODUCT.DESCRIPTION
                  PRODUCT_DESC_FRN_S = RESULT
               END
               ITMMST_REC<163,CNT> = PRODUCT_DESC_FRN_S
            CASE ITMMST_REC<161,CNT> = "I" AND ITMMST_REC<162,CNT> = "ENG"  ;* Imperial English
               TEXT_VALUE = PRODUCT_DESC_ENG_I
               GOSUB FORMAT.PRODUCT.DESCRIPTION  ;* 2 input parameters: product owner and Canplas part number
               PRODUCT_DESC_ENG_I = RESULT
               ITMMST_REC<163,CNT> = PRODUCT_DESC_ENG_I
            CASE ITMMST_REC<161,CNT> = "I" AND ITMMST_REC<162,CNT> = "FRN"  ;* Imperial French
               IF PRODUCT_DESC_FRN_I = "" THEN
                  PRODUCT_DESC_FRN_I = PRODUCT_DESC_ENG_I
               END ELSE
                  TEXT_VALUE = PRODUCT_DESC_FRN_I
                  GOSUB FORMAT.PRODUCT.DESCRIPTION
                  PRODUCT_DESC_FRN_I = RESULT
               END
               ITMMST_REC<163,CNT> = PRODUCT_DESC_FRN_I
            CASE ITMMST_REC<161,CNT> = "M" AND ITMMST_REC<162,CNT> = "ENG"  ;* Metric English
               IF PRODUCT_DESC_ENG_M = "" THEN
                  PRODUCT_DESC_ENG_M = PRODUCT_DESC_ENG_I
               END ELSE
                  TEXT_VALUE = PRODUCT_DESC_ENG_M
                  GOSUB FORMAT.PRODUCT.DESCRIPTION
                  PRODUCT_DESC_ENG_M = RESULT
               END
               ITMMST_REC<163,CNT> = PRODUCT_DESC_ENG_M
            CASE ITMMST_REC<161,CNT> = "M" AND ITMMST_REC<162,CNT> = "FRN"  ;* Metric French
               IF PRODUCT_DESC_FRN_M = "" THEN
                  PRODUCT_DESC_FRN_M = PRODUCT_DESC_ENG_M
               END ELSE
                  TEXT_VALUE = PRODUCT_DESC_FRN_M
                  GOSUB FORMAT.PRODUCT.DESCRIPTION
                  PRODUCT_DESC_FRN_M = RESULT
               END
               ITMMST_REC<163,CNT> = PRODUCT_DESC_FRN_M
            END CASE
         NEXT CNT
         SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"ProductDescription325S":CHAR(9):"ITMMST":CHAR(9):"F163.1,F163.2":CHAR(9):ITMMST_REC<163,1>:"|":ITMMST_REC<163,2>
         SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"ProductDescription325I":CHAR(9):"ITMMST":CHAR(9):"F163.3,F163.4":CHAR(9):ITMMST_REC<163,3>:"|":ITMMST_REC<163,4>
         SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"ProductDescription325M":CHAR(9):"ITMMST":CHAR(9):"F163.5,F163.6":CHAR(9):ITMMST_REC<163,5>:"|":ITMMST_REC<163,6>

         ;*******************************************
         ;* Populate product description based on UOM
         ;*******************************************
         BEGIN CASE
         CASE PRODUCT_UOM_STANDARD = "I"
            ITMMST_REC<2> = PRODUCT_DESC_ENG_I
         CASE PRODUCT_UOM_STANDARD = "M"
            ITMMST_REC<2> = PRODUCT_DESC_ENG_M
         CASE 1
            ID = "UOM*":PRODUCT_BASE_UOM
            READV PRODUCT_UOM_TYPE FROM SYSTBL, ID, 2
            ON ERROR
               ERR_CODE = "B420-ERROR-5-1"
               ERR_MSG  = "Unable to read the UOM record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END THEN
               BEGIN CASE
               CASE PRODUCT_UOM_TYPE = "I"
                  ITMMST_REC<2> = PRODUCT_DESC_ENG_I
               CASE PRODUCT_UOM_TYPE = "M"
                  ITMMST_REC<2> = PRODUCT_DESC_ENG_M
               CASE 1
                  ITMMST_REC<2> = PRODUCT_DESC_ENG_I
               END CASE
               SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"<ProductDescription>":CHAR(9):"ITMMST":CHAR(9):"F2":CHAR(9):ITMMST_REC<2>
            END ELSE
               ERR_CODE = "B420-ERROR-5-2"
               ERR_MSG  = "The UOM record ":ID:" does not exist in file SYSTBL -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END
         END CASE
         ITMMST_REC<308> = ITMMST_REC<163>:@VM:ITMMST_REC<163>:@VM:ITMMST_REC<163>
         ITMMST_REC<311> = ITMMST_REC<163>

         ;*********************************************************
         ;* Update PIM product info in Infoflo for new product only
         ;*********************************************************
         IF NEW_PRODUCT THEN
            ;* new product info
            ITMMST_REC<31> = DATE()  ;* use the system date for the creation date on
            ITMMST_REC<99> = PRODUCT_SHIPPING_WEIGHT
            SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"<ProductCreationDate>":CHAR(9):"ITMMST":CHAR(9):"F31":CHAR(9):ITMMST_REC<31>

            ;* get the next CPN for the new product
            ID = "END."
            READVU TEST_LOCK FROM ITMXRF, ID, 1
            ON ERROR
               ERR_CODE = "B420-ERROR-6-1"
               ERR_MSG  = "Unable to read the new proudct CPN control record ":ID:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END LOCKED
               ERR_CODE = "B420-ERROR-6-2"
               ERR_MSG  = "The new product CPN control record ":ID:" in file ITMXRF is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B420_EXIT
            END THEN
               PRODUCT_CPN = ""
               CALL SYSS0065.1(ITMXRF, ITMMST, CHAR(100), PRODUCT_CPN)
               IF @SYSTEM.RETURN.CODE = 0 AND PRODUCT_CPN # "" THEN
                  ;* insert new product CPN to the product data matrix
                  ITMMST_ID = PRODUCT_CPN
                  PIM_STEPXML_PRODUCT_DATA_MATRIX<X> = "InfofloCPN":@SM:ITMMST_ID:@VM:PIM_STEPXML_PRODUCT_DATA_MATRIX<X>
                  SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"<CPN>":CHAR(9):"ITMMST":CHAR(9):"F0":CHAR(9):PRODUCT_CPN

                  ;* get new product CPN
                  PRODUCT_UPC = ""
                  CALL SYSS0064.1(PRODUCT_LINE_CODE, PRODUCT_CPN, PRODUCT_UPC)
                  IF @SYSTEM.RETURN.CODE = 0 AND PRODUCT_UPC # "" THEN
                     ;* will be used to send new CPN/UPC back to STEP after the product will be committed in Infoflo successfully later on
                     PIM_REST_SERVICE_PARAMS<-1> = '["':PRODUCT_STEPID:'","':PRODUCT_CPN:'","':PRODUCT_UPC:'"]'

                     ;* save new product UPC
                     ITMMST_REC<141> = PRODUCT_UPC
                     SUMMARY_REPORT_PRODUCT_CONTENT<X,-1> = PRODUCT_STEPID:CHAR(9):"<UPC>":CHAR(9):"ITMMST":CHAR(9):"F141":CHAR(9):PRODUCT_UPC
                  END ELSE
                     ERR_CODE = "B420-ERROR-6-3"
                     ERR_MSG  = "Unable to retrieve new product UPC by calling SYSS0064.1 {":@SYSTEM.RETURN.CODE:" -> ":PRODUCT_LINE_CODE:" -> ":PRODUCT_CPN:" -> ":PRODUCT_UPC:"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                     GO B420_EXIT
                  END
               END ELSE
                  ERR_CODE = "B420-ERROR-6-4"
                  ERR_MSG  = "Unable to retrieve new product CPN by calling SYSS0065.1 {":@SYSTEM.RETURN.CODE:"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END
            END ELSE
               ERR_CODE = "B420-ERROR-6-5"
               ERR_MSG  = "The new product CPN control record ":ID:" does not exist in file ITMXRF -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END
         END
         ;* build PIM product key info (STEPID & CPN) List (will be used as reference for saving PIM package info later)
         PRODUCT_KEY_INFO_LIST<-1> = PRODUCT_STEPID:@VM:ITMMST_ID

         ;*************************************************************************
         ;* Validate product info & retrieve product workbench data for new product
         ;*************************************************************************
         IN_DATA    = ""
         IN_DATA<1> = ITMMST_ID:@VM:REFERENCED_NODE
         IN_DATA<2> = LOWER(ITMMST_REC)
         IN_DATA<3> = PRODUCT_PLANTS
         IN_DATA<4> = LOWER(ITMMSTWRK_REC)
         CALL PIMS9100.2(IN_DATA, OUT_DATA, RTN_STATUS)
         IF RTN_STATUS<1> # "" THEN
            ERR_CODE = RTN_STATUS<1>
            ERR_MSG  = RTN_STATUS<2>
            PROGRAM  = RTN_STATUS<3>
            GO B420_EXIT
         END ELSE
            ITMMST_REC         = RAISE(OUT_DATA<1>)
            ITMMSTWRK_ID_LIST  = OUT_DATA<2>
            ITMMSTWRK_REC_LIST = RAISE(OUT_DATA<3>)
            ITMMST_REC_OLD     = RAISE(OUT_DATA<4>)
         END

         ;**************************************************************
         ;* Update PIM product info in Infoflo for existing product only
         ;**************************************************************
         IF NOT(NEW_PRODUCT) THEN
            ;* retrieve current product UPN code from PIMFLO<5>
            ID = ITMMST_ID
            READVU PRODUCT_UPN_OLD FROM PIMFLO, ID, 5
            ON ERROR
               ERR_CODE = "B420-ERROR-7-1"
               ERR_MSG  = "Unable to read the UPN for product delta record ":ID:" in file PIMFLO at field position 5 {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END LOCKED
               ERR_CODE = "B420-ERROR-7-2"
               ERR_MSG  = "The UPN for product delta Record ":ID:" in file PIMFLO is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B420_EXIT
            END ELSE
               PRODUCT_UPN_OLD = ""
            END

            ;* if product UPN is changed, old xref record needs to be deleted
            PRODUCT_UPN_NEW = PRODUCT_UPN
            IF PRODUCT_UPN_OLD # "" AND PRODUCT_UPN_OLD # PRODUCT_UPN_NEW THEN
               ID = "IIS*":PRODUCT_UPN_OLD
               READU REC FROM ITMXRF, ID
               ON ERROR
                  ERR_CODE = "B420-ERROR-7-3"
                  ERR_MSG  = "Unable to read the product UPN xref record ":ID:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END LOCKED
                  ERR_CODE = "B420-ERROR-7-4"
                  ERR_MSG  = "The product UPN xref record ":ID:" in file ITMXRF is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  RECORD_LOCK_FOUND = @TRUE
                  GO B420_EXIT
               END THEN
                  ;* remove old xref record
                  DELETE ITMXRF, ID ON ERROR
                     ERR_CODE = "B420-ERROR-7-5"
                     ERR_MSG  = "Unable to delete the product UPN xref record ":ID:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                     GO B420_EXIT
                  END

                  ;* create new product UPN record
                  ID = "IIS*":PRODUCT_UPN_NEW
                  READVU TEST_LOCK FROM ITMXRF, ID
                  ON ERROR
                     ERR_CODE = "B420-ERROR-7-6"
                     ERR_MSG  = "Unable to read the product UPN xref record ":ID:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                     GO B420_EXIT
                  END LOCKED
                     ERR_CODE = "B420-ERROR-7-7"
                     ERR_MSG  = "The product UPN xref record ":ID:" in file ITMXRF is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                     RECORD_LOCK_FOUND = @TRUE
                     GO B420_EXIT
                  END ELSE
                     WRITE REC TO ITMXRF, ID ON ERROR
                        ERR_CODE = "B420-ERROR-7-8"
                        ERR_MSG  = "Unable to write the product UPN xref record ":ID:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                        GO B420_EXIT
                     END
                  END

                  ;* update new UPN in PIMFLO
                  WRITEV PRODUCT_UPN_NEW ON PIMFLO, ID, 5 ON ERROR
                     ERR_CODE = "B420-ERROR-7-9"
                     ERR_MSG  = "Unable to update UPN for product delta record ":ID:" in file PIMFLO at field position 5 {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                     GO B420_EXIT
                  END
               END ELSE
                  ERR_CODE = "B420-ERROR-7-10"
                  ERR_MSG  = "The product UPN xref record ":ID:" does not exist in file ITMXRF -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END
            END

            ;* Update BOM on product line change-> BOMS3000.PS1
            IF PRODUCT_LINE_CODE # ITMMST_REC<208> THEN  ;* product line changed
               U2_QUERY = 'SELECT ITMMST WITH BASE.ITEM = "':PRODUCT_CODE:'" AND WITH WHS.PS # ""'
               CLEARSELECT
               EXECUTE U2_QUERY CAPTURING U2_OUTPUT
               IF @SYSTEM.RETURN.CODE >= 0 THEN
                  LOOP
                     READNEXT ID ELSE U2_EOF = @TRUE
                  UNTIL U2_EOF
                     READU REC FROM ITMMST, ID
                     ON ERROR
                        ERR_CODE = "B420-ERROR-8-1"
                        ERR_MSG  = "Unable to read the product record ":ID:" in file ITMMST {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                        GO B420_EXIT
                     END LOCKED
                        ERR_CODE = "B420-ERROR-8-2"
                        ERR_MSG  = "The product record ":ID:" in file ITMMST is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                        RECORD_LOCK_FOUND = @TRUE
                        GO B420_EXIT
                     END THEN
                        REC<2>   = ITMMST_REC<2>    ;* Product Description
                        REC<6>   = ITMMST_REC<6>    ;* UOM
                        REC<57>  = ITMMST_REC<57>   ;* Inventory Codes
                        REC<75>  = ""               ;* Planner Code
                        REC<76>  = ""               ;* Buyer Code
                        REC<98>  = ITMMST_REC<98>   ;* Weight UOM
                        REC<101> = ITMMST_REC<101>  ;* Purchase UOM
                        REC<171> = ""               ;* Req Reg
                        REC<172> = ""               ;* Req Type
                        REC<173> = ""               ;* Supply Whs
                        REC<174> = ""               ;* Non Stk Flg
                        REC<208> = ITMMST_REC<208>  ;* Product Line
                        WRITE REC TO ITMMST, ID ON ERROR
                           ERR_CODE = "B420-ERROR-8-3"
                           ERR_MSG  = "Unable to write BOM info for product record ":ID:" in file ITMMST {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                           GO B420_EXIT
                        END
                     END ELSE
                        ERR_CODE = "B420-ERROR-8-4"
                        ERR_MSG  = "The product record ":ID:" does not exist in file ITMMST -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                        GO B420_EXIT
                     END
                  REPEAT
               END ELSE
                  ERR_CODE = "B420-ERROR-8-5"
                  ERR_MSG  = "Error occurred while executing uniquery {":U2_QUERY:"} -> {":@SYSTEM.RETURN.CODE:"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END
            END

            ;* Update BOM on base UOM change-> BOMS3000.PS1
            IF PRODUCT_BASE_UOM # ITMMST_REC<6> THEN
               U2_QUERY = 'SELECT BOMMST WITH C.PART.NBR = "':PRODUCT_CODE:'"'
               CLEARSELECT
               EXECUTE U2_QUERY CAPTURING U2_OUTPUT
               IF @SYSTEM.RETURN.CODE >= 0 THEN
                  LOOP
                     READNEXT BOMMST_ID ELSE U2_EOF = @TRUE
                  UNTIL U2_EOF
                     READU BOMMST_REC FROM BOMMST, BOMMST_ID
                     ON ERROR
                        ERR_CODE = "B420-ERROR-9-1"
                        ERR_MSG  = "Unable to read the product BOM record ":BOMMST_ID:" in file BOMMST {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                        GO B420_EXIT
                     END LOCKED
                        ERR_CODE = "B420-ERROR-9-2"
                        ERR_MSG  = "The product BOM record ":BOMMST_ID:" in file BOMMST is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                        RECORD_LOCK_FOUND = @TRUE
                        GO B420_EXIT
                     END THEN
                        IF BOMMST_REC<22> # PRODUCT_BASE_UOM THEN
                           WRITEV PRODUCT_BASE_UOM TO BOMMST, BOMMST_ID, 22 ON ERROR
                              ERR_CODE = "B420-ERROR-9-3"
                              ERR_MSG  = "Unable to update base UOM {":PRODUCT_BASE_UOM:"} for product BOM record ":BOMMST_ID:" on field #22 in file BOMMST {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                              GO B420_EXIT
                           END
                        END
                     END ELSE
                        ERR_CODE = "B420-ERROR-9-4"
                        ERR_MSG  = "The product BOM record ":ID:" does not exist in file BOMMST -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                        GO B420_EXIT
                     END
                  REPEAT
               END ELSE
                  ERR_CODE = "B420-ERROR-9-5"
                  ERR_MSG  = "Error occurred while executing uniquery {":U2_QUERY:"} -> {":@SYSTEM.RETURN.CODE:"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END
            END
         END

         ;***********************************************
         ;* Write PIM product info to Infoflo ITMMST file
         ;***********************************************
         WRITE ITMMST_REC TO ITMMST, ITMMST_ID ON ERROR
            ERR_CODE = "B420-ERROR-10-1"
            ERR_MSG  = "Unable to write the product record ":ITMMST_ID:" in file ITMMST {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
            GO B420_EXIT
         END
         IF NEW_PRODUCT THEN
            ;* write new Product CPN to ITMXRF file
            WRITEV PRODUCT_CPN TO ITMXRF, PRODUCT_CODE, 1 ON ERROR
               ERR_CODE = "B420-ERROR-10-2"
               ERR_MSG  = "Unable to write product xref record ":PRODUCT_CODE:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END

            ;* write new Product Code to ITMXRF file
            WRITEV PRODUCT_CODE TO ITMXRF, PRODUCT_CPN, 1 ON ERROR
               ERR_CODE = "B420-ERROR-10-3"
               ERR_MSG  = "Unable to write product xref record ":PRODUCT_CPN:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END

            ;* write new Canplas item number to CANPLASXRF file
            IF CANPLAS_ITEM_NBR # "" THEN
               ID = "PROD*TO*":PRODUCT_CODE
               READVU LOCK_TEST FROM CANPLASXRF, ID
               ON ERROR
                  ERR_CODE = "B420-ERROR-10-4"
                  ERR_MSG  = "Unable to read the Canplas product xref record ":ID:" in file CANPLASXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END LOCKED
                  ERR_CODE = "B420-ERROR-10-5"
                  ERR_MSG  = "The Canplas product xref record ":ID:" in file CANPLASXRF is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  RECORD_LOCK_FOUND = @TRUE
                  GO B420_EXIT
               END ELSE
                  ;* nop
               END
               WRITEV CANPLAS_ITEM_NBR TO CANPLASXRF, ID, 1 ON ERROR
                  ERR_CODE = "B420-ERROR-10-6"
                  ERR_MSG  = "Unable to write the Canplas product xref record ":ID:" in file CANPLASXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END

               ID = "PROD*FRM*":CANPLAS_ITEM_NBR
               READVU LOCK_TEST FROM CANPLASXRF, ID
               ON ERROR
                  ERR_CODE = "B420-ERROR-10-7"
                  ERR_MSG  = "Unable to read the Canplas product xref record ":ID:" in file CANPLASXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END LOCKED
                  ERR_CODE = "B420-ERROR-10-8"
                  ERR_MSG  = "The Canplas product xref record ":ID:" in file CANPLASXRF is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  RECORD_LOCK_FOUND = @TRUE
                  GO B420_EXIT
               END ELSE
                  WRITEV PRODUCT_CODE TO CANPLASXRF, ID, 1 ON ERROR
                     ERR_CODE = "B420-ERROR-10-9"
                     ERR_MSG  = "Unable to write the Canplas product xref record ":ID:" in file CANPLASXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                     GO B420_EXIT
                  END
               END
            END

            ;* create new product UPN record if applicable
            IF PRODUCT_UPN # "" THEN
               ITMXRF_ID = "IIS*":PRODUCT_UPN
               WRITEV PRODUCT_CPN TO ITMXRF, ITMXRF_ID, 1 ON ERROR
                  ERR_CODE = "B420-ERROR-10-10"
                  ERR_MSG  = "Unable to write the new product xref record ":ITMXRF_ID:" in file ITMXRF {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END
            END
         END

         ;**********************************************************************
         ;* Write PIM product info to Infoflo ITMMSTWRK file (Product Workbench)
         ;**********************************************************************
         IF NEW_PRODUCT THEN
            TTL = DCOUNT(ITMMSTWRK_ID_LIST, @AM)
            FOR CNT = 1 TO TTL
               ITMMSTWRK_ID  = ITMMSTWRK_ID_LIST<1,CNT>
               ITMMSTWRK_REC = RAISE(ITMMSTWRK_REC_LIST<CNT>)
               READVU LOCK_TEST FROM ITMMSTWRK, ITMMSTWRK_ID, 1
               ON ERROR
                  ERR_CODE = "B420-ERROR-11-1"
                  ERR_MSG  = "Unable to read the product workbench record ":ITMMSTWRK_ID:" in file ITMMSTWRK {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END LOCKED
                  ERR_CODE = "B420-ERROR-11-2"
                  ERR_MSG  = "The product workbench record ":ITMMSTWRK_ID:" in file ITMMSTWRK is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  RECORD_LOCK_FOUND = @TRUE
                  GO B420_EXIT
               END ELSE
                  WRITE ITMMSTWRK_REC TO ITMMSTWRK, ITMMSTWRK_ID ON ERROR
                     ERR_CODE = "B420-ERROR-11-3"
                     ERR_MSG  = "Unable to write the product workbench record ":ITMMSTWRK_ID:" in file ITMMSTWRK {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                     GO B420_EXIT
                  END
               END
            NEXT CNT
         END

         ;******************************************************************
         ;* Write PIM product info to Infoflo ITMMSTLOG file (For LabelView)
         ;******************************************************************
         IF ITMMST_REC<311> # ITMMST_REC_OLD<311> THEN
            ITMMSTLOG_ID = PRODUCT_CPN:"*":DATE():"*":TIME()
            IF NEW_PRODUCT THEN
               ITMMSTLOG_REC<1> = "C"
            END ELSE
               ITMMSTLOG_REC<1> = "M"
            END
            ITMMSTLOG_REC<2> = "F311"
            ITMMSTLOG_REC<3> = "Attribute Label Description"
            ITMMSTLOG_REC<4> = ITMMST_REC_OLD<311>
            ITMMSTLOG_REC<5> = ITMMST_REC<311>
            ITMMSTLOG_REC<6> = @LOGNAME
            ITMMSTLOG_REC<7> = "PIMS9100.1"
            ITMMSTLOG_REC<8> = ""
            ITMMSTLOG_REC<9> = DATE()
            ITMMSTLOG_REC<10> = "1"
            ITMMSTLOG_REC<11> = ""
            READVU LOCK_TEST FROM ITMMSTLOG, ITMMSTLOG_ID, 1
            ON ERROR
               ERR_CODE = "B420-ERROR-12-1"
               ERR_MSG  = "Unable to read the product master file log record ":ITMMSTLOG_ID:" in file ITMMSTLOG {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               GO B420_EXIT
            END LOCKED
               ERR_CODE = "B420-ERROR-12-2"
               ERR_MSG  = "The product master file log record ":ITMMSTLOG_ID:" in file ITMMSTLOG is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B420_EXIT
            END ELSE
               WRITE ITMMSTLOG_REC TO ITMMSTLOG, ITMMSTLOG_ID ON ERROR
                  ERR_CODE = "B420-ERROR-12-3"
                  ERR_MSG  = "Unable to write the product master file log record ":ITMMSTLOG_ID:" in file ITMMSTLOG {":STATUS():"} -> Products<":X:"> -> ":PRODUCT_STEPID:"."
                  GO B420_EXIT
               END
            END
         END
      NEXT X
   END

B420_EXIT:
   RETURN


******************************************
* Initialize Existing PIM Product Record *
******************************************
B421_INITIALIZE_EXISTING_PRODUCT_RECORD:

   ;* Set existing PIM product initial values
   ITMMST_REC<1>       = ""          ;* Product Code
   ITMMST_REC<2>       = ""          ;* Product Description
   ITMMST_REC<6>       = ""          ;* Base UOM
   ITMMST_REC<13>      = ""          ;* Item Sort Key (NacoPartNumber & CanplasPartNumber)
   ITMMST_REC<57>      = "        "  ;* Inventory Codes (initialize with 8 space characters)
   ITMMST_REC<57>[2,1] = 0           ;* Bin Item
   ITMMST_REC<57>[4,1] = 1           ;* Engineering Status (Active or Inactive Flag)
   ITMMST_REC<57>[5,1] = "F"         ;* Order Policy
   ITMMST_REC<57>[8,1] = 0           ;* Phantom Flag
   ITMMST_REC<73>      = ""          ;* Product Status
   ITMMST_REC<97>      = ""          ;* Superseded By Product
   ITMMST_REC<125>     = ""          ;* Substitute By By Product
   ITMMST_REC<163>     = ""          ;* Product Description325
   ITMMST_REC<176>     = ""          ;* Base Qty (Imperial/Metric)
   ITMMST_REC<177>     = ""          ;* Default Price Per (Imperial/Metric)
   ITMMST_REC<178>     = ""          ;* Package Code Parent
   ITMMST_REC<179>     = ""          ;* Package Quantity
   ITMMST_REC<180>     = ""          ;* Product Country Of Origin
   ITMMST_REC<181>     = ""          ;* Product Tariff Code
   ITMMST_REC<184>     = ""          ;* Product Dangerous Good Code
   ITMMST_REC<185>     = ""          ;* Product STEPID
   ITMMST_REC<189>     = ""          ;* Product Royalty Flag
   ITMMST_REC<191>     = ""          ;* Product Rebate Matrix Code
   ITMMST_REC<194>     = ""          ;* Purchased From Aliaxis
   ITMMST_REC<196>     = ""          ;* Alternate UPC Code
   ITMMST_REC<208>     = ""          ;* Infoflo Product Line
   ITMMST_REC<225>     = ""          ;* Package Identifier (PI)
   ITMMST_REC<233>     = ""          ;* Package Length
   ITMMST_REC<234>     = ""          ;* Package Width
   ITMMST_REC<235>     = ""          ;* Package Height
   ITMMST_REC<236>     = ""          ;* Package Weight
   ITMMST_REC<238>     = ""          ;* Non-Returnable & Non-Cancellable
   ITMMST_REC<239>     = ""          ;* Product Status Expiration Date
   ITMMST_REC<263>     = ""          ;* UOM Standard
   ITMMST_REC<264>     = ""          ;* Product Description Type
   ITMMST_REC<265>     = ""          ;* Per Truck Load
   ITMMST_REC<316>     = ""          ;* Package Next Level PI
   ITMMST_REC<317>     = ""          ;* Dangeroud Good Flashpoint Celsius
   ITMMST_REC<318>     = ""          ;* Dangeroud Good Flashpoint Fahrenheit
   ITMMST_REC<320>     = ""          ;* Length
   ITMMST_REC<333>     = ""          ;* ABC Category Override
   ITMMST_REC<235>     = ""          ;* Product Packaging Comments
   ITMMST_REC<337>     = ""          ;* Manufacturing Color
   ITMMST_REC<341>     = 0           ;* NAFTA Flag
   ITMMST_REC<343>     = ""          ;* Bell Length
   ITMMST_REC<346>     = ""          ;* UV Protection Flag

B421_EXIT:
   RETURN


*************************************
* Initialize New PIM Product Record *
*************************************
B422_INITIALIZE_NEW_PRODUCT_RECORD:

   ;* Set new product initial values
   ITMMST_ID           = ""
   ITMMST_REC          = ""
   ITMMST_REC<31>      = DATE()               ;* Date Added
   ITMMST_REC<53>      = 10                   ;* Purch Lead Time
   ITMMST_REC<54>      = 10                   ;* Mfg Lead Time
   ITMMST_REC<57>      = "        "           ;* Inventory Codes (initialize with 8 space characters)
   ITMMST_REC<57>[2,1] = 0                    ;* Bin Item
   ITMMST_REC<57>[4,1] = 1                    ;* Engineering Status (Active or Inactive Flag)
   ITMMST_REC<57>[5,1] = "F"                  ;* Order Policy
   ITMMST_REC<57>[8,1] = 0                    ;* Phantom Flag
   ITMMST_REC<89>      = "N"                  ;* Insp Req'd
   ITMMST_REC<91>      = 0                    ;* DTS Lead Time
   ITMMST_REC<98>      = "KG"                 ;* Shipping Weight
   ITMMST_REC<101>     = "EA"                 ;* Purch Um Ps
   ITMMST_REC<102>     = 1                    ;* Conversion Factor
   ITMMST_REC<107>     = 0                    ;* Config Code
   ITMMST_REC<122>     = "P/S"                ;* Conversion Type Code
   ITMMST_REC<143>     = 0                    ;* Wt Added
   ITMMST_REC<154>     = 1                    ;* Item Tax Code
   ITMMST_REC<161>     = "S":@VM:"S":@VM:"I":@VM:"I":@VM:"M":@VM:"M"              ;* Desc Uom
   ITMMST_REC<162>     = "ENG":@VM:"FRN":@VM:"ENG":@VM:"FRN":@VM:"ENG":@VM:"FRN"  ;* Desc Lang
   ITMMST_REC<175>     = "I":@VM:"M"                                              ;* Uom Type
   ITMMST_REC<305>     = "01":@VM:"01":@VM:"01":@VM:"01":@VM:"01":@VM:"01":@VM    ;* Desc Comp
   ITMMST_REC<305>    := "02":@VM:"02":@VM:"02":@VM:"02":@VM:"02":@VM:"02":@VM
   ITMMST_REC<305>    := "03":@VM:"03":@VM:"03":@VM:"03":@VM:"03":@VM:"03"
   ITMMST_REC<306>     = ITMMST_REC<161>:@VM:ITMMST_REC<161>:@VM:ITMMST_REC<161>  ;* Desc Comp Uom
   ITMMST_REC<307>     = ITMMST_REC<162>:@VM:ITMMST_REC<162>:@VM:ITMMST_REC<162>  ;* Desc Comp Lang
   ITMMST_REC<309>     = ITMMST_REC<161>      ;* Attr Lbl Uom
   ITMMST_REC<310>     = ITMMST_REC<162>      ;* Attr Lbl Lang

B422_EXIT:
   RETURN


*****************************************************************************
* Write PIM Outbound Integration Request STEPXML Package Data To Infoflo DB *
*****************************************************************************
B430_WRITE_PIM_STEPXML_PACKAGE_DATA_TO_INFOFLO_DB:

   ;****************************************
   ;* Re-build ITMMST record for the package
   ;****************************************
   IF PACKAGE_FOUND THEN
      ITMMST_ID  = ""
      ITMMST_REC = ""
      PACKAGE_STEPID = ""
      TOTAL_ITEMS = DCOUNT(PIM_STEPXML_PACKAGE_DATA_MATRIX, @AM)
      FOR X = 1 TO TOTAL_ITEMS
         TOTAL_ATTRS = DCOUNT(PIM_STEPXML_PACKAGE_ATTR_NAMES<X>, @VM)
         FOR Y = 1 TO TOTAL_ATTRS
            ;****************************************************
            ;* Extract attribute context value (english & french)
            ;****************************************************
            ATTRIBUTE_NAME  = PIM_STEPXML_PACKAGE_DATA_MATRIX<X,Y,1>
            ATTRIBUTE_VALUE = PIM_STEPXML_PACKAGE_DATA_MATRIX<X,Y,2>
            SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
            SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
            ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
            ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA

            ;**********************************************************************
            ;* Mapping per PIM package attribute with Infoflo ITMMST file attribute
            ;**********************************************************************
            BEGIN CASE
            CASE ATTRIBUTE_NAME = "ID"
               PACKAGE_STEPID = ATTRIBUTE_VALUE_ENG
               FIND PACKAGE_STEPID IN PIM_STEPXML_PACKAGE_DATA_MATRIX, 2 SETTING AM_POS,VM_POS,SM_POS THEN  ;* find the next level PI for the package (2nd occurrence)
                  POS = AM_POS
                  FIND "PkgPI" IN PIM_STEPXML_PACKAGE_DATA_MATRIX<POS> SETTING AM_POS,VM_POS,SM_POS THEN
                     ATTRIBUTE_VALUE = PIM_STEPXML_PACKAGE_DATA_MATRIX<POS,VM_POS,2>
                     SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
                     SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
                     ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
                     ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA
                     PACKAGE_NLPI = ATTRIBUTE_VALUE_ENG
                  END ELSE
                     ERR_CODE = "B430-ERROR-1-1"
                     ERR_MSG  = 'Unable to find the product package mandatory attribute "PkgPI" -> Products<':POS:"> -> ":PACKAGE_STEPID:"."
                     GO B420_EXIT
                  END
               END ELSE
                  PACKAGE_NLPI = ""  ;* no next level PI
               END
            CASE ATTRIBUTE_NAME = "ParentID"
               PACKAGE_PARENTID = FIELD(ATTRIBUTE_VALUE_ENG,"_",2)
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F178":CHAR(9):PACKAGE_PARENTID
            CASE ATTRIBUTE_NAME = "ProductID"
               PRODUCT_STEPID = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"PIM":CHAR(9):"N/A":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PCCode"
               PACKAGE_CODE = ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgPI"
               PACKAGE_PI = ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgDefault"
               PACKAGE_DEFAULT = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"PIM":CHAR(9):"N/A":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PerTruckLoad"
               PACKAGE_PER_TRUCK_LOAD = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F265":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgLength"
               PACKAGE_LENGTH = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F233":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgWidth"
               PACKAGE_WIDTH = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F234":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgHeight"
               PACKAGE_HEIGHT = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F235":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgWeight"
               PACKAGE_WEIGHT = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F236":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgDefaultBranch"
               PACKAGE_DEFAULT_BRANCH = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"PIM":CHAR(9):"N/A":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgQuantity"
               PACKAGE_QUANTITY = ICONV(ATTRIBUTE_VALUE_ENG, "MR2")
               SUMMARY_REPORT_PACKAGE_CONTENT<-1> = PACKAGE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"ITMMST":CHAR(9):"F179":CHAR(9):ATTRIBUTE_VALUE_ENG
            END CASE
         NEXT Y
         SUMMARY_REPORT_PACKAGE_CONTENT = INSERT(SUMMARY_REPORT_PACKAGE_CONTENT,X,1,0,PACKAGE_STEPID:CHAR(9):"PCCode":CHAR(9):"SYSTBL":CHAR(9):"F0":CHAR(9):PACKAGE_CODE)
         SUMMARY_REPORT_PACKAGE_CONTENT = INSERT(SUMMARY_REPORT_PACKAGE_CONTENT,X,2,0,PACKAGE_STEPID:CHAR(9):"PkgPI":CHAR(9):"ITMMST":CHAR(9):"F225":CHAR(9):PACKAGE_PI)
         SUMMARY_REPORT_PACKAGE_CONTENT = INSERT(SUMMARY_REPORT_PACKAGE_CONTENT,X,3,0,PACKAGE_STEPID:CHAR(9):"<NLPI>":CHAR(9):"ITMMST":CHAR(9):"F316":CHAR(9):PACKAGE_NLPI)

         ;*******************************************************************
         ;* locate product STEPID reference by the package to get product CPN
         ;*******************************************************************
         IF PRODUCT_STEPID[1,3] = "PRD" THEN
            FIND PRODUCT_STEPID IN PIM_STEPXML_PRODUCT_DATA_MATRIX SETTING AM_POS,VM_POS,SM_POS THEN
               POS = AM_POS  ;* save the product data matrix index for relocating later
               FIND "InfofloCPN" IN PIM_STEPXML_PRODUCT_DATA_MATRIX<POS> SETTING AM_POS,VM_POS,SM_POS THEN
                  ;* get existing product package reference key
                  ATTRIBUTE_VALUE = PIM_STEPXML_PRODUCT_DATA_MATRIX<POS,VM_POS,2>
                  SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
                  SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
                  ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
                  ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA
                  ITMMST_ID = ATTRIBUTE_VALUE_ENG
               END ELSE
                  ;* get new product package reference key
                  FIND PRODUCT_STEPID IN PRODUCT_KEY_INFO_LIST SETTING AM_POS,VM_POS,SM_POS THEN
                     ITMMST_ID = PRODUCT_KEY_INFO_LIST<AM_POS,2>
                  END ELSE
                     ERR_CODE = "B430-ERROR-1-2"
                     ERR_MSG  = "Unable to find the product STEPID ":PRODUCT_STEPID:" referenced by the package -> Products<":POS:"> -> ":PACKAGE_STEPID:"."
                     GO B430_EXIT
                  END
               END
            END ELSE
               ERR_CODE = "B430-ERROR-1-3"
               ERR_MSG  = "Unable to find the product STEPID ":PRODUCT_STEPID:" referenced by the package -> Products<":POS:"> -> ":PACKAGE_STEPID:"."
               GO B430_EXIT
            END
         END ELSE
            ;* all these package options reference to the same product CPN
         END

         ;************************************************************
         ;* Derive the package dimensions from package code if not set
         ;************************************************************
         ID = "I07*":PACKAGE_CODE
         READ REC FROM SYSTBL, ID
         ON ERROR
            ERR_CODE = "B430-ERROR-2-1"
            ERR_MSG  = "Unable to read the package code record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_STEPID:"."
            GO B430_EXIT
         END THEN
            IF PACKAGE_LENGTH = "" OR PACKAGE_LENGTH = 0 THEN PACKAGE_LENGTH = REC<10>
            IF PACKAGE_WIDTH = "" OR PACKAGE_WIDTH = 0 THEN PACKAGE_WIDTH = REC<11>
            IF PACKAGE_HEIGHT = "" OR PACKAGE_HEIGHT = 0 THEN PACKAGE_HEIGHT = REC<12>
            IF PACKAGE_LENGTH * PACKAGE_WIDTH * PACKAGE_HEIGHT = 0 AND (PACKAGE_LENGTH > 0 OR PACKAGE_WIDTH > 0 OR PACKAGE_HEIGHT > 0) THEN
               ERR_CODE = "B430-ERROR-2-2"
               ERR_MSG  = "The package dimensions (i.e. lenght, width, height) need to be set all at the same time {":OCONV(PACKAGE_LENGTH,"MD3"):", ":OCONV(PACKAGE_WIDTH,"MD3"):", ":OCONV(PACKAGE_HEIGHT,"MD3"):"} -> Products<":X:"> -> ":PACKAGE_STEPID:"."
               GO B430_EXIT
            END
         END ELSE
            ERR_CODE = "B430-ERROR-2-3"
            ERR_MSG  = "The package code record ":ID:" does not exist in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_STEPID:"."
            GO B430_EXIT
         END

         ;***********************************************
         ;* Write PIM package info to Infoflo ITMMST file
         ;***********************************************
         IF ITMMST_ID # "" THEN  ;* the STEPXML may have package info only (i.e. without any product reference info)
            READU ITMMST_REC FROM ITMMST, ITMMST_ID
            ON ERROR
               ERR_CODE = "B430-ERROR-3-1"
               ERR_MSG  = "Unable to read the product record ":ITMMST_ID:" for package in file ITMMST {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_STEPID:"."
               GO B430_EXIT
            END LOCKED
               ERR_CODE = "B430-ERROR-3-2"
               ERR_MSG  = "The product record ":ITMMST_ID:" in file ITMMST is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PACKAGE_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B430_EXIT
            END THEN
               ;* move default package on top of the list
               IF PACKAGE_DEFAULT = "Y" THEN
                  ITMMST_REC<178,1> = PACKAGE_PARENTID
                  ITMMST_REC<179,1> = PACKAGE_QUANTITY
                  ITMMST_REC<225,1> = PACKAGE_PI
                  ITMMST_REC<233,1> = PACKAGE_LENGTH
                  ITMMST_REC<234,1> = PACKAGE_WIDTH
                  ITMMST_REC<235,1> = PACKAGE_HEIGHT
                  ITMMST_REC<236,1> = PACKAGE_WEIGHT
                  ITMMST_REC<265,1> = PACKAGE_PER_TRUCK_LOAD
                  ITMMST_REC<316,1> = PACKAGE_NLPI
                  IF X = 1 THEN
                     INC = X + 1
                  END ELSE
                     INC = X
                  END
               END ELSE
                  ITMMST_REC<178,INC> = PACKAGE_PARENTID
                  ITMMST_REC<179,INC> = PACKAGE_QUANTITY
                  ITMMST_REC<225,INC> = PACKAGE_PI
                  ITMMST_REC<233,INC> = PACKAGE_LENGTH
                  ITMMST_REC<234,INC> = PACKAGE_WIDTH
                  ITMMST_REC<235,INC> = PACKAGE_HEIGHT
                  ITMMST_REC<236,INC> = PACKAGE_WEIGHT
                  ITMMST_REC<265,INC> = PACKAGE_PER_TRUCK_LOAD
                  ITMMST_REC<316,INC> = PACKAGE_NLPI
                  INC += 1
               END
               ITMMST_REC<335> = PACKAGE_COMMENT
               WRITE ITMMST_REC TO ITMMST, ITMMST_ID ON ERROR
                  ERR_CODE = "B430-ERROR-3-3"
                  ERR_MSG  = "Unable to write the product record ":ITMMST_ID:" for package in file ITMMST {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_STEPID:"."
                  GO B430_EXIT
               END
            END ELSE
               ERR_CODE = "B430-ERROR-3-4"
               ERR_MSG  = "The product record ":ITMMST_ID:" for package does not exist in file ITMMST -> Products<":X:"> -> ":PACKAGE_STEPID:"."
               GO B430_EXIT
            END
         END
      NEXT X
   END

B430_EXIT:
   RETURN


*********************************************************************************
* Write PIM Outbound Integration Request STEPXML PackageCode Data To Infoflo DB *
*********************************************************************************
B431_WRITE_PIM_STEPXML_PACKAGE_CODE_DATA_TO_INFOFLO_DB:

   IF PACKAGE_CODE_FOUND THEN
      TOTAL_ITEMS = DCOUNT(PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX, @AM)
      FOR X = 1 TO TOTAL_ITEMS
         SYSTBL_ID  = ""
         SYSTBL_REC = ""
         PACKAGE_CODE_STEPID = ""
         REFERENCED_NODE = @FALSE
         TOTAL_ATTRS = DCOUNT(PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<X>, @VM)
         FOR Y = 1 TO TOTAL_ATTRS
            ;****************************************************
            ;* Extract attribute context value (english & french)
            ;****************************************************
            ATTRIBUTE_NAME  = PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<X,Y,1>
            ATTRIBUTE_VALUE = PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<X,Y,2>
            SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
            SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
            ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
            ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA

            ;***************************************************************************
            ;* Mapping per PIM package code attribute with Infoflo SYSTBL file attribute
            ;***************************************************************************
            BEGIN CASE
            CASE ATTRIBUTE_NAME = "ID"
               PACKAGE_CODE_STEPID = ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "ParentID"
               PACKAGE_PARENTID = ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "Referenced" AND UPCASE(ATTRIBUTE_VALUE_ENG) = "TRUE"
               REFERENCED_NODE = @TRUE ;* parent package code object info will not be integrated
               EXIT
            CASE ATTRIBUTE_NAME = "PCCode"
               PACKAGE_CODE = ATTRIBUTE_VALUE_ENG
               SYSTBL_ID = "I07*":PACKAGE_CODE
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F0":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgActive"
               IF ATTRIBUTE_VALUE_ENG = "N" THEN
                  SYSTBL_REC<8> = "I"
               END ELSE
                  SYSTBL_REC<8> = "A"
               END
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F8":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgDescriptionLong"
               SYSTBL_REC<4> = ATTRIBUTE_VALUE_ENG  ;* English
               PACKAGE_CODE_DESC_L = SYSTBL_REC<4>
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F4":CHAR(9):ATTRIBUTE_VALUE_ENG
               IF ATTRIBUTE_VALUE_FRN # "" THEN
                  CONTEXT_VALUE = ATTRIBUTE_VALUE_FRN
                  GOSUB CONVERT.UNICODE.TO.ASCII
                  SYSTBL_REC<20,1> = RESULT  ;* French
               END ELSE  ;* default to English if no French available
                  SYSTBL_REC<20,1> = ATTRIBUTE_VALUE_ENG
               END
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F20":CHAR(9):SYSTBL_REC<20>
            CASE ATTRIBUTE_NAME = "PkgDescriptionShort"
               SYSTBL_REC<18> = ATTRIBUTE_VALUE_ENG  ;* English
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F18":CHAR(9):ATTRIBUTE_VALUE_ENG
               IF ATTRIBUTE_VALUE_FRN # "" THEN
                  CONTEXT_VALUE = ATTRIBUTE_VALUE_FRN
                  GOSUB CONVERT.UNICODE.TO.ASCII
                  SYSTBL_REC<21,1> = RESULT  ;* French
               END ELSE  ;* default to English if no French available
                  SYSTBL_REC<21,1> = ATTRIBUTE_VALUE_ENG
               END
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F21":CHAR(9):SYSTBL_REC<21>
            CASE ATTRIBUTE_NAME = "PkgLength"
               SYSTBL_REC<10> = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F10":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgWidth"
               SYSTBL_REC<11> = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F11":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgHeight"
               SYSTBL_REC<12> = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F12":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgWeight"
               SYSTBL_REC<9> = ICONV(ATTRIBUTE_VALUE_ENG, "MD3")
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F9":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "OvrDimensions"
               SYSTBL_REC<13> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F13":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "DefaultNextLevelQty"
               SYSTBL_REC<3> = ICONV(ATTRIBUTE_VALUE_ENG,"MD3")
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F3":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgCartonsPerLayer"
               SYSTBL_REC<15> = ATTRIBUTE_VALUE_ENG
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F15":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PkgAutoLabel"
               IF ATTRIBUTE_VALUE_ENG = "Y" THEN
                  SYSTBL_REC<2> = "1= Auto label"
               END ELSE
                  SYSTBL_REC<2> = ""
               END
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F2":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PackageCodeToDefaultNextLevel"
               FOR CNT = 1 TO TOTAL_ITEMS
                  FOR INC = 1 TO TOTAL_ATTRS
                     IF PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT,INC,1> = "ID" AND ATTRIBUTE_VALUE_ENG = PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT,INC,2> THEN
                        FIND "PCCode" IN PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT> SETTING AM_POS,VM_POS,SM_POS THEN
                           ATTRIBUTE_VALUE = PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT,VM_POS,2>
                           SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
                           SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
                           ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
                           ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA
                           SYSTBL_REC<1> = ATTRIBUTE_VALUE_ENG
                           EXIT
                        END
                     END
                  NEXT INC
               NEXT CNT
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F1":CHAR(9):ATTRIBUTE_VALUE_ENG
            CASE ATTRIBUTE_NAME = "PackageCodeSummaryCode"
               FOR CNT = 1 TO TOTAL_ITEMS
                  FOR INC = 1 TO TOTAL_ATTRS
                     IF PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT,INC,1> = "ID" AND ATTRIBUTE_VALUE_ENG = PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT,INC,2> THEN
                        FIND "PCCode" IN PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT> SETTING AM_POS,VM_POS,SM_POS THEN
                           ATTRIBUTE_VALUE = PIM_STEPXML_PACKAGE_CODE_DATA_MATRIX<CNT,VM_POS,2>
                           SWAP @TM WITH @AM IN ATTRIBUTE_VALUE
                           SWAP CHAR(250) WITH @VM IN ATTRIBUTE_VALUE
                           ATTRIBUTE_VALUE_ENG = ATTRIBUTE_VALUE<1>  ;* context en-US
                           ATTRIBUTE_VALUE_FRN = ATTRIBUTE_VALUE<2>  ;* context fr-CA
                           SYSTBL_REC<5> = ATTRIBUTE_VALUE_ENG
                           EXIT
                        END
                     END
                  NEXT INC
               NEXT CNT
               SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):ATTRIBUTE_NAME:CHAR(9):"SYSTBL":CHAR(9):"F5":CHAR(9):ATTRIBUTE_VALUE_ENG
            END CASE
         NEXT Y

         ;* Skip all referened package node
         IF REFERENCED_NODE THEN CONTINUE

         ;***********************************************
         ;* Package dimension initializtion if applicable
         ;***********************************************
         IF SYSTBL_REC<10> = "" THEN SYSTBL_REC<10> = 0
         IF SYSTBL_REC<11> = "" THEN SYSTBL_REC<11> = 0
         IF SYSTBL_REC<12> = "" THEN SYSTBL_REC<12> = 0

         ;**********************************
         ;* Package Type to EDI Package code
         ;**********************************
         PACKAGE_TYPE = FIELD(PACKAGE_PARENTID, "_", 2)
         ID = "I316*":PACKAGE_TYPE
         READ REC FROM SYSTBL, ID
         ON ERROR
            ERR_CODE = "B431-ERROR-1-1"
            ERR_MSG  = "Unable to read the package type record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
            GO B431_EXIT
         END THEN
            PACKAGE_EDI_CODE = REC<1>
            SYSTBL_REC<6> = PACKAGE_EDI_CODE
            SUMMARY_REPORT_PACKAGE_CODE_CONTENT<-1> = PACKAGE_CODE_STEPID:CHAR(9):"<EDIPackageCode>":CHAR(9):"SYSTBL":CHAR(9):"F6":CHAR(9):ATTRIBUTE_VALUE_ENG
         END ELSE
            ERR_CODE = "B431-ERROR-1-2"
            ERR_MSG  = "The package type record ":ID:" does not exist in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
            GO B431_EXIT
         END

         ;****************************************************
         ;* Write PIM package code info to Infoflo SYSTBL file
         ;****************************************************
         IF SYSTBL_ID # "" THEN
            ;* update the pacakge code
            READVU TEST_LOCK FROM SYSTBL, SYSTBL_ID, 1
            ON ERROR
               ERR_CODE = "B431-ERROR-2-1"
               ERR_MSG  = "Unable to read the package code record ":SYSTBL_ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
               GO B431_EXIT
            END LOCKED
               ERR_CODE = "B431-ERROR-2-2"
               ERR_MSG  = "The package code record ":SYSTBL_ID:" in file SYSTBL is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B431_EXIT
            END ELSE
               ;* new package code
            END
            WRITE SYSTBL_REC TO SYSTBL, SYSTBL_ID ON ERROR
               ERR_CODE = "B431-ERROR-2-3"
               ERR_MSG  = "Unable to write the package code record ":SYSTBL_ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
               GO B431_EXIT
            END

            ;* update the package code SYSTBL control record
            ID = "I07"
            READU REC FROM SYSTBL, ID
            ON ERROR
               ERR_CODE = "B431-ERROR-3-1"
               ERR_MSG  = "Unable to read the package code control record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
               GO B431_EXIT
            END LOCKED
               ERR_CODE = "B431-ERROR-3-2"
               ERR_MSG  = "The package code control record ":ID:" in file SYSTBL is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
               RECORD_LOCK_FOUND = @TRUE
               GO B431_EXIT
            END THEN
               PACKAGE_CODE_LIST = REC<1>
               LOCATE PACKAGE_CODE IN PACKAGE_CODE_LIST<1> BY "AL" SETTING POS THEN
                  ;* existing package code, nop
               END ELSE
                  ;* new package code
                  PACKAGE_CODE_LIST = INSERT(PACKAGE_CODE_LIST,1,POS,0,PACKAGE_CODE)
                  REC<1> = PACKAGE_CODE_LIST<1>
                  WRITE REC TO SYSTBL, ID ON ERROR
                     ERR_CODE = "B431-ERROR-3-3"
                     ERR_MSG  = "Unable to write the package code control record ":ID:" in file SYSTBL {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
                     GO B431_EXIT
                  END

                  ;* update IICOMBO file - SYSS3005.2
                  IICOMBO_ID  = "COMBO.":ID
                  IICOMBO_REC = ""
                  READU IICOMBO_REC FROM IICOMBO, IICOMBO_ID
                  ON ERROR
                     ERR_CODE = "B431-ERROR-3-4"
                     ERR_MSG  = "Unable to read the package code IICOMBO record ":IICOMBO_ID:" in file IICOMBO {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
                     GO B431_EXIT
                  END LOCKED
                     ERR_CODE = "B431-ERROR-3-5"
                     ERR_MSG  = "The package code IICOMBO record ":IICOMBO_ID:" in file IICOMBO is currently locked by {":GETUSERNAME(STATUS()):"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
                     RECORD_LOCK_FOUND = @TRUE
                     GO B431_EXIT
                  END THEN
                     IICOMBO_REC<3> = INSERT(IICOMBO_REC<3>,1,POS,0,PACKAGE_CODE)
                     IICOMBO_REC<4> = INSERT(IICOMBO_REC<4>,1,POS,0,PACKAGE_CODE_DESC_L)
                     IICOMBO_REC<5> = INSERT(IICOMBO_REC<5>,1,POS,0,"")
                     IICOMBO_REC<9> = ACNT_NAME:@VM:@LOGNAME:@VM:DATE():@VM:TIME()
                     WRITE IICOMBO_REC TO IICOMBO, IICOMBO_ID ON ERROR
                        ERR_CODE = "B431-ERROR-3-6"
                        ERR_MSG  = "Unable to write the package code IICOMBO record ":IICOMBO_ID:" in file IICOMBO {":STATUS():"} -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
                        GO B431_EXIT
                     END
                  END ELSE
                     ERR_CODE = "B431-ERROR-3-7"
                     ERR_MSG  = "The package code IICOMBO record ":IICOMBO_ID:" does not exist in file IICOMBO -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
                     GO B431_EXIT
                  END
               END
            END ELSE
               ERR_CODE = "B431-ERROR-3-8"
               ERR_MSG  = "The package code control record ":ID:" does not exist in file SYSTBL -> Products<":X:"> -> ":PACKAGE_CODE_STEPID:"."
               GO B431_EXIT
            END
         END
      NEXT X
   END

B431_EXIT:
   RETURN


******************************************************************
* Action to take after the transaction is committed successfully *
******************************************************************
B440_TRANSACTION_COMMIT_POST_ACTION:

   ;*****************************************************************************
   ;* Call PIM rest service to return new product CPN/UPC on new product creation
   ;*****************************************************************************
   SYSCON_KEYS      = ""
   SYSCON_KEYS<1>   = "PIM.HTTP.SETTINGS"
   SYSCON_KEYS<2,1> = "PIM.REST.SERVICE.NEW.PRODUCT.CREATION"
   SYSCON_KEYS<2,2> = "POST"
   TOTAL = DCOUNT(PIM_REST_SERVICE_PARAMS, @AM)
   FOR CNT = 1 TO TOTAL
      RTN_STATUS = 0
      IN_DATA = PIM_REST_SERVICE_PARAMS<CNT>
      CALL SYSS9000.1(SYSCON_KEYS, IN_DATA, OUT_DATA, RTN_STATUS)
      IF @SYSTEM.RETURN.CODE # 0 OR RTN_STATUS # 0 THEN
         INFO_CODE_LIST<-1> = "B440-PIM-REST-SERVICE-CALL"
         INFO_MSG_LIST<-1>  = "Program SYSS9000.1 aborted at ":RTN_STATUS<1>:" -> ":RTN_STATUS<2>:" -> {":IN_DATA:"}"
      END
   NEXT CNT

   ;***************************************************************
   ;* Send email to product workbench users on new product creation
   ;***************************************************************
   TOTAL = DCOUNT(ITMMSTWRK_ID_LIST, @AM)
   FOR CNT = 1 TO TOTAL
      RTN_STATUS = 0
      CALL BOMS3075.7(ITMMSTWRK_ID_LIST<CNT>,"MP","","","","",RTN_STATUS)
      IF @SYSTEM.RETURN.CODE # 0 OR RTN_STATUS # 0 THEN
         INFO_CODE_LIST<-1> = "B440-INFOFLO-PRODUCT-WORKBENCH-EMAIL"
         INFO_MSG_LIST<-1>  = "Program BOMS3075.7 aborted -> Unable to send email when the product workbench Stage advances on PIM new product creation -> {":ITMMSTWRK_ID_LIST<CNT>:"}."
      END
   NEXT CNT

B440_EXIT:
   RETURN

*****************************************************************
* Email PIM Outbound Integration Request Process Summary Report *
*****************************************************************
B500_EMAIL_SUMMARY_REPORT:

   ;* Build summary report
   IF SUMMARY_REPORT_ENTITY_DG_CONTENT # "" THEN SUMMARY_REPORT_CONTENT<-1> = SUMMARY_REPORT_ENTITY_DG_CONTENT
   IF SUMMARY_REPORT_ENTITY_TC_CONTENT # "" THEN SUMMARY_REPORT_CONTENT<-1> = SUMMARY_REPORT_ENTITY_TC_CONTENT
   IF SUMMARY_REPORT_PRODUCT_CONTENT # "" THEN SUMMARY_REPORT_CONTENT<-1> = SUMMARY_REPORT_PRODUCT_CONTENT
   IF SUMMARY_REPORT_PACKAGE_CONTENT # "" THEN SUMMARY_REPORT_CONTENT<-1> = SUMMARY_REPORT_PACKAGE_CONTENT
   IF SUMMARY_REPORT_PACKAGE_CODE_CONTENT # "" THEN SUMMARY_REPORT_CONTENT<-1> = SUMMARY_REPORT_PACKAGE_CODE_CONTENT
   SWAP @AM WITH CHAR(13):CHAR(10) IN SUMMARY_REPORT_CONTENT
   SWAP @VM WITH CHAR(13):CHAR(10) IN SUMMARY_REPORT_CONTENT

   ;* Email PIM Outbound Integration Process Summary Report
   IF EMAIL_REPORT AND TRIM(SUMMARY_REPORT_CONTENT) # "" THEN
      EMAIL_TO = PIM_ADMIN_RECIPIENTS

      ;* Convert context from ASCII ISO-88581 (Unix) to Unicode Latin-1 (Windows)
      CONTEXT_VALUE = SUMMARY_REPORT_CONTENT
      GOSUB CONVERT.ASCII.TO.UNICODE
      SUMMARY_REPORT_CONTENT = RESULT

      ;* Generate Summary Report Text File
      DATE_OCONV = OCONV(DATE(),"D4/")
      TIME_OCONV = OCONV(TIME(),'MTS')
      SWAP "/" WITH "" IN DATE_OCONV
      SWAP ":" WITH "" IN TIME_OCONV
      FILE_DIR = "DAY_REPORTS"
      IF ENTITY_DG_FOUND THEN
         FILE_NAME  = "PIMS9100.1_":ENTITY_DG_CODE:"_":DATE_OCONV:"_":TIME_OCONV:".txt"
      END
      IF ENTITY_TC_FOUND THEN
         FILE_NAME  = "PIMS9100.1_":ENTITY_TC_CODE:"_":DATE_OCONV:"_":TIME_OCONV:".txt"
      END
      IF PACKAGE_CODE_FOUND THEN
         FILE_NAME  = "PIMS9100.1_":PACKAGE_CODE:"_":DATE_OCONV:"_":TIME_OCONV:".txt"
      END
      IF PRODUCT_FOUND THEN
         FILE_NAME  = "PIMS9100.1_":PRODUCT_CODE_SAVE:"_":DATE_OCONV:"_":TIME_OCONV:".txt"
      END
      OPENSEQ FILE_DIR, FILE_NAME TO REPORT_FILE
      ON ERROR
         ERR_CODE = "B500-ERROR-1-1"
         ERR_MSG  = "Cannot open sequential file ":FILE_NAME:" in directory ":FILE_DIR:"."
         GO B500_EXIT
      END LOCKED
         ERR_CODE = "B500-ERROR-1-2"
         ERR_MSG  = "The summary report file ":FILE_NAME:" in directory ":FILE_DIR:" is currently locked by { ":GETUSERNAME(STATUS()):" }."
         RECORD_LOCK_FOUND = @TRUE
         GO B500_EXIT
      END THEN
         WRITESEQ SUMMARY_REPORT_CONTENT TO REPORT_FILE  ;* overwrite if file exists
         ON ERROR
            ERR_CODE = "B500-ERROR-1-3"
            ERR_MSG  = "Unable to write file ":FILE_NAME:" in directory ":FILE_DIR:" { ":STATUS():" }."
            GO B500_EXIT
         END THEN
            CLOSESEQ REPORT_FILE
         END ELSE
            ERR_CODE = "B500-ERROR-1-4"
            ERR_MSG  = "Failed to write sequential file ":FILE_NAME:" in directory ":FILE_DIR:"."
            GO B500_EXIT
         END
      END ELSE
         BEGIN CASE
         CASE STATUS() = 0  ;* opened file ok but does not exist
            WRITESEQ SUMMARY_REPORT_CONTENT TO REPORT_FILE  ;* create the file
            ON ERROR
               ERR_CODE = "B500-ERROR-1-5"
               ERR_MSG  = "Unable to write file ":FILE_NAME:" in directory ":FILE_DIR:" { ":STATUS():" }."
               GO B500_EXIT
            END THEN
               CLOSESEQ REPORT_FILE
            END ELSE
               ERR_CODE = "B500-ERROR-1-6"
               ERR_MSG  = "Error writing to sequential file ":FILE_NAME:" in directory ":FILE_DIR:"."
               GO B500_EXIT
            END
         CASE STATUS() = 1
            ERR_CODE = "B500-ERROR-1-7"
            ERR_MSG  = "The summary report file ":FILE_NAME:" is not a sequential-access file."
            GO B500_EXIT
         CASE STATUS() = 2
            ERR_CODE  = "B500-ERROR-1-8"
            ERR_MSG  = "The summary report file directory ":FILE_DIR:" does not exist."
            GO B500_EXIT
         CASE STATUS() = 3
            ERR_CODE  = "B500-ERROR-1-9"
            ERR_MSG  = "The READONLY clause was included in the command statement and the summary report file ":FILE_NAME:" does not exist."
            GO B500_EXIT
         CASE STATUS() = 4
            ERR_CODE  = "B500-ERROR-1-10"
            ERR_MSG  = "An unknown error occurred (such as having too many files open or permission problems) while opening sequential html email template file ":FILE_NAME:"."
            GO B500_EXIT
         END CASE
      END

      ;* Build report body message
      SWAP '\' WITH '/' IN STEPXML_FILEPATH  ;* avoid escape character (e.g. \r)
      EMAIL_BODY = STEPXML_FILEPATH:CHAR(13):CHAR(13)
      TOTAL = DCOUNT(INFO_CODE_LIST, @AM)
      FOR CNT = 1 TO TOTAL
         INFO_CODE   = INFO_CODE_LIST<CNT>
         INFO_MSG    = INFO_MSG_LIST<CNT>
         EMAIL_BODY := "==> Error: PIM integration post action process failed: ":CHAR(13):CHAR(13):INFO_CODE:" -> ":INFO_MSG:CHAR(13):CHAR(13)
      NEXT CNT
      IF ERR_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_NAME_LIST # "" THEN
         SWAP @AM WITH @VM IN ERR_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_NAME_LIST
         EMAIL_BODY := "==> Warning: New PIM STEPXML Entity DangerousGood attribute name found: ":CHAR(13):CHAR(13):ERR_PIM_STEPXML_ENTITY_DG_ATTRIBUTE_NAME_LIST
      END
      IF ERR_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_NAME_LIST # "" THEN
         SWAP @AM WITH @VM IN ERR_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_NAME_LIST
         EMAIL_BODY := "==> Warning: New PIM STEPXML Entity TariffCode attribute name found: ":CHAR(13):CHAR(13):ERR_PIM_STEPXML_ENTITY_TC_ATTRIBUTE_NAME_LIST
      END
      IF ERR_PIM_STEPXML_PRODUCT_ATTRIBUTE_NAME_LIST # "" THEN
         SWAP @AM WITH @VM IN ERR_PIM_STEPXML_PRODUCT_ATTRIBUTE_NAME_LIST
         EMAIL_BODY := "==> Warning: New PIM STEPXML Product attribute name found: ":CHAR(13):CHAR(13):ERR_PIM_STEPXML_PRODUCT_ATTRIBUTE_NAME_LIST
      END
      IF ERR_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_NAME_LIST # "" THEN
         SWAP @AM WITH @VM IN ERR_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_NAME_LIST
         EMAIL_BODY := "==> Warning: New PIM STEPXML PackageCode attribute name found: ":CHAR(13):CHAR(13):ERR_PIM_STEPXML_PACKAGE_CODE_ATTRIBUTE_NAME_LIST
      END
      IF ERR_PIM_STEPXML_PACKAGE_ATTRIBUTE_NAME_LIST # "" THEN
         SWAP @AM WITH @VM IN ERR_PIM_STEPXML_PACKAGE_ATTRIBUTE_NAME_LIST
         EMAIL_BODY := "==> Warning: New PIM STEPXML Package attribute name found: ":CHAR(13):CHAR(13):ERR_PIM_STEPXML_PACKAGE_ATTRIBUTE_NAME_LIST
      END

      ;* Set up the Email parameters
      TIMESTAMP = OCONV(DATE(),"D4/"):" ":OCONV(TIME(),'MTS')
      IF ENTITY_DG_FOUND THEN
         EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] *** PIM Outbound Integration Process Entity DG Summary Report ==> ":ENTITY_DG_CODE:" *** ":TIMESTAMP
      END
      IF ENTITY_TC_FOUND THEN
         EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] *** PIM Outbound Integration Process Entity TC Summary Report ==> ":ENTITY_TC_CODE:" *** ":TIMESTAMP
      END
      IF PACKAGE_CODE_FOUND THEN
         EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] *** PIM Outbound Integration Process Package Code Summary Report ==> ":PACKAGE_CODE:" *** ":TIMESTAMP
      END
      IF PRODUCT_FOUND THEN
         EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] *** PIM Outbound Integration Process Product Summary Report ==> ":PRODUCT_CODE_SAVE:" *** ":TIMESTAMP
      END
      PARAM    = ""
      PARAM<1> = EMAIL_BODY
      PARAM<2> = EMAIL_SUBJECT
      PARAM<3> = EMAIL_TO
      PARAM<4> = FILE_DIR
      PARAM<5> = FILE_NAME

      ;* Send the Email
      CALL SYSS9060.3(PARAM)
      IF @SYSTEM.RETURN.CODE OR PARAM<6> # 0 THEN
         ERR_CODE = "B500-ERROR-2"
         ERR_MSG  = "Unable to email PIM Outbound Integration Process Summary Report to { ":EMAIL_TO:" } -> { ":@SYSTEM.RETURN.CODE:"|":PARAM<6>:" }."
         GO B500_EXIT
      END
   END

B500_EXIT:
   RETURN


************************************************************
* Email PIM Outbound Integration Request Process Error Log *
************************************************************
B510_EMAIL_ERROR_LOG:

   ;* Get PIM Outbound Integration Constant Setup
   IF RECORD_LOCK_FOUND THEN
      EMAIL_TO = IT_SUPPORT_RECIPIENTS  ;* email to devteam
   END ELSE
      EMAIL_TO = PIM_ADMIN_RECIPIENTS   ;* email to PIM admins
   END

   ;* Set up the Email parameters
   TIMESTAMP = OCONV(DATE(),"D4/"):" ":OCONV(TIME(),'MTS')
   IF ENTITY_DG_FOUND THEN
      EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] !!! PIM Outbound Integration Process Entity DG Error Log ==> ":ENTITY_DG_CODE:" !!! ":TIMESTAMP
   END
   IF ENTITY_TC_FOUND THEN
      EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] !!! PIM Outbound Integration Process Entity TC Error Log ==> ":ENTITY_TC_CODE:" !!! ":TIMESTAMP
   END
   IF PACKAGE_CODE_FOUND THEN
      EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] !!! PIM Outbound Integration Process Package Code Error Log ==> ":PACKAGE_CODE:" !!! ":TIMESTAMP
   END
   IF PRODUCT_FOUND THEN
      EMAIL_SUBJECT = "[ ":ACNT_NAME:" ] !!! PIM Outbound Integration Process Product Error Log ==> ":PRODUCT_CODE_SAVE:" !!! ":TIMESTAMP
   END
   SWAP '\' WITH '/' IN STEPXML_FILEPATH  ;* avoid escape character (e.g. \r)
   SWAP "save" WITH "failed" IN STEPXML_FILEPATH
   SWAP "request" WITH "oops" IN STEPXML_FILEPATH
   EMAIL_BODY = STEPXML_FILEPATH:CHAR(13):CHAR(13):STATUS
   PARAM      = ""
   PARAM<1>   = EMAIL_BODY
   PARAM<2>   = EMAIL_SUBJECT
   PARAM<3>   = EMAIL_TO
   PARAM<4>   = ""  ;* attachment file location
   PARAM<5>   = ""  ;* attachment file name

   ;* Send the Email
   CALL SYSS9060.3(PARAM)
   IF @SYSTEM.RETURN.CODE OR PARAM<6> # 0 THEN
      ERR_CODE = "A510-ERROR-1"
      ERR_MSG  = "Unable to email PIM Outbound Integration Process Error Log { ":EMAIL_TO:" } -> { ":@SYSTEM.RETURN.CODE:"|":PARAM<6>:" }."
      GO B510_EXIT
   END

B510_EXIT:
   RETURN


************************************************************************************************************
* Get PIM Integration Request STEPXML XDOM Element Node(s) Handle & Return in Dimensioned Array XDOM_NODES *
************************************************************************************************************
C100_GET_XDOM_ELEMENT_NODES_HANDLE:
*
* XPATH (IN): path of the node to read
*
* XDOM_NODE_CNT (OUT): number of total node found
* XDOM_NODES (OUT): dimensioned array which holds each node handle found
*
   MAT XDOM_NODES = ""
   XDOM_NODE_CNT = 0
   XPATH_EXP = "count(":XPATH:")"
   RTN_CODE = XDOMEvaluate(XDOM, XPATH_EXP, "", XDOM_NODE_CNT)
   IF RTN_CODE # XML.SUCCESS THEN
      ERR_CODE = "C100-ERROR-1"
      ERR_MSG  = "Unable to evaluate XPATH <":XPATH_EXP:">."
      GO C100_EXIT
   END ELSE
      IF XDOM_NODE_CNT > 0 THEN
         GOSUB XDOM.LOCATE.NODE
         IF ERR THEN
            ERR_CODE = "C100-ERROR-2"
            ERR_MSG  = "Unable to locate XPATH <":XPATH:">."
            GO C100_EXIT
         END ELSE
            CNT = 1
            XDOM_NODES(CNT) = FND_NODE
            NEW_NODE = FND_NODE
            LOOP
               RTN_CODE = XDOMLocateNode(NEW_NODE, XDOM.NEXT.SIBLING.WITH.SAME.NAME, 1, XDOM.ELEMENT.NODE, NEW_NODE)
            WHILE RTN_CODE = XML.SUCCESS
               CNT += 1
               XDOM_NODES(CNT) = NEW_NODE
            REPEAT
         END
      END
   END

C100_EXIT:
   RETURN


***************************************************************************************************
* Get PIM Integration Request STEPXML <Value> Child Node(s) Data (Attribute Value & Element Text) *
***************************************************************************************************
C201_GET_STEPXML_VALUE_CHILD_NODE_DATA:
*
* CHILD_NODE_CNT (IN): total child node found
* XDOM_CHILD_NODES (IN): dimensioned array which holds each child node handle found
*
* XDOM_ATTRIBUTE_NAME (OUT): list which holds the XDOM attribute name as per node
* XDOM_ATTRIBUTE_MATRIX (OUT): matrix which holds the XDOM attribute name/value as per node
*
   XDOM_ATTRIBUTE_NAMES  = ""
   XDOM_ATTRIBUTE_MATRIX = ""

   ;***********************************************************************
   ;* loop through our found "Value" child nodes and find our key attribute
   ;***********************************************************************
   FOR Y = 1 TO CHILD_NODE_CNT
      CONTEXT_VALUE_ENG = ""
      CONTEXT_VALUE_FRN = ""

      ;* per <Value> child node handle
      FND_NODE = XDOM_CHILD_NODES(Y)

      ;* read key attribute from the child node <Value>
      ATTR_ID = "AttributeID"
      GOSUB XDOM.READ.ATTRIBUTE
      IF ERR THEN
         ERR_CODE = "C201-ERROR-1"
         ERR_MSG  = "Unable to read attribute (":ATTR_ID:") from the child node <Value>."
         GO C201_EXIT
      END
      ATTR_NAME = ATTR_VALUE
      XDOM_ATTRIBUTE_NAMES<1,-1> = ATTR_NAME

      ;* read context attribute "QualifierID/LOVQualifierID/DerivedContextID" from the sub-child node <ValueGroup> -> <Value>
      ATTR_ID = "QualifierID"
      GOSUB XDOM.READ.ATTRIBUTE
      IF ERR THEN
         ERR_CODE = "C201-ERROR-2-1"
         ERR_MSG  = "Unable to read attribute (QualifierID) from the sub-child node <ValueGroup> -> <Value>."
         GO C201_EXIT
      END
      IF ATTR_VALUE = "" THEN
         ATTR_ID = "LOVQualifierID"
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            ERR_CODE = "C201-ERROR-2-2"
            ERR_MSG  = "Unable to read attribute (LOVQualifierID) from the sub-child node <ValueGroup> -> <Value>."
            GO C201_EXIT
         END
         IF ATTR_VALUE = "" THEN
            ATTR_ID = "DerivedContextID"
            GOSUB XDOM.READ.ATTRIBUTE
            IF ERR THEN
               ERR_CODE = "C201-ERROR-2-3"
               ERR_MSG  = "Unable to read attribute (DerivedContextID) from the sub-child node <ValueGroup> -> <Value>."
               GO C201_EXIT
            END
         END
      END
      CONTEXT_NAME = ATTR_VALUE
      SWAP "std.lang.all" WITH "NIL" IN CONTEXT_NAME  ;* ignore since standard lang is en-US
      SWAP "Qualifier root" WITH "en-US" IN CONTEXT_NAME
      SWAP "Context1" WITH "en-US" IN CONTEXT_NAME
      SWAP "Context2" WITH "fr-CA" IN CONTEXT_NAME

      ;* read element text from child node <Value> (may contain empty value)
      GOSUB XDOM.READ.TEXT
      IF ERR THEN
         RTN_CODE = "C201-ERROR-3"
         RTN_MSG  = "Unable to read element text from child node <Value>."
         GO C201_EXIT
      END
      CONTEXT_VALUE = TEXT_VALUE

      ;* read optional LOV attribute "ID" from child node (may not exist)
      ATTR_ID = "ID"
      GOSUB XDOM.READ.ATTRIBUTE
      IF ERR THEN
         ERR_CODE = "C201-ERROR-4"
         ERR_MSG  = "Unable to read attribute (ID) from the child node <Value>."
         GO C201_EXIT
      END
      ATTR_ID_VALUE = ATTR_VALUE

      ;* override the element text value with the attribute ID value if applicable
      IF ATTR_ID_VALUE # "" THEN
         CONTEXT_VALUE = ATTR_ID_VALUE
      END
      GOSUB CONVERT.UNICODE.TO.ASCII
      CONTEXT_VALUE = RESULT

      ;* read optional dimension unit attribute "UnitID" from child node (may not exist)
      ATTR_ID = "UnitID"
      GOSUB XDOM.READ.ATTRIBUTE
      IF ERR THEN
         ERR_CODE = "C201-ERROR-5"
         ERR_MSG  = "Unable to read attribute (ID) from the child node <Value>."
         GO C201_EXIT
      END
      UNIT_VALUE = ATTR_VALUE

      ;* build context value (attribute value + text value)
      BEGIN CASE
      CASE CONTEXT_NAME = "en-US" OR CONTEXT_NAME = ""
         IF CONTEXT_VALUE_ENG = "" THEN
            CONTEXT_VALUE_ENG = CONTEXT_VALUE
         END ELSE
            CONTEXT_VALUE_ENG := CHAR(250):CONTEXT_VALUE
         END
      CASE CONTEXT_NAME = "fr-CA"
         IF CONTEXT_VALUE_FRN = "" THEN
            CONTEXT_VALUE_FRN = CONTEXT_VALUE
         END ELSE
            CONTEXT_VALUE_FRN := CHAR(250):CONTEXT_VALUE
         END
      CASE 1
         CONTINUE
      END CASE

      ;* build attribute key/value pair matrix
      XDOM_ATTRIBUTE_MATRIX<1,-1> = ATTR_NAME:@SM:CONTEXT_VALUE_ENG:@TM:CONTEXT_VALUE_FRN:@SM:UNIT_VALUE
   NEXT Y

C201_EXIT:
   RETURN


********************************************************************************************************
* Get PIM Integration Request STEPXML <ValueGroup> Child Node(s) Data (Attribute Value & Element Text) *
********************************************************************************************************
C202_GET_STEPXML_VALUEGROUP_CHILD_NODE_DATA:
*
* XPATH_ROOT (IN): XPATH of the parent node
* XQUERY (IN): XQUERY for locating specific node
* CHILD_NODE_CNT (IN): total child node found
* XDOM_CHILD_NODES (IN): dimensioned array which holds each child node handle found
*
* XDOM_ATTRIBUTE_NAME (OUT): list which holds the XDOM attribute name as per node
* XDOM_ATTRIBUTE_MATRIX (OUT): matrix which holds the XDOM attribute name/value as per node
*
   XDOM_ATTRIBUTE_NAMES  = ""
   XDOM_ATTRIBUTE_MATRIX = ""

   ;****************************************************************************
   ;* loop through our found "ValueGroup" child nodes and find our key attribute
   ;****************************************************************************
   FOR Y = 1 TO CHILD_NODE_CNT
      ;* per <ValueGroup> node handle
      FND_NODE = XDOM_CHILD_NODES(Y)

      ;* read key attribute "AttributeID" from the child node <ValueGroup>
      ATTR_ID = "AttributeID"
      GOSUB XDOM.READ.ATTRIBUTE
      IF ERR THEN
         ERR_CODE = "C202-ERROR-1"
         ERR_MSG  = "Unable to read attribute (AttributeID) from the child node <ValueGroup>."
         GO C202_EXIT
      END
      ATTR_NAME = ATTR_VALUE
      XDOM_ATTRIBUTE_NAMES<1,-1> = ATTR_NAME

      ;***********************************************************
      ;* find all our "Value" sub-child nodes with a path of XPATH
      ;* and store them in our dimensioned array XDOM_NODES
      ;***********************************************************
      XPATH = XPATH_ROOT:XQUERY:"/Values/ValueGroup[@":ATTR_ID:"='":ATTR_NAME:"']/Value"
      GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
      IF ERR_CODE # "" THEN
         GO C202_EXIT
      END ELSE
         SUBCHILD_NODE_CNT       = XDOM_NODE_CNT   ;* total "Value" sub-child nodes found
         MAT XDOM_SUBCHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
      END

      ;***************************************************************************
      ;* loop through our found "Value" sub-child nodes and find our key attribute
      ;***************************************************************************
      MULTI_VALUE       = ""
      CONTEXT_VALUE_ENG = ""
      CONTEXT_VALUE_FRN = ""
      FOR Z = 1 TO SUBCHILD_NODE_CNT
         ;* <ValueGroup> -> <Value> node handle
         FND_NODE = XDOM_SUBCHILD_NODES(Z)

         ;* read context attribute "QualifierID/LOVQualifierID/DerivedContextID" from the sub-child node <ValueGroup> -> <Value>
         ATTR_ID = "QualifierID"
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            ERR_CODE = "C202-ERROR-2-1"
            ERR_MSG  = "Unable to read attribute (QualifierID) from the sub-child node <ValueGroup> -> <Value>."
            GO C202_EXIT
         END
         IF ATTR_VALUE = "" THEN
            ATTR_ID = "LOVQualifierID"
            GOSUB XDOM.READ.ATTRIBUTE
            IF ERR THEN
               ERR_CODE = "C202-ERROR-2-2"
               ERR_MSG  = "Unable to read attribute (LOVQualifierID) from the sub-child node <ValueGroup> -> <Value>."
               GO C202_EXIT
            END
            IF ATTR_VALUE = "" THEN
               ATTR_ID = "DerivedContextID"
               GOSUB XDOM.READ.ATTRIBUTE
               IF ERR THEN
                  ERR_CODE = "C202-ERROR-2-3"
                  ERR_MSG  = "Unable to read attribute (DerivedContextID) from the sub-child node <ValueGroup> -> <Value>."
                  GO C202_EXIT
               END
            END
         END
         CONTEXT_NAME = ATTR_VALUE
         SWAP "std.lang.all" WITH "NIL" IN CONTEXT_NAME  ;* ignore since standard lang is en-US
         SWAP "Qualifier root" WITH "en-US" IN CONTEXT_NAME
         SWAP "Context1" WITH "en-US" IN CONTEXT_NAME
         SWAP "Context2" WITH "fr-CA" IN CONTEXT_NAME

         ;* read element text from sub-child node <ValueGroup> -> <Value> (may contain empty value)
         GOSUB XDOM.READ.TEXT
         IF ERR THEN
            RTN_CODE = "C202-ERROR-3"
            RTN_MSG  = "Unable to read element text from sub-child node <ValueGroup> -> <Value>."
            GO C202_EXIT
         END
         CONTEXT_VALUE = TEXT_VALUE
         GOSUB CONVERT.UNICODE.TO.ASCII
         CONTEXT_VALUE = RESULT

         ;* read optional LOV attribute "ID" from sub-child node <ValueGroup> -> <Value> (may not exist)
         ATTR_ID = "ID"
         FND_NODE = XDOM_SUBCHILD_NODES(Z)
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            ERR_CODE = "C202-ERROR-4"
            ERR_MSG  = "Unable to read attribute (ID) from the sub-child node <ValueGroup> -> <Value>."
            GO C202_EXIT
         END
         ATTR_ID_VALUE = ATTR_VALUE

         ;* override the element text value with the attribute ID value if applicable
         IF ATTR_ID_VALUE # "" THEN
            CONTEXT_VALUE = ATTR_ID_VALUE
         END

         ;* build context value (attribute value + text value)
         BEGIN CASE
         CASE CONTEXT_NAME = "en-US" OR CONTEXT_NAME = ""
            IF CONTEXT_VALUE_ENG = "" THEN
               CONTEXT_VALUE_ENG = CONTEXT_VALUE
            END ELSE
               CONTEXT_VALUE_ENG := CHAR(250):CONTEXT_VALUE
            END
         CASE CONTEXT_NAME = "fr-CA"
            IF CONTEXT_VALUE_FRN = "" THEN
               CONTEXT_VALUE_FRN = CONTEXT_VALUE
            END ELSE
               CONTEXT_VALUE_FRN := CHAR(250):CONTEXT_VALUE
            END
         CASE 1
            CONTINUE
         END CASE
         MULTI_VALUE = CONTEXT_VALUE_ENG:@TM:CONTEXT_VALUE_FRN
      NEXT CNT

      ;* build attribute key/value pair matrix
      XDOM_ATTRIBUTE_MATRIX<1,-1> = ATTR_NAME:@SM:MULTI_VALUE
   NEXT Y

C202_EXIT:
   RETURN


*******************************************************************************************************************
* Get PIM Integration Request STEPXML <MultiValue> -> <Value> Child Node(s) Data (Attribute Value & Element Text) *
*******************************************************************************************************************
C203_GET_STEPXML_MULTIVALUE_CHILD_NODE_DATA:
*
* CHILD_NODE_CNT (IN): total child node found
* XDOM_CHILD_NODES (IN): dimensioned array which holds each child node handle found
*
* XDOM_ATTRIBUTE_NAME (OUT): list which holds the XDOM attribute name as per node
* XDOM_ATTRIBUTE_MATRIX (OUT): matrix which holds the XDOM attribute name/value as per node
*
   XDOM_ATTRIBUTE_NAMES  = ""
   XDOM_ATTRIBUTE_MATRIX = ""

   ;*************************************************************************************
   ;* loop through our found "MultiValue -> Value" child nodes and find our key attribute
   ;*************************************************************************************
   FOR Y = 1 TO CHILD_NODE_CNT
      ;* per <MultiValue> node handle
      FND_NODE = XDOM_CHILD_NODES(Y)

      ;* read key attribute "AttributeID" from the child node <ValueGroup>
      ATTR_ID = "AttributeID"
      GOSUB XDOM.READ.ATTRIBUTE
      IF ERR THEN
         ERR_CODE = "C203-ERROR-1"
         ERR_MSG  = "Unable to read attribute (AttributeID) from the child node <ValueGroup>."
         GO C203_EXIT
      END
      ATTR_NAME = ATTR_VALUE
      XDOM_ATTRIBUTE_NAMES<1,-1> = ATTR_VALUE

      ;****************************************************************
      ;* find all our "MultiValue" sub-child nodes with a path of XPATH
      ;* and store them in our dimensioned array XDOM_NODES
      ;****************************************************************
      XPATH = XPATH_ROOT:XQUERY:"/Values/MultiValue[@":ATTR_ID:"='":ATTR_NAME:"']/Value"
      GOSUB C100_GET_XDOM_ELEMENT_NODES_HANDLE
      IF ERR_CODE # "" THEN
         GO C203_EXIT
      END ELSE
         SUBCHILD_NODE_CNT       = XDOM_NODE_CNT   ;* total "Value" sub-child nodes found
         MAT XDOM_SUBCHILD_NODES = MAT XDOM_NODES  ;* dimensioned array copy operation
      END

      ;***************************************************************************
      ;* loop through our found "Value" sub-child nodes and find our key attribute
      ;***************************************************************************
      MULTI_VALUE       = ""
      CONTEXT_VALUE_ENG = ""
      CONTEXT_VALUE_FRN = ""
      FOR Z = 1 TO SUBCHILD_NODE_CNT
         ;* <ValueGroup> -> <Value> node handle
         FND_NODE = XDOM_SUBCHILD_NODES(Z)

         ;* read context attribute "QualifierID/LOVQualifierID/DerivedContextID" from the sub-child node <ValueGroup> -> <Value>
         ATTR_ID = "QualifierID"
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            ERR_CODE = "C203-ERROR-2-1"
            ERR_MSG  = "Unable to read attribute (QualifierID) from the sub-child node <ValueGroup> -> <Value>."
            GO C203_EXIT
         END
         IF ATTR_VALUE = "" THEN
            ATTR_ID = "LOVQualifierID"
            GOSUB XDOM.READ.ATTRIBUTE
            IF ERR THEN
               ERR_CODE = "C203-ERROR-2-2"
               ERR_MSG  = "Unable to read attribute (LOVQualifierID) from the sub-child node <ValueGroup> -> <Value>."
               GO C203_EXIT
            END
            IF ATTR_VALUE = "" THEN
               ATTR_ID = "DerivedContextID"
               GOSUB XDOM.READ.ATTRIBUTE
               IF ERR THEN
                  ERR_CODE = "C203-ERROR-2-3"
                  ERR_MSG  = "Unable to read attribute (DerivedContextID) from the sub-child node <ValueGroup> -> <Value>."
                  GO C203_EXIT
               END
            END
         END
         CONTEXT_NAME = ATTR_VALUE
         SWAP "std.lang.all" WITH "NIL" IN CONTEXT_NAME  ;* ignore since standard lang is en-US
         SWAP "Qualifier root" WITH "en-US" IN CONTEXT_NAME
         SWAP "Context1" WITH "en-US" IN CONTEXT_NAME
         SWAP "Context2" WITH "fr-CA" IN CONTEXT_NAME

         ;* read element text from sub-child node <Value> (may contain empty value)
         GOSUB XDOM.READ.TEXT
         IF ERR THEN
            RTN_CODE = "C203-ERROR-3"
            RTN_MSG  = "Unable to read element text from child node <Value>."
            GO C203_EXIT
         END
         CONTEXT_VALUE = TEXT_VALUE

         ;* read key attribute from the child node <MultiValue> -> <Value>
         ATTR_ID = "ID"
         GOSUB XDOM.READ.ATTRIBUTE
         IF ERR THEN
            ERR_CODE = "C203-ERROR-4"
            ERR_MSG  = "Unable to read attribute (":ATTR_ID:") from the child node <MultiValue> -> <Value>."
            GO C203_EXIT
         END
         ATTR_ID_VALUE = ATTR_VALUE

         ;* override the element text value with the attribute ID value if applicable
         IF ATTR_ID_VALUE # "" THEN
            CONTEXT_VALUE = ATTR_ID_VALUE
         END
         GOSUB CONVERT.UNICODE.TO.ASCII
         CONTEXT_VALUE = RESULT

         ;* build context value (attribute value + text value)
         BEGIN CASE
         CASE CONTEXT_NAME = "en-US" OR CONTEXT_NAME = ""
            IF CONTEXT_VALUE_ENG = "" THEN
               CONTEXT_VALUE_ENG = CONTEXT_VALUE
            END ELSE
               CONTEXT_VALUE_ENG := CHAR(250):CONTEXT_VALUE
            END
         CASE CONTEXT_NAME = "fr-CA"
            IF CONTEXT_VALUE_FRN = "" THEN
               CONTEXT_VALUE_FRN = CONTEXT_VALUE
            END ELSE
               CONTEXT_VALUE_FRN := CHAR(250):CONTEXT_VALUE
            END
         CASE 1
            CONTINUE
         END CASE
         MULTI_VALUE = CONTEXT_VALUE_ENG:@TM:CONTEXT_VALUE_FRN
      NEXT Z

      ;* build attribute key/value pair matrix
      XDOM_ATTRIBUTE_MATRIX<1,-1> = ATTR_NAME:@SM:MULTI_VALUE
   NEXT Y

C203_EXIT:
   RETURN


*************************************************
* User Defined XDOM Internal Subroutine Section *
*************************************************

*** read attribute from node ***
XDOM.READ.ATTRIBUTE.FROM.NODE:
*
* XPATH (IN): path of the node to read
*
* ATTR_VALUE (OUT): value of the attribute, otherwise ""
* ERR (OUT): true if an error occurred
*
   ERR = @FALSE
   GOSUB XDOM.LOCATE.NODE
   IF NOT(ERR) THEN
      GOSUB XDOM.READ.ATTRIBUTE
   END
   RETURN

*** read text from node ***
XDOM.READ.TEXT.FROM.NODE:
*
* XPATH (IN): path of the node to read
*
* TEXT_VALUE (OUT): value of the attribute, otherwise ""
* ERR (OUT): true if an error occurred
*
   ERR = @FALSE
   GOSUB XDOM.LOCATE.NODE
   IF NOT(ERR) THEN
      GOSUB XDOM.READ.TEXT
   END
   RETURN

*** locate node ***
XDOM.LOCATE.NODE:
*
* XPATH (IN): path of the node to read
*
* FND_NODE (OUT): node that was found
* ERR (OUT): true if an error occurred
*
   ERR = @FALSE
   RTN_CODE = XDOMLocate(XDOM, XPATH, "", FND_NODE)
   IF RTN_CODE # XML.SUCCESS THEN
      ERR = @TRUE
   END
   RETURN

*** evaluate xpath ***
XDOM.EVALUATE.XPATH:
*
* XPATH (IN): path of the node to read
* FND_NODE (IN): handle to the context
*
* RESULT (OUT): result of the evaluation
* ERR (OUT): true if an error occurred
*
   ERR = @FALSE
   RTN_CODE = XDOMEvaluate(FND_NODE, XPATH, "", RESULT)
   IF RTN_CODE # XML.SUCCESS THEN
      ERR = @TRUE
   END
   RETURN

*** Read attribute ***
XDOM.READ.ATTRIBUTE:
*
*  ATTR_ID (IN) : attribute to read
*  FND_NODE (IN) : node to read attribute from
*
*  ATTR_VALUE (OUT): value of the attribute, otherwise ""
*  ERR (OUT): true if an error occurred
*
   ERR = @FALSE
   ATTR_VALUE = ""
   RTN_CODE = XDOMGetAttribute(FND_NODE, ATTR_ID, ATTR_NODE)
   IF RTN_CODE = XML.SUCCESS THEN
      RTN_CODE = XDOMGetNodeValue(ATTR_NODE, ATTR_VALUE)
      IF RTN_CODE # XML.SUCCESS THEN
         ERR = @TRUE
      END
   END ELSE
      ;* attribute may not exist
      ATTR_VALUE = ""
   END
   RETURN

*** Read text ***
XDOM.READ.TEXT:
*
*  FND_NODE (IN) : node to read text from
*
*  TEXT_VALUE (OUT): value of the text, otherwise ""
*
   ERR = @FALSE
   TEXT_VALUE = ""  ;* value of the text may not be applicable
   RTN_CODE = XDOMLocateNode(FND_NODE, XDOM.CHILD, XDOM.FIRST.CHILD, XDOM.TEXT.NODE, TEXT_NODE)
   IF RTN_CODE # XML.SUCCESS THEN
      TEXT_VALUE = ""  ;* element text may not exist
   END ELSE
      RTN_CODE = XDOMGetNodeValue(TEXT_NODE, TEXT_VALUE)
      IF RTN_CODE # XML.SUCCESS THEN
         TEXT_VALUE = ""  ;* element text may not exist
      END
   END
   RETURN

*** Formating product description ***
FORMAT.PRODUCT.DESCRIPTION:
*
*  PRODUCT_OWNER (IN): owner of the product (i.e. IPEX or Canplas)
*  PRODUCT_CANPLAS_PART_NBR (IN): Canplas product part number
*  PRODUCT_CUT_LENGHT (IN): product cut length dimension (words contain space)
*  TEXT_VALUE (IN) : product description text to be formatted
*
*  RESULT (OUT): re-formatted product description text
*
   RESULT = ""

   ;* special logic for product description with cut length
   FOUND = @FALSE
   PRODUCT_CUT_LENGTH = TRIM(PRODUCT_CUT_LENGTH)
   IF PRODUCT_CUT_LENGTH # "" AND INDEX(TEXT_VALUE, PRODUCT_CUT_LENGTH, 1) THEN
      SWAP_VALUE = PRODUCT_CUT_LENGTH
      SWAP " " WITH @SM IN SWAP_VALUE
      SWAP PRODUCT_CUT_LENGTH WITH SWAP_VALUE IN TEXT_VALUE
      FOUND = @TRUE
   END

   SWAP CHAR(9) WITH " " IN TEXT_VALUE   ;* remove tab char
   SWAP CHAR(10) WITH " " IN TEXT_VALUE  ;* remove newline char
   SWAP CHAR(13) WITH " " IN TEXT_VALUE  ;* remove carriage return char
   TOKENS = TRIM(TEXT_VALUE," ","R")     ;* remove all leading, trailing, and contiguous occurrences of char
   SWAP " " WITH @AM IN TOKENS
   TTL = DCOUNT(TOKENS, @AM)
   TOTAL_LINES = 0; POS = 1; RESULT = ""; DESC_TEXT = ""

   ;* special logic for Canplas product description
   IF PRODUCT_OWNER = "CPL" AND PRODUCT_CANPLAS_PART_NBR = TOKENS<1> THEN
      RESULT = TOKENS<1>:SPACE(25)[1,25]  ;* first token is the Canplas part number which is put on the first line
      POS = 2
   END

   ;* concatenate per description token in 25 characters long per line
   FOR INC = POS TO TTL
      IF LEN(DESC_TEXT) + LEN(TOKENS<INC>) < 25 THEN
         DESC_TEXT := TOKENS<INC>:" "
      END ELSE
         RESULT := (DESC_TEXT:SPACE(25))[1,25]
         DESC_TEXT = TOKENS<INC>:" "
         TOTAL_LINES += 1
         IF TOTAL_LINES = 3 THEN INC = TTL
      END
   NEXT INC
   IF TOTAL_LINES < 3 THEN
      RESULT := DESC_TEXT
   END
   IF FOUND THEN
      SWAP SWAP_VALUE WITH PRODUCT_CUT_LENGTH IN RESULT
   END
   RETURN

*** Unit conversation to feet ***
CONVERT.UNIT.TO.FEET:
*
*  ATTRIBUTE_UNIT (IN): PIM attribute unit type
*  ATTRIBUTE_VALUE_ENG (IN) : PIM attribute unit value in inch, ft, mm, cm or m
*
*  RESULT (OUT): attribute unit value converted in feet
*
   RESULT = ""

   BEGIN CASE
   CASE UPCASE(ATTRIBUTE_UNIT) = "UNECE.UNIT.FOT"  ;* feet
      RESULT = ATTRIBUTE_VALUE_ENG
   CASE UPCASE(ATTRIBUTE_UNIT) = "UNECE.UNIT.INH"  ;* inch
      RESULT = ATTRIBUTE_VALUE_ENG * 0.0833333
   CASE UPCASE(ATTRIBUTE_UNIT) = "UNECE.UNIT.MTR"  ;* m
      RESULT = ATTRIBUTE_VALUE_ENG * 3.28084
   CASE UPCASE(ATTRIBUTE_UNIT) = "UNECE.UNIT.CMT"  ;* cm
      RESULT = ATTRIBUTE_VALUE_ENG * 0.0328084
   CASE UPCASE(ATTRIBUTE_UNIT) = "UNECE.UNIT.MMT"  ;* mm
      RESULT = ATTRIBUTE_VALUE_ENG * 0.00328084
   END CASE
   RETURN


*** Character encoding conversation from Unicode UTF-8 to ASCII Latin-1 ***
*
*  CONTEXT_VALUE (IN): context string to convert
*
*  RESULT (OUT): result string after conversation
*
CONVERT.UNICODE.TO.ASCII:

   RESULT = ""

   TOT_LEN = LEN(CONTEXT_VALUE)
   FOR INC = 1 TO TOT_LEN
      PER_CHAR = CONTEXT_VALUE[INC,1]
      CHAR_SEQ = SEQ(PER_CHAR)
      IF CHAR_SEQ >= 160 AND CHAR_SEQ <= 255 THEN
         RESULT := UNICODE_TO_ASCII<CHAR_SEQ>
      END ELSE
         RESULT := PER_CHAR
      END
   NEXT INC
   RETURN

*** Character encoding conversation from ASCII Latin-1 to Unicode UTF-8 ***
*
*  CONTEXT_VALUE (IN): context string to convert
*
*  RESULT (OUT): result string after conversation
*
CONVERT.ASCII.TO.UNICODE:

   RESULT = ""

   TOT_LEN = LEN(CONTEXT_VALUE)
   FOR INC = 1 TO TOT_LEN
      PER_CHAR = CONTEXT_VALUE[INC,1]
      CHAR_SEQ = SEQ(PER_CHAR)
      IF CHAR_SEQ >= 128 AND CHAR_SEQ <= 255 THEN
         RESULT := ASCII_TO_UNICODE<CHAR_SEQ>
      END ELSE
         RESULT := PER_CHAR
      END
   NEXT INC
   RETURN

****************************************
* The end of this subroutine
****************************************
